
automation\scripts\autonomous_perfecter.py:274:            # This is a placeholder - specific fixes would be implemented based on the issues
automation\scripts\benchmark_ml_performance.py:472:            # If no models found, create mock benchmark
automation\scripts\benchmark_ml_performance.py:474:                logger.warning("No models found. Creating mock benchmark results...")
automation\scripts\benchmark_ml_performance.py:475:                benchmark_summary["benchmark_results"]["mock_model"] = self._create_mock_benchmark()
automation\scripts\benchmark_ml_performance.py:537:    def _create_mock_benchmark(self) -> Dict[str, Any]:
automation\scripts\benchmark_ml_performance.py:538:        """Create mock benchmark results."""
automation\scripts\complete_auth_system.py:570:              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
automation\scripts\complete_auth_system.py:571:              placeholder="Username or Email"
automation\scripts\complete_auth_system.py:586:              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
automation\scripts\complete_auth_system.py:587:              placeholder="Password"
automation\scripts\complete_auth_system.py:704:                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
automation\scripts\complete_auth_system.py:705:                placeholder="First Name"
automation\scripts\complete_auth_system.py:716:                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
automation\scripts\complete_auth_system.py:717:                placeholder="Last Name"
automation\scripts\complete_auth_system.py:731:              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
automation\scripts\complete_auth_system.py:732:              placeholder="Username"
automation\scripts\complete_auth_system.py:745:              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
automation\scripts\complete_auth_system.py:746:              placeholder="Email address"
automation\scripts\complete_auth_system.py:759:              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
automation\scripts\complete_auth_system.py:760:              placeholder="Password"
automation\scripts\complete_auth_system.py:773:              className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
automation\scripts\complete_auth_system.py:774:              placeholder="Confirm Password"
automation\scripts\fix_environment.py:107:        "test_data/mocks",
automation\scripts\generate_performance_report.py:229:            # System resource usage over time (mock time series)
automation\scripts\generate_performance_report.py:252:            # Trends over time (mock data)
automation\scripts\optimize_cache.py:213:        # Replace numbers and UUIDs with placeholders
automation\scripts\profile_database_performance.py:525:                # Create mock profile for demonstration
automation\scripts\profile_database_performance.py:526:                profile_summary["profile_results"]["mock_database"] = {
automation\scripts\profile_database.py:124:        # If no databases found, create a mock result
automation\scripts\profile_database.py:126:            logger.info("No databases found, creating placeholder result")
automation\scripts\scan_docker_security.py:143:                            "issue": "Potential hardcoded secret",
automation\scripts\scan_docker_security.py:145:                            "description": "Hardcoded secrets in Dockerfile are security risks"
automation\scripts\scan_docker_security.py:253:            # If no images, create mock results
automation\scripts\security_scan.py:335:            # Check .env files for hardcoded secrets
automation\scripts\security_scan.py:345:                        # Check for hardcoded values that look like secrets
automation\scripts\security_scan.py:352:                                # Check for potentially hardcoded secrets
automation\scripts\security_scan.py:359:                                        'issue': 'Potential hardcoded secret',
automation\scripts\setup_test_environment.py:37:                'test_data/mocks',
automation\scripts\setup_test_environment.py:116:                'pytest-mock>=3.10.0',
automation\scripts\validate_model_accuracy.py:398:            # If no models found, create mock validation
automation\scripts\validate_model_accuracy.py:400:                logger.warning("No model files found. Creating mock validation...")
automation\scripts\validate_model_accuracy.py:401:                validation_summary["validation_results"]["mock_model"] = self._create_mock_validation()
automation\scripts\validate_model_accuracy.py:484:    def _create_mock_validation(self) -> Dict[str, Any]:
automation\scripts\validate_model_accuracy.py:485:        """Create mock validation results for demonstration."""
automation\scripts\validate_model_accuracy.py:487:            "model_file": "mock_model.pkl",
automation\master_orchestrator.py:682:            "last_execution": None,  # TODO: Track execution history
backend\routes\analytics.py:5:Updated to use real ML models instead of mock implementations.
backend\routes\betting.py:58:        # Mock implementation - would connect to real arbitrage detection service
backend\routes\performance.py:52:        # Mock implementation - would fetch from database
backend\routes\performance.py:105:        # Mock implementation - would fetch from database
backend\routes\prizepicks.py:66:        # Mock implementation - would use ML models for recommendations
backend\services\advanced_ensemble_service.py:341:        # For now, return a placeholder feature vector
backend\services\advanced_ensemble_service.py:428:        # Adjust based on feature quality (placeholder)
backend\services\advanced_ensemble_service.py:449:        # Placeholder SHAP values - would use actual SHAP library in production
backend\services\advanced_ensemble_service.py:461:        # Placeholder feature importance - would use actual model feature importance
backend\services\comprehensive_feature_engine.py:164:            features[f'avg_{prop_type}_{window}g'] = np.random.uniform(10, 30)  # Placeholder
backend\services\comprehensive_prizepicks_service.py:727:                # TODO: Integrate with ESPN, NBA API, etc. to get actual game results
backend\services\comprehensive_sportsbook_integration.py:488:        return "neutral"  # Placeholder
backend\services\comprehensive_sportsbook_integration.py:511:        # Placeholder implementation
backend\services\data_fetchers.py:5:All mock implementations have been replaced with production-ready data services.
backend\services\data_fetchers.py:44:    # Fallback: minimal real data instead of mock
backend\services\data_fetchers.py:73:    # Fallback: zero stats instead of mock data
backend\services\data_fetchers.py:97:    # Fallback: minimal real data instead of mock
backend\services\real_data_service.py:4:This module provides production-ready data fetching services that replace mock implementations
backend\services\real_data_service.py:97:            # Fallback to minimal real data instead of mock
backend\services\real_data_service.py:554:            # Return minimal real stats instead of mock
backend\services\real_ml_service.py:2:Production-ready ML models and predictions replacing all mock implementations.
backend\tests\test_api_v1.py:9:from unittest.mock import patch, MagicMock
backend\tests\test_api_v1.py:36:def test_get_betting_opportunities(mock_get_games):
backend\tests\test_api_v1.py:37:    # Mock the external API call to avoid 403 errors in tests
backend\tests\test_api_v1.py:38:    mock_get_games.return_value = []
backend\tests\test_api_v1.py:55:    # that are not mocked. For now, we expect it to run without crashing.
backend\tests\test_real_metrics.py:4:Tests for replacing hardcoded metrics with dynamic calculation
backend\tests\test_real_metrics.py:11:from unittest.mock import Mock, patch, MagicMock
backend\tests\test_real_metrics.py:61:        """Test 1: RealPerformanceMetrics creation returns real object (not mock)"""
backend\tests\test_real_metrics.py:74:            # Verify it's not a mock
backend\tests\test_real_metrics.py:75:            assert not isinstance(metrics, Mock)
backend\tests\test_real_metrics.py:76:            assert not isinstance(metrics, MagicMock)
backend\tests\test_real_metrics.py:83:        """Test 2: Model consensus calculation returns dynamic value (not hardcoded 0.95)"""
backend\tests\test_real_metrics.py:95:            # Should not be hardcoded 0.95
backend\tests\test_real_metrics.py:98:            assert consensus != 0.95, "Model consensus should not be hardcoded to 0.95"
backend\tests\test_real_metrics.py:113:        """Test 3: Processing time calculation returns real measurements (not hardcoded 2.5)"""
backend\tests\test_real_metrics.py:125:            # Should not be hardcoded 2.5
backend\tests\test_real_metrics.py:128:            assert avg_time != 2.5, "Average processing time should not be hardcoded to 2.5"
backend\tests\test_real_metrics.py:159:            # Should not be empty list (hardcoded behavior)
backend\tests\test_real_metrics.py:169:        """Test 5: System health metrics return real status (not hardcoded counts)"""
backend\tests\test_real_metrics.py:183:            # Should not be hardcoded values
backend\tests\test_real_metrics.py:189:            assert quantum_count != 4, "Quantum models count should not be hardcoded to 4"
backend\tests\test_real_metrics.py:190:            assert nas_count != 3, "NAS models count should not be hardcoded to 3"
backend\tests\test_real_metrics.py:191:            assert meta_count != 2, "Meta models count should not be hardcoded to 2"
backend\tests\test_real_metrics.py:192:            assert total_count != 9, "Total models count should not be hardcoded to 9"
backend\tests\test_real_metrics.py:439:        """Test 11: Performance metrics endpoint uses real calculation (not hardcoded)"""
backend\tests\test_real_metrics.py:444:            # Mock the ultra_engine to test API behavior
backend\tests\test_real_metrics.py:445:            mock_engine = Mock()
backend\tests\test_real_metrics.py:446:            mock_engine.accuracy_history = [0.85, 0.87, 0.89, 0.91, 0.93]
backend\tests\test_real_metrics.py:447:            mock_engine.prediction_outcomes = [{"id": "1"}, {"id": "2"}]
backend\tests\test_real_metrics.py:448:            mock_engine.model_performance_tracker = {
backend\tests\test_real_metrics.py:454:            metrics = RealPerformanceMetrics(mock_engine)
backend\tests\test_real_metrics.py:456:            # Test that metrics are calculated, not hardcoded
backend\tests\test_real_metrics.py:460:            # Should not be hardcoded values
backend\tests\test_real_metrics.py:472:        """Test 12: System status endpoint uses real model counts (not hardcoded)"""
backend\tests\test_real_metrics.py:476:            # Mock engine with actual model structures
backend\tests\test_real_metrics.py:477:            mock_engine = Mock()
backend\tests\test_real_metrics.py:478:            mock_engine.quantum_models = {"model1": Mock(), "model2": Mock()}
backend\tests\test_real_metrics.py:479:            mock_engine.neural_architecture_models = {"nas1": Mock(), "nas2": Mock(), "nas3": Mock()}
backend\tests\test_real_metrics.py:480:            mock_engine.meta_models = {"meta1": Mock()}
backend\tests\test_real_metrics.py:481:            mock_engine.prediction_cache = {"cache1": "data", "cache2": "data"}
backend\tests\test_real_metrics.py:483:            metrics = RealPerformanceMetrics(mock_engine)
backend\tests\test_real_metrics.py:486:            # Should reflect actual counts, not hardcoded
backend\tests\test_real_metrics.py:493:            mock_engine2 = Mock()
backend\tests\test_real_metrics.py:494:            mock_engine2.quantum_models = {"model1": Mock()}  # Different count
backend\tests\test_real_metrics.py:495:            mock_engine2.neural_architecture_models = {"nas1": Mock(), "nas2": Mock()}  # Different count
backend\tests\test_real_metrics.py:496:            mock_engine2.meta_models = {"meta1": Mock(), "meta2": Mock(), "meta3": Mock()}  # Different count
backend\tests\test_real_metrics.py:497:            mock_engine2.prediction_cache = {"cache1": "data"}  # Different count
backend\tests\test_real_metrics.py:499:            metrics2 = RealPerformanceMetrics(mock_engine2)
backend\utils\llm_engine.py:77:        # placeholder; actual selection delegated to LLMEngine override
backend\api_integration.py:1256:# Mock endpoint removed - use real authentication endpoints in main.py
backend\auth.py:125:        return getattr(user, "generate_token", lambda k: "mock-token")(SECRET_KEY)  # type: ignore[misc]
backend\betting_opportunity_service.py:1105:    """Fallback stub for LLM engine instantiation if not provided."""
backend\complete_stub_endpoints.py:2:Complete implementation of all stub endpoints mentioned in main_enhanced.py
backend\complete_stub_endpoints.py:3:This module provides production-ready implementations for all the stub endpoints
backend\data_sources.py:921:        # For now, return mock data
backend\data_sources.py:925:            "mock_data": True,
backend\database.py:41:    """Asynchronous database manager placeholder for production usage."""
backend\database.py:47:        """Initialize async engine (no-op placeholder)."""
backend\database.py:48:        # Placeholder for async database initialization
backend\database.py:51:        """Dispose async engine (no-op placeholder)."""
backend\database.py:54:        """Get a sync session (placeholder for async session)."""
backend\database.py:62:# Placeholder class for model performance records to satisfy imports in model_service
backend\database.py:64:    """Placeholder for model performance DB model."""
backend\database.py:67:        # Empty implementation - this is just a placeholder class
backend\enhanced_data_pipeline.py:1368:            "consistency": 1.0,  # Placeholder - would need domain-specific rules
backend\enhanced_data_pipeline.py:1369:            "validity": 1.0,  # Placeholder - would need domain-specific validation
backend\enhanced_model_service.py:446:        """Get training data for the prediction model (placeholder)"""
backend\enhanced_revolutionary_engine.py:599:            return 0.5  # Placeholder for IV effect
backend\enhanced_revolutionary_engine.py:605:            return 0.3  # Placeholder for frontdoor effect
backend\enhanced_risk_management.py:500:            log_likelihood = 0.0  # Placeholder
backend\ensemble_engine.py:279:                    # stub: implement tuning with Optuna based on stored cv_scores and metrics
backend\ensemble_engine.py:1014:                # TODO: implement dynamic rebalancing logic
backend\ensemble_engine.py:1027:                # TODO: collect and push performance metrics
backend\ensemble_engine.py:1129:            # SHAP values (stub)
backend\ensemble_engine.py:1293:        """Stub for SHAP value calculation"""
backend\ensemble_engine.py:1294:        # TODO: integrate SHAP explainer for detailed explainability
backend\ensemble_engine.py:1345:                    ),  # placeholder, override metadata as needed
backend\ensemble_engine.py:1371:        self.models = []  # Placeholder for model registry
backend\integration_test_quantum.py:29:                self.errors.append("❌ _create_quantum_ensemble returned None (still mocked)")
backend\integration_test_real_metrics.py:75:            # Verify values are not hardcoded
backend\integration_test_real_metrics.py:144:            # Verify values are not hardcoded (they should be real counts)
backend\main_backup.py:56:    logger.warning("Auth module not available, using mock implementation")
backend\main_backup.py:58:    class MockAuthService:
backend\main_backup.py:69:            return "mock_token"
backend\main_backup.py:75:    AuthService = MockAuthService  # type: ignore[assignment]
backend\main_backup.py:94:    logger.warning("Database module not available, using mock implementation")
backend\main_backup.py:101:    logger.warning("Bet model not available, using mock implementation")
backend\main_backup.py:107:    logger.warning("Risk management module not available, using mock implementation")
backend\main_backup.py:109:    class MockKellyCriterionEngine:
backend\main_backup.py:116:    KellyCriterionEngine = MockKellyCriterionEngine  # type: ignore[assignment,misc]
backend\main_backup.py:262:            logger.warning("database modules not available, using mock implementations")
backend\main_backup.py:511:        # Mock other data sources
backend\main_backup.py:548:        # Mock implementation - would use real SportRadar API
backend\main_backup.py:575:        # Mock implementation - would use real odds API
backend\main_enhanced_prod.py:524:    # For now, return a mock response
backend\main_enhanced_prod.py:583:    mock_news = [
backend\main_enhanced_prod.py:607:        "news": mock_news[:limit],
backend\main_enhanced_prod.py:608:        "total_count": len(mock_news),
backend\main.py:56:    logger.warning("Auth module not available, using mock implementation")
backend\main.py:58:    class MockAuthService:
backend\main.py:69:            return "mock_token"
backend\main.py:75:    AuthService = MockAuthService  # type: ignore[assignment]
backend\main.py:94:    logger.warning("Database module not available, using mock implementation")
backend\main.py:101:    logger.warning("Bet model not available, using mock implementation")
backend\main.py:107:    logger.warning("Risk management module not available, using mock implementation")
backend\main.py:109:    class MockKellyCriterionEngine:
backend\main.py:116:    KellyCriterionEngine = MockKellyCriterionEngine  # type: ignore[assignment,misc]
backend\main.py:262:            logger.warning("database modules not available, using mock implementations")
backend\main.py:511:        # Mock other data sources
backend\main.py:548:        # Mock implementation - would use real SportRadar API
backend\main.py:575:        # Mock implementation - would use real odds API
backend\model_service.py:45:    logger.warning("database modules not available, using mock implementations")
backend\model_service.py:53:    logger.warning("feature_engineering not available, using mock implementation")
backend\model_service.py:55:    class MockFeatureEngineering:
backend\model_service.py:59:    FeatureEngineering = MockFeatureEngineering
backend\model_service.py:447:            # For now, return mock SHAP values
backend\performance_test_real_metrics.py:189:        """Test that calculations are truly dynamic (not hardcoded)"""
backend\performance_test_real_metrics.py:206:            print("⚠️  Consensus calculation may be hardcoded")
backend\performance_test_real_metrics.py:233:    def test_hardcoded_replacement_verification(self):
backend\performance_test_real_metrics.py:234:        """Verify that hardcoded values have been replaced"""
backend\performance_test_real_metrics.py:235:        print("\nTesting hardcoded value replacement verification...")
backend\performance_test_real_metrics.py:237:        # Test consensus is not hardcoded to 0.95
backend\performance_test_real_metrics.py:240:            print(f"✅ Model consensus not hardcoded (value: {consensus:.3f})")
backend\performance_test_real_metrics.py:242:            print(f"⚠️  Model consensus may still be hardcoded to 0.95")
backend\performance_test_real_metrics.py:244:        # Test processing time is not hardcoded to 2.5
backend\performance_test_real_metrics.py:247:            print(f"✅ Processing time not hardcoded (value: {proc_time:.3f}s)")
backend\performance_test_real_metrics.py:249:            print(f"⚠️  Processing time may still be hardcoded to 2.5s")
backend\performance_test_real_metrics.py:251:        # Test system health metrics are not hardcoded
backend\performance_test_real_metrics.py:257:        hardcoded_checks = []
backend\performance_test_real_metrics.py:259:            print(f"✅ Quantum models count not hardcoded (value: {quantum_count})")
backend\performance_test_real_metrics.py:260:            hardcoded_checks.append(True)
backend\performance_test_real_metrics.py:262:            print(f"⚠️  Quantum models count may be hardcoded to 4")
backend\performance_test_real_metrics.py:263:            hardcoded_checks.append(False)
backend\performance_test_real_metrics.py:266:            print(f"✅ NAS models count not hardcoded (value: {nas_count})")
backend\performance_test_real_metrics.py:267:            hardcoded_checks.append(True)
backend\performance_test_real_metrics.py:269:            print(f"⚠️  NAS models count may be hardcoded to 3")
backend\performance_test_real_metrics.py:270:            hardcoded_checks.append(False)
backend\performance_test_real_metrics.py:273:            print(f"✅ Meta models count not hardcoded (value: {meta_count})")
backend\performance_test_real_metrics.py:274:            hardcoded_checks.append(True)
backend\performance_test_real_metrics.py:276:            print(f"⚠️  Meta models count may be hardcoded to 2")
backend\performance_test_real_metrics.py:277:            hardcoded_checks.append(False)
backend\performance_test_real_metrics.py:279:        passed_checks = sum(hardcoded_checks)
backend\performance_test_real_metrics.py:280:        total_checks = len(hardcoded_checks)
backend\performance_test_real_metrics.py:282:        print(f"✅ Hardcoded replacement verification: {passed_checks}/{total_checks} passed")
backend\performance_test_real_metrics.py:285:            'consensus_not_hardcoded': consensus != 0.95,
backend\performance_test_real_metrics.py:286:            'processing_time_not_hardcoded': proc_time != 2.5,
backend\performance_test_real_metrics.py:287:            'model_counts_not_hardcoded': passed_checks >= 2  # At least 2/3 should pass
backend\performance_test_real_metrics.py:308:        # Test 5: Hardcoded replacement verification
backend\performance_test_real_metrics.py:309:        hardcoded_results = self.test_hardcoded_replacement_verification()
backend\performance_test_real_metrics.py:355:        # Hardcoded replacement (15 points)
backend\performance_test_real_metrics.py:356:        hardcoded_score = 15 if all(hardcoded_results.values()) else 10
backend\performance_test_real_metrics.py:357:        total_score += hardcoded_score
backend\performance_test_real_metrics.py:359:        print(f"Hardcoded Replacement: {hardcoded_score}/15")
backend\performance_test_real_metrics.py:382:                'hardcoded': hardcoded_results
backend\prediction_engine.py:435:        # Generate mock arbitrage opportunities
backend\realtime_accuracy_monitor.py:509:        return 0.1  # Low drift score (placeholder)
backend\realtime_engine.py:18:    aioredis = None  # Placeholder for aioredis if not installed
backend\realtime_engine.py:539:            # For now, return mock features
backend\revolutionary_accuracy_engine.py:1177:            meta_learning_adaptation=0.0,  # Placeholder
backend\revolutionary_accuracy_engine.py:1178:            adversarial_robustness_score=0.8,  # Placeholder
backend\risk_management.py:5:# type: ignore[reportMissingTypeStubs]
backend\risk_management.py:541:        return 0.3  # Placeholder
backend\simple_backend.py:56:# Mock data
backend\simple_backend.py:57:mock_betting_opportunities = [
backend\simple_backend.py:122:    return mock_betting_opportunities
backend\simple_backend.py:214:    print("📊 Features: Basic API endpoints, CORS enabled, Mock data")
backend\sports_expert_api.py:28:# JWT and password hashing will be implemented as stubs for now
backend\sports_expert_api.py:202:# Stub implementations for authentication (replace with real implementations)
backend\sports_expert_api.py:204:    """Hash password (stub implementation)."""
backend\sports_expert_api.py:209:    """Verify password (stub implementation)."""
backend\sports_expert_api.py:219:    """Create JWT access token (stub implementation)."""
backend\sports_expert_api.py:234:    """Verify JWT token and return user data (stub implementation)."""
backend\sports_expert_api.py:644:    TODO: Implement agent.detect_model_drift().
backend\sports_expert_api.py:663:    TODO: Implement agent.check_data_quality().
backend\sports_expert_api.py:683:    TODO: Tune threshold and feedback log access.
backend\sports_expert_api.py:704:    TODO: Implement a real restore test.
backend\sports_expert_api.py:719:            # Simulate restore (stub)
backend\sports_expert_api.py:734:    TODO: Replace random simulation with real traffic stats.
backend\sports_expert_api.py:893:    # 1. Ingest data (stub)
backend\sports_expert_api.py:1044:# 28. Automated plugin/model update check (stub)
backend\sports_expert_api.py:1047:    """Check for updates to plugins, models, or dependencies (stub)."""
backend\sports_expert_api.py:1051:    return {"updates": "No updates found (stub)."}
backend\sports_expert_api.py:1054:# 29. Automated compliance/explainability report generation (stub)
backend\sports_expert_api.py:1057:    """Trigger automated compliance/explainability report generation (stub)."""
backend\sports_expert_api.py:1066:# 30. Automated feedback/active learning retraining (stub)
backend\sports_expert_api.py:1069:    """Trigger automated feedback/active learning retraining (stub)."""
backend\sports_expert_api.py:1078:# 31. Automated healthcheck/alerting (stub)
backend\sports_expert_api.py:1081:    """Run automated healthcheck and send alert if unhealthy (stub)."""
backend\sports_expert_api.py:1092:# 32. Automated endpoint usage analytics (stub)
backend\sports_expert_api.py:1095:    """Return automated analytics on endpoint usage (stub)."""
backend\sports_expert_api.py:1100:# 33. Automated admin action logging (stub)
backend\sports_expert_api.py:1103:    """Log an admin action for audit/compliance (stub)."""
backend\sports_expert_api.py:1108:# 34. Automated session cleanup (stub)
backend\sports_expert_api.py:1111:    """Run automated cleanup of expired/old sessions (stub)."""
backend\sports_expert_api.py:1120:# 35. Automated plugin security scan (stub)
backend\sports_expert_api.py:1123:    """Run automated security scan of all plugins/tools (stub)."""
backend\sports_expert_api.py:1337:# 25. Return a summary of all admin actions (stub)
backend\sports_expert_api.py:1340:    """Return a summary of all admin actions (for audit/analytics, stub)."""
backend\sports_expert_api.py:1367:# 6. Admin reload/shutdown (stub)
backend\sports_expert_api.py:1370:    """Reload agent (admin only, stub)."""
backend\sports_expert_api.py:1381:    """Shutdown backend (admin only, stub)."""
backend\sports_expert_api.py:1397:    """Get advanced usage/cost analytics (stub)."""
backend\sports_expert_api.py:1411:    """Get advanced session/user analytics (stub)."""
backend\sports_expert_api.py:1417:# 10. Plugin hot-reload (stub)
backend\sports_expert_api.py:1420:    """Hot-reload all plugins/tools (stub)."""
backend\sports_expert_api.py:1429:# 11. Model download/check (stub)
backend\sports_expert_api.py:1432:    """Download/check model file (stub)."""
backend\sports_expert_api.py:1469:# 14. Admin broadcast message (stub)
backend\sports_expert_api.py:1472:    """Broadcast a message to all users/sessions (stub)."""
backend\system_monitor.py:856:        # Using environment-based configuration instead of hardcoded URLs
backend\task_processor.py:601:                "accuracy": 0.85 + (hash(model_name) % 100) / 1000,  # Mock accuracy
backend\task_processor.py:619:                # Mock features for batch prediction
backend\ultra_accuracy_engine_simple.py:3:Replaces all mock implementations with genuine machine learning predictions.
backend\ultra_accuracy_engine.py:3:All mock implementations have been replaced with real computational methods.
backend\ultra_accuracy_engine.py:1024:            transfer_learning_score=0.85,  # Placeholder
backend\ultra_accuracy_engine.py:1025:            few_shot_accuracy=0.80,  # Placeholder
backend\ultra_accuracy_engine.py:1026:            continual_learning_score=0.88,  # Placeholder
backend\ultra_accuracy_engine.py:1027:            inference_time=np.mean([0.1] * len(predictions)),  # Placeholder
backend\ultra_accuracy_engine.py:1028:            training_time=300.0,  # Placeholder
backend\ultra_accuracy_engine.py:1029:            memory_usage=1024.0,  # Placeholder
backend\ultra_accuracy_engine.py:1030:            model_complexity=0.75,  # Placeholder
backend\ultra_accuracy_engine.py:1031:            uncertainty_quality=0.90,  # Placeholder
backend\ultra_accuracy_engine.py:1032:            confidence_correlation=0.85,  # Placeholder
backend\ultra_accuracy_engine.py:1033:            overconfidence_penalty=0.05,  # Placeholder
backend\ultra_accuracy_engine.py:1897:    hardcoded values, supporting dynamic system monitoring and optimization.
frontend\dist\assets\index-D90EmcIk.js:278: */const J2=[["path",{d:"M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",key:"1xq2db"}]],En=xe("zap",J2),Z2=()=>{const[t,n]=E.useState({autoOptimization:!0,maxModels:47,confidenceThreshold:95,retraining:"quantum",dataFeeds:"all",quantumProcessing:!0,neuralDepth:"deep",learningRate:"adaptive",weatherFilter:!0,injuryFilter:!0,lineMovement:!0}),r={uptime:"99.97%",algorithmVersion:"v4.7.3",neuralNetworks:"47/47",ensembleAccuracy:"94.2",processingNodes:"128",quantumQubits:"512",dataStreams:"847",nextUpdate:"2m 34s"},a={quantumCoherence:99.97,accuracy:94.2,processingSpeed:12};return i.jsxs(Y.div,{className:"space-y-10 animate-slide-in-up",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"quantum-card rounded-3xl p-12 text-center border-2 border-red-500/30",children:[i.jsxs("div",{className:"relative mb-8",children:[i.jsx("div",{className:"absolute inset-0 bg-red-400/20 blur-3xl rounded-full"}),i.jsx("div",{className:"relative text-8xl text-red-400 mb-6 animate-quantum-spin",children:"🛡️"}),i.jsx("h1",{className:"holographic text-5xl font-black mb-4 font-cyber",children:"QUANTUM ADMIN CONTROL"}),i.jsx("p",{className:"text-2xl text-gray-400 font-mono",children:"Neural Network Command Center • Clearance Level: MAXIMUM"})]}),i.jsxs("div",{className:"grid grid-cols-4 gap-8",children:[i.jsxs("div",{children:[i.jsx("div",{className:"text-3xl font-bold text-red-400 font-cyber",children:"ALPHA"}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Security Level"})]}),i.jsxs("div",{children:[i.jsx("div",{className:"text-3xl font-bold text-electric-400 font-cyber",children:"100%"}),i.jsx("div",{className:"text-gray-400 font-mono",children:"System Access"})]}),i.jsxs("div",{children:[i.jsx("div",{className:"text-3xl font-bold text-green-400 font-cyber",children:r.uptime}),i.jsx("div",{className:"text-gray-400 font-mono",children:"System Uptime"})]}),i.jsxs("div",{children:[i.jsx("div",{className:"text-3xl font-bold text-purple-400 font-cyber",children:r.algorithmVersion}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Neural Version"})]})]})]}),i.jsx("div",{className:"quantum-card rounded-2xl p-8 border-2 border-yellow-500/40 bg-yellow-500/5",children:i.jsxs("div",{className:"flex items-center space-x-6",children:[i.jsx(z2,{className:"text-yellow-400 text-4xl animate-pulse"}),i.jsxs("div",{children:[i.jsx("h3",{className:"font-bold text-yellow-400 text-xl font-cyber",children:"QUANTUM AUTO-OPTIMIZATION ACTIVE"}),i.jsx("p",{className:"text-gray-300 font-mono mt-2",children:"All prediction parameters are quantum-optimized for maximum accuracy. Manual adjustments may disrupt neural harmony and reduce performance efficiency."})]})]})}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-8",children:[i.jsxs("div",{className:"admin-control quantum-card rounded-3xl p-8 hover:shadow-neon-purple border border-purple-500/30",children:[i.jsxs("div",{className:"flex items-center space-x-4 mb-6",children:[i.jsx(et,{className:"text-3xl text-purple-400 animate-neural-pulse"}),i.jsx("h3",{className:"font-bold text-purple-400 text-xl font-cyber",children:"NEURAL NETWORKS"})]}),i.jsx("div",{className:"text-5xl font-bold text-white mb-4 font-cyber",children:r.neuralNetworks}),i.jsx("div",{className:"text-sm text-green-400 font-mono mb-2",children:"● All Networks Active & Synchronized"}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:["Ensemble Accuracy: ",r.ensembleAccuracy,"%"]}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:["Processing Nodes: ",r.processingNodes]})]}),i.jsxs("div",{className:"admin-control quantum-card rounded-3xl p-8 hover:shadow-quantum border border-cyan-500/30",children:[i.jsxs("div",{className:"flex items-center space-x-4 mb-6",children:[i.jsx(qo,{className:"text-3xl text-cyan-400 animate-quantum-spin"}),i.jsx("h3",{className:"font-bold text-cyan-400 text-xl font-cyber",children:"QUANTUM CORE"})]}),i.jsx("div",{className:"text-5xl font-bold text-white mb-4 font-cyber",children:r.quantumQubits}),i.jsx("div",{className:"text-sm text-green-400 font-mono mb-2",children:"● Quantum Entanglement Stable"}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:["Coherence: ",a.quantumCoherence,"%"]}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:["Data Streams: ",r.dataStreams]})]}),i.jsxs("div",{className:"admin-control quantum-card rounded-3xl p-8 hover:shadow-neon border border-green-500/30",children:[i.jsxs("div",{className:"flex items-center space-x-4 mb-6",children:[i.jsx(Yi,{className:"text-3xl text-green-400 animate-spin"}),i.jsx("h3",{className:"font-bold text-green-400 text-xl font-cyber",children:"AUTO-OPTIMIZER"})]}),i.jsx("div",{className:"text-3xl font-bold text-green-400 mb-4 font-cyber",children:"QUANTUM ACTIVE"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono mb-1",children:"Last optimization: 47 seconds ago"}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono mb-1",children:["Next cycle: ",r.nextUpdate]}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:["Algorithm: ",r.algorithmVersion]})]})]}),i.jsxs("div",{className:"quantum-card rounded-3xl p-10 border border-electric-500/30",children:[i.jsx("h2",{className:"text-3xl font-bold text-electric-400 holographic mb-8 font-cyber",children:"QUANTUM SYSTEM CONFIGURATION"}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-8",children:[i.jsxs("div",{children:[i.jsx("h3",{className:"font-bold text-white mb-6 text-xl font-cyber",children:"NEURAL ENGINE CONTROLS"}),i.jsxs("div",{className:"flex items-center justify-between mb-6 p-6 quantum-card rounded-2xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white font-cyber",children:"Quantum Auto-Optimization"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Continuously optimize all neural parameters"})]}),i.jsxs("div",{className:"relative",children:[i.jsx("input",{type:"checkbox",checked:t.autoOptimization,onChange:l=>n({...t,autoOptimization:l.target.checked}),className:"w-6 h-6 text-electric-500"}),t.autoOptimization&&i.jsx("div",{className:"absolute inset-0 bg-electric-400/50 rounded blur-sm"})]})]}),i.jsxs("div",{className:"mb-6",children:[i.jsx("label",{className:"block text-sm font-bold mb-3 text-electric-400 font-cyber",children:"QUANTUM CONFIDENCE THRESHOLD"}),i.jsx("input",{type:"range",min:"80",max:"99",value:t.confidenceThreshold,onChange:l=>n({...t,confidenceThreshold:parseInt(l.target.value)}),className:"w-full h-3 bg-gray-700 rounded-full appearance-none slider"}),i.jsxs("div",{className:"text-center text-electric-400 font-bold mt-3 text-2xl font-cyber",children:[t.confidenceThreshold,"%"]})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-3 text-electric-400 font-cyber",children:"NEURAL NETWORK DEPTH"}),i.jsxs("select",{value:t.neuralDepth,onChange:l=>n({...t,neuralDepth:l.target.value}),className:"w-full p-4 rounded-2xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50",children:[i.jsx("option",{value:"shallow",children:"Shallow Networks (Fast)"}),i.jsx("option",{value:"medium",children:"Medium Networks (Balanced)"}),i.jsx("option",{value:"deep",children:"Deep Networks (Accurate)"}),i.jsx("option",{value:"quantum",children:"Quantum Networks (Maximum)"})]})]})]}),i.jsxs("div",{children:[i.jsx("h3",{className:"font-bold text-white mb-6 text-xl font-cyber",children:"NEURAL ANALYSIS MODULES"}),i.jsxs("div",{className:"flex items-center justify-between mb-6 p-6 quantum-card rounded-2xl border border-blue-500/30",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white font-cyber",children:"Weather Matrix"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Real-time weather impact analysis"})]}),i.jsxs("div",{className:"relative",children:[i.jsx("input",{type:"checkbox",checked:t.weatherFilter||!0,onChange:l=>n({...t,weatherFilter:l.target.checked}),className:"w-6 h-6 text-blue-500"}),i.jsx("div",{className:"absolute inset-0 bg-blue-400/50 rounded blur-sm"})]})]}),i.jsxs("div",{className:"flex items-center justify-between mb-6 p-6 quantum-card rounded-2xl border border-red-500/30",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white font-cyber",children:"Injury Intelligence"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Advanced injury report processing"})]}),i.jsxs("div",{className:"relative",children:[i.jsx("input",{type:"checkbox",checked:t.injuryFilter||!0,onChange:l=>n({...t,injuryFilter:l.target.checked}),className:"w-6 h-6 text-red-500"}),i.jsx("div",{className:"absolute inset-0 bg-red-400/50 rounded blur-sm"})]})]}),i.jsxs("div",{className:"flex items-center justify-between mb-6 p-6 quantum-card rounded-2xl border border-yellow-500/30",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white font-cyber",children:"Line Movement Tracker"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Real-time betting line analysis"})]}),i.jsxs("div",{className:"relative",children:[i.jsx("input",{type:"checkbox",checked:t.lineMovement||!0,onChange:l=>n({...t,lineMovement:l.target.checked}),className:"w-6 h-6 text-yellow-500"}),i.jsx("div",{className:"absolute inset-0 bg-yellow-400/50 rounded blur-sm"})]})]})]}),i.jsxs("div",{children:[i.jsx("h3",{className:"font-bold text-white mb-6 text-xl font-cyber",children:"QUANTUM PROCESSING CONTROLS"}),i.jsxs("div",{className:"flex items-center justify-between mb-6 p-6 quantum-card rounded-2xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white font-cyber",children:"Quantum Processing"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Enable quantum-enhanced prediction algorithms"})]}),i.jsxs("div",{className:"relative",children:[i.jsx("input",{type:"checkbox",checked:t.quantumProcessing,onChange:l=>n({...t,quantumProcessing:l.target.checked}),className:"w-6 h-6 text-cyan-500"}),t.quantumProcessing&&i.jsx("div",{className:"absolute inset-0 bg-cyan-400/50 rounded blur-sm"})]})]}),i.jsxs("div",{className:"mb-6",children:[i.jsx("label",{className:"block text-sm font-bold mb-3 text-electric-400 font-cyber",children:"RETRAINING SCHEDULE"}),i.jsxs("select",{value:t.retraining,onChange:l=>n({...t,retraining:l.target.value}),className:"w-full p-4 rounded-2xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50",children:[i.jsx("option",{value:"real-time",children:"Real-time (Continuous)"}),i.jsx("option",{value:"hourly",children:"Hourly Updates"}),i.jsx("option",{value:"daily",children:"Daily Retraining"}),i.jsx("option",{value:"quantum",children:"Quantum Adaptive"})]})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-3 text-electric-400 font-cyber",children:"LEARNING RATE STRATEGY"}),i.jsxs("select",{value:t.learningRate,onChange:l=>n({...t,learningRate:l.target.value}),className:"w-full p-4 rounded-2xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50",children:[i.jsx("option",{value:"conservative",children:"Conservative (0.001)"}),i.jsx("option",{value:"moderate",children:"Moderate (0.01)"}),i.jsx("option",{value:"aggressive",children:"Aggressive (0.1)"}),i.jsx("option",{value:"adaptive",children:"Adaptive (Dynamic)"})]})]})]})]}),i.jsxs("div",{className:"flex justify-center space-x-6 mt-10",children:[i.jsx(Y.button,{className:"px-8 py-4 bg-gradient-to-r from-green-500 to-electric-500 text-black font-bold rounded-xl hover:from-green-400 hover:to-electric-400 transition-all duration-300",whileHover:{scale:1.05},whileTap:{scale:.95},children:i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx(Vg,{className:"w-5 h-5"}),i.jsx("span",{children:"APPLY QUANTUM CONFIG"})]})}),i.jsx(Y.button,{className:"px-8 py-4 bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold rounded-xl hover:from-red-400 hover:to-pink-400 transition-all duration-300",whileHover:{scale:1.05},whileTap:{scale:.95},children:i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx(En,{className:"w-5 h-5"}),i.jsx("span",{children:"EMERGENCY RESET"})]})})]})]}),i.jsxs("div",{className:"quantum-card rounded-3xl p-8",children:[i.jsx("h3",{className:"text-2xl font-bold text-white mb-6 font-cyber",children:"LIVE SYSTEM METRICS"}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-4 gap-6",children:[i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-3xl font-bold text-green-400 font-cyber",children:[a.accuracy.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Accuracy"})]}),i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-3xl font-bold text-cyan-400 font-cyber",children:[a.quantumCoherence.toFixed(2),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Quantum Coherence"})]}),i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-3xl font-bold text-purple-400 font-cyber",children:[a.processingSpeed,"ms"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Response Time"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-3xl font-bold text-electric-400 font-cyber",children:"47/47"}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Neural Networks"})]})]})]})]})},eS=()=>{const[t,n]=E.useState("overview"),[r,a]=E.useState({accuracy:87.3,dataPoints:2847592,neuralNetworks:47,confidence:91.5,processingSpeed:12}),l=[{name:"XGBoost",accuracy:89.2,status:"active",color:"text-green-400"},{name:"Neural Net",accuracy:91.7,status:"active",color:"text-electric-400"},{name:"Ensemble",accuracy:94.1,status:"active",color:"text-cyan-400"},{name:"Deep Learning",accuracy:87.8,status:"training",color:"text-yellow-400"},{name:"Quantum Core",accuracy:96.3,status:"active",color:"text-purple-400"}],u=[{id:"1",name:"Prediction Accuracy",value:94.1,change:2.3,trend:"up",category:"performance"},{id:"2",name:"Data Quality Score",value:98.3,change:.7,trend:"up",category:"data"},{id:"3",name:"Model Confidence",value:91.5,change:-.2,trend:"down",category:"performance"},{id:"4",name:"Processing Speed",value:12,change:-15.2,trend:"up",category:"system"},{id:"5",name:"Neural Networks",value:47,change:4.4,trend:"up",category:"system"},{id:"6",name:"Win Rate",value:73.2,change:3.1,trend:"up",category:"betting"},{id:"7",name:"ROI",value:247,change:12.8,trend:"up",category:"betting"},{id:"8",name:"Sharpe Ratio",value:2.84,change:.15,trend:"up",category:"betting"}];E.useEffect(()=>{const b=setInterval(()=>{a(N=>({...N,accuracy:87.3+Math.random()*.4,dataPoints:2847592+Math.floor(Math.random()*1e3),confidence:91.5+Math.random()*.8,processingSpeed:12+Math.random()*2}))},2e3);return()=>clearInterval(b)},[]);const d=[{id:"overview",name:"Overview",icon:os},{id:"models",name:"Model Performance",icon:et},{id:"realtime",name:"Real-time Data",icon:zo},{id:"betting",name:"Betting Analytics",icon:ls}],h=()=>i.jsxs("div",{className:"space-y-8",children:[i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6",children:u.slice(0,4).map(b=>i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl",whileHover:{scale:1.02},children:[i.jsxs("div",{className:"flex justify-between items-start mb-3",children:[i.jsx("h3",{className:"text-lg font-bold text-white",children:b.name}),i.jsxs("div",{className:`flex items-center space-x-1 ${b.trend==="up"?"text-green-400":b.trend==="down"?"text-red-400":"text-gray-400"}`,children:[i.jsx(ls,{className:"w-4 h-4"}),i.jsxs("span",{className:"text-sm font-mono",children:[b.change>0?"+":"",b.change,"%"]})]})]}),i.jsx("div",{className:"text-3xl font-bold text-electric-400 font-cyber mb-2",children:b.category==="system"&&b.name==="Processing Speed"?`${b.value}ms`:b.category==="betting"&&b.name==="ROI"?`+${b.value}%`:`${b.value}${b.name.includes("Rate")||b.name.includes("Score")||b.name.includes("Accuracy")||b.name.includes("Confidence")?"%":""}`}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono capitalize",children:[b.category," Metric"]})]},b.id))}),i.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-8",children:[i.jsxs("div",{className:"quantum-card p-8 rounded-2xl",children:[i.jsx("h3",{className:"text-2xl font-bold text-white mb-6 font-cyber",children:"NEURAL NETWORK STATUS"}),i.jsx("div",{className:"space-y-4",children:l.slice(0,3).map((b,N)=>i.jsxs("div",{className:"flex justify-between items-center p-4 bg-gray-800/30 rounded-xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:b.name}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:["Status:"," ",i.jsx("span",{className:b.status==="active"?"text-green-400":"text-yellow-400",children:b.status.toUpperCase()})]})]}),i.jsxs("div",{className:`text-2xl font-bold font-cyber ${b.color}`,children:[b.accuracy.toFixed(1),"%"]})]},N))})]}),i.jsxs("div",{className:"quantum-card p-8 rounded-2xl",children:[i.jsx("h3",{className:"text-2xl font-bold text-white mb-6 font-cyber",children:"REAL-TIME METRICS"}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:"Data Processing"}),i.jsxs("span",{className:"text-electric-400 font-bold",children:[r.dataPoints.toLocaleString()," points"]})]}),i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:"Neural Networks"}),i.jsxs("span",{className:"text-green-400 font-bold",children:[r.neuralNetworks,"/47 Active"]})]}),i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:"Response Time"}),i.jsxs("span",{className:"text-cyan-400 font-bold",children:[r.processingSpeed.toFixed(1),"ms"]})]}),i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:"System Confidence"}),i.jsxs("span",{className:"text-purple-400 font-bold",children:[r.confidence.toFixed(1),"%"]})]})]})]})]})]}),p=()=>i.jsxs("div",{className:"space-y-8",children:[i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",children:l.map((b,N)=>i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl",whileHover:{scale:1.02},children:[i.jsxs("div",{className:"flex items-center space-x-3 mb-4",children:[i.jsx(et,{className:`w-6 h-6 ${b.color}`}),i.jsx("h3",{className:"text-xl font-bold text-white",children:b.name})]}),i.jsxs("div",{className:"text-center mb-4",children:[i.jsxs("div",{className:`text-4xl font-bold font-cyber ${b.color}`,children:[b.accuracy.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Accuracy"})]}),i.jsx("div",{className:`text-center px-4 py-2 rounded-xl ${b.status==="active"?"bg-green-500/20 text-green-400":b.status==="training"?"bg-yellow-500/20 text-yellow-400":"bg-red-500/20 text-red-400"}`,children:i.jsx("div",{className:"font-bold font-cyber",children:b.status.toUpperCase()})})]},N))}),i.jsxs("div",{className:"quantum-card p-8 rounded-2xl",children:[i.jsx("h3",{className:"text-2xl font-bold text-white mb-6 font-cyber",children:"MODEL COMPARISON"}),i.jsx("div",{className:"space-y-4",children:l.map((b,N)=>i.jsxs("div",{className:"flex items-center space-x-4",children:[i.jsx("div",{className:"w-32 text-white font-mono",children:b.name}),i.jsx("div",{className:"flex-1 bg-gray-700 rounded-full h-3 overflow-hidden",children:i.jsx(Y.div,{className:`h-full ${b.color.replace("text-","bg-")}`,initial:{width:0},animate:{width:`${b.accuracy}%`},transition:{duration:1,delay:N*.1}})}),i.jsxs("div",{className:`w-16 text-right font-bold ${b.color}`,children:[b.accuracy.toFixed(1),"%"]})]},N))})]})]}),g=()=>i.jsxs("div",{className:"space-y-8",children:[i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-4 gap-6",children:[i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl",whileHover:{scale:1.02},children:[i.jsxs("div",{className:"text-3xl font-bold text-electric-400 font-cyber",children:[r.accuracy.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Live Accuracy"})]}),i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl",whileHover:{scale:1.02},children:[i.jsx("div",{className:"text-3xl font-bold text-green-400 font-cyber",children:r.dataPoints.toLocaleString()}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Data Points"})]}),i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl",whileHover:{scale:1.02},children:[i.jsxs("div",{className:"text-3xl font-bold text-purple-400 font-cyber",children:[r.processingSpeed.toFixed(1),"ms"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Response Time"})]}),i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl",whileHover:{scale:1.02},children:[i.jsxs("div",{className:"text-3xl font-bold text-cyan-400 font-cyber",children:[r.confidence.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Confidence"})]})]}),i.jsxs("div",{className:"quantum-card p-8 rounded-2xl",children:[i.jsx("h3",{className:"text-2xl font-bold text-white mb-6 font-cyber",children:"SYSTEM PERFORMANCE"}),i.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-8",children:[i.jsxs("div",{children:[i.jsx("h4",{className:"text-lg font-bold text-electric-400 mb-4",children:"Neural Network Load"}),i.jsx("div",{className:"space-y-3",children:[1,2,3,4,5].map(b=>i.jsxs("div",{className:"flex items-center space-x-3",children:[i.jsxs("span",{className:"text-gray-400 font-mono w-20",children:["Net #",b*9+5]}),i.jsx("div",{className:"flex-1 bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"h-full bg-electric-400 rounded-full animate-pulse",style:{width:`${Math.random()*40+60}%`}})}),i.jsxs("span",{className:"text-electric-400 font-mono text-sm",children:[(Math.random()*40+60).toFixed(1),"%"]})]},b))})]}),i.jsxs("div",{children:[i.jsx("h4",{className:"text-lg font-bold text-electric-400 mb-4",children:"Data Quality Metrics"}),i.jsxs("div",{className:"space-y-3",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-300",children:"Completeness"}),i.jsx("span",{className:"text-green-400 font-bold",children:"99.2%"})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-300",children:"Accuracy"}),i.jsx("span",{className:"text-electric-400 font-bold",children:"98.7%"})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-300",children:"Consistency"}),i.jsx("span",{className:"text-cyan-400 font-bold",children:"97.9%"})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-300",children:"Timeliness"}),i.jsx("span",{className:"text-purple-400 font-bold",children:"99.8%"})]})]})]})]})]})]}),x=()=>i.jsxs("div",{className:"space-y-8",children:[i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-6",children:u.filter(b=>b.category==="betting").map(b=>i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl",whileHover:{scale:1.02},children:[i.jsx("h3",{className:"text-lg font-bold text-white mb-3",children:b.name}),i.jsx("div",{className:"text-4xl font-bold text-green-400 font-cyber mb-2",children:b.name==="ROI"?`+${b.value}%`:b.name==="Sharpe Ratio"?b.value.toFixed(2):`${b.value}%`}),i.jsxs("div",{className:`text-sm font-mono ${b.trend==="up"?"text-green-400":"text-red-400"}`,children:[b.change>0?"↗":"↘"," ",Math.abs(b.change),"% this week"]})]},b.id))}),i.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-8",children:[i.jsxs("div",{className:"quantum-card p-8 rounded-2xl",children:[i.jsx("h3",{className:"text-2xl font-bold text-white mb-6 font-cyber",children:"PROFIT BREAKDOWN"}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"flex justify-between items-center p-4 bg-gray-800/30 rounded-xl",children:[i.jsx("span",{className:"text-gray-300",children:"NBA Props"}),i.jsx("span",{className:"text-green-400 font-bold",children:"+$12,450"})]}),i.jsxs("div",{className:"flex justify-between items-center p-4 bg-gray-800/30 rounded-xl",children:[i.jsx("span",{className:"text-gray-300",children:"NFL Props"}),i.jsx("span",{className:"text-green-400 font-bold",children:"+$8,720"})]}),i.jsxs("div",{className:"flex justify-between items-center p-4 bg-gray-800/30 rounded-xl",children:[i.jsx("span",{className:"text-gray-300",children:"MLB Props"}),i.jsx("span",{className:"text-green-400 font-bold",children:"+$3,580"})]}),i.jsxs("div",{className:"flex justify-between items-center p-4 bg-green-500/20 rounded-xl border border-green-500/30",children:[i.jsx("span",{className:"text-white font-bold",children:"Total Profit"}),i.jsx("span",{className:"text-green-400 font-bold text-xl",children:"+$24,750"})]})]})]}),i.jsxs("div",{className:"quantum-card p-8 rounded-2xl",children:[i.jsx("h3",{className:"text-2xl font-bold text-white mb-6 font-cyber",children:"RISK METRICS"}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300",children:"Maximum Drawdown"}),i.jsx("span",{className:"text-red-400 font-bold",children:"-4.2%"})]}),i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300",children:"Value at Risk (95%)"}),i.jsx("span",{className:"text-yellow-400 font-bold",children:"$1,247"})]}),i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300",children:"Kelly Criterion"}),i.jsx("span",{className:"text-electric-400 font-bold",children:"12.4%"})]}),i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-300",children:"Confidence Interval"}),i.jsx("span",{className:"text-cyan-400 font-bold",children:"94.7%"})]})]})]})]})]}),y=()=>{switch(t){case"overview":return h();case"models":return p();case"realtime":return g();case"betting":return x();default:return h()}};return i.jsxs(Y.div,{className:"space-y-8",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center mb-8",children:[i.jsx("h1",{className:"text-4xl font-bold text-white mb-4 animate-cyber-pulse holographic font-cyber",children:"ADVANCED ANALYTICS HUB"}),i.jsx("p",{className:"text-purple-400 text-lg font-mono",children:"Deep Learning Performance Metrics & Intelligence"})]}),i.jsx("div",{className:"flex justify-center space-x-4 mb-8",children:d.map(b=>{const N=b.icon;return i.jsxs(Y.button,{onClick:()=>n(b.id),className:`flex items-center space-x-2 px-6 py-3 rounded-xl transition-all ${t===b.id?"bg-electric-500/20 text-electric-400 border-2 border-electric-500/40":"bg-gray-800/50 text-gray-300 hover:bg-gray-700/50"}`,whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(N,{className:"w-5 h-5"}),i.jsx("span",{className:"font-bold font-cyber",children:b.name})]},b.id)})}),i.jsx(Y.div,{initial:{opacity:0,x:20},animate:{opacity:1,x:0},transition:{duration:.3},children:y()},t)]})};var hu={exports:{}},w0;function tS(){return w0||(w0=1,function(t){var n=Object.prototype.hasOwnProperty,r="~";function a(){}Object.create&&(a.prototype=Object.create(null),new a().__proto__||(r=!1));function l(p,g,x){this.fn=p,this.context=g,this.once=x||!1}function u(p,g,x,y,b){if(typeof x!="function")throw new TypeError("The listener must be a function");var N=new l(x,y||p,b),w=r?r+g:g;return p._events[w]?p._events[w].fn?p._events[w]=[p._events[w],N]:p._events[w].push(N):(p._events[w]=N,p._eventsCount++),p}function d(p,g){--p._eventsCount===0?p._events=new a:delete p._events[g]}function h(){this._events=new a,this._eventsCount=0}h.prototype.eventNames=function(){var g=[],x,y;if(this._eventsCount===0)return g;for(y in x=this._events)n.call(x,y)&&g.push(r?y.slice(1):y);return Object.getOwnPropertySymbols?g.concat(Object.getOwnPropertySymbols(x)):g},h.prototype.listeners=function(g){var x=r?r+g:g,y=this._events[x];if(!y)return[];if(y.fn)return[y.fn];for(var b=0,N=y.length,w=new Array(N);b<N;b++)w[b]=y[b].fn;return w},h.prototype.listenerCount=function(g){var x=r?r+g:g,y=this._events[x];return y?y.fn?1:y.length:0},h.prototype.emit=function(g,x,y,b,N,w){var j=r?r+g:g;if(!this._events[j])return!1;var S=this._events[j],C=arguments.length,F,T;if(S.fn){switch(S.once&&this.removeListener(g,S.fn,void 0,!0),C){case 1:return S.fn.call(S.context),!0;case 2:return S.fn.call(S.context,x),!0;case 3:return S.fn.call(S.context,x,y),!0;case 4:return S.fn.call(S.context,x,y,b),!0;case 5:return S.fn.call(S.context,x,y,b,N),!0;case 6:return S.fn.call(S.context,x,y,b,N,w),!0}for(T=1,F=new Array(C-1);T<C;T++)F[T-1]=arguments[T];S.fn.apply(S.context,F)}else{var V=S.length,I;for(T=0;T<V;T++)switch(S[T].once&&this.removeListener(g,S[T].fn,void 0,!0),C){case 1:S[T].fn.call(S[T].context);break;case 2:S[T].fn.call(S[T].context,x);break;case 3:S[T].fn.call(S[T].context,x,y);break;case 4:S[T].fn.call(S[T].context,x,y,b);break;default:if(!F)for(I=1,F=new Array(C-1);I<C;I++)F[I-1]=arguments[I];S[T].fn.apply(S[T].context,F)}}return!0},h.prototype.on=function(g,x,y){return u(this,g,x,y,!1)},h.prototype.once=function(g,x,y){return u(this,g,x,y,!0)},h.prototype.removeListener=function(g,x,y,b){var N=r?r+g:g;if(!this._events[N])return this;if(!x)return d(this,N),this;var w=this._events[N];if(w.fn)w.fn===x&&(!b||w.once)&&(!y||w.context===y)&&d(this,N);else{for(var j=0,S=[],C=w.length;j<C;j++)(w[j].fn!==x||b&&!w[j].once||y&&w[j].context!==y)&&S.push(w[j]);S.length?this._events[N]=S.length===1?S[0]:S:d(this,N)}return this},h.prototype.removeAllListeners=function(g){var x;return g?(x=r?r+g:g,this._events[x]&&d(this,x)):(this._events=new a,this._eventsCount=0),this},h.prototype.off=h.prototype.removeListener,h.prototype.addListener=h.prototype.on,h.prefixed=r,h.EventEmitter=h,t.exports=h}(hu)),hu.exports}var nS=tS();const sS=sd(nS),Ts=class Ts extends sS{constructor(){super();Ve(this,"lineups",new Map);Ve(this,"storageKey","a1betting_saved_lineups");this.loadFromStorage()}static getInstance(){return Ts.instance||(Ts.instance=new Ts),Ts.instance}loadFromStorage(){try{const r=localStorage.getItem(this.storageKey);if(r){const a=JSON.parse(r);Object.entries(a).forEach(([l,u])=>{this.lineups.set(l,{...u,savedAt:new Date(u.savedAt)})})}}catch(r){console.error("Failed to load lineups from storage:",r)}}saveToStorage(){try{const r=Object.fromEntries(this.lineups);localStorage.setItem(this.storageKey,JSON.stringify(r))}catch(r){console.error("Failed to save lineups to storage:",r)}}saveLineup(r){const a=`lineup_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,l={...r,id:a,savedAt:new Date,progress:{totalPicks:r.picks.length,settledPicks:0,wonPicks:0,lostPicks:0,pushPicks:0}};return this.lineups.set(a,l),this.saveToStorage(),this.emit("lineupSaved",l),console.log(`Lineup saved: ${r.name} (${r.type})`),a}updateLineup(r,a){const l=this.lineups.get(r);if(!l)return!1;const u={...l,...a};return this.lineups.set(r,u),this.saveToStorage(),this.emit("lineupUpdated",u),!0}updateLineupProgress(r,a){const l=this.lineups.get(r);if(!l||!l.progress)return!1;const u={...l.progress};a.forEach(({result:h})=>{switch(h){case"won":u.wonPicks++;break;case"lost":u.lostPicks++;break;case"push":u.pushPicks++;break}}),u.settledPicks=u.wonPicks+u.lostPicks+u.pushPicks;let d="active";return u.settledPicks===u.totalPicks&&(d="completed"),this.updateLineup(r,{progress:u,status:d}),!0}deleteLineup(r){const a=this.lineups.delete(r);return a&&(this.saveToStorage(),this.emit("lineupDeleted",r)),a}getLineup(r){return this.lineups.get(r)}getAllLineups(){return Array.from(this.lineups.values()).sort((r,a)=>new Date(a.savedAt).getTime()-new Date(r.savedAt).getTime())}getLineupsByType(r){return this.getAllLineups().filter(a=>a.type===r)}getLineupsByStatus(r){return this.getAllLineups().filter(a=>a.status===r)}getStats(){var N;const r=this.getAllLineups(),a=r.filter(w=>w.status==="completed"),l=a.reduce((w,j)=>w+(j.actualResult||0),0),u=a.reduce((w,j)=>w+j.entryAmount,0),d=a.reduce((w,j)=>{const S=j.actualResult||0;return w+(S<j.entryAmount?j.entryAmount-S:0)},0),h=a.filter(w=>(w.actualResult||0)>w.entryAmount),p=a.length>0?h.length/a.length*100:0,g=r.length>0?r.reduce((w,j)=>{var S;return w+(((S=j.metadata)==null?void 0:S.confidence)||0)},0)/r.length:0,x=u>0?(l-u)/u*100:0,y=r.reduce((w,j)=>(w[j.type]||(w[j.type]={total:0,won:0}),w[j.type].total++,j.actualResult&&j.actualResult>j.entryAmount&&w[j.type].won++,w),{}),b=((N=Object.entries(y).map(([w,j])=>({type:w,winRate:j.total>0?j.won/j.total:0})).sort((w,j)=>j.winRate-w.winRate)[0])==null?void 0:N.type)||"none";return{totalLineups:r.length,activeLineups:r.filter(w=>w.status==="active").length,completedLineups:a.length,totalWinnings:l,totalLosses:d,averageConfidence:g,winRate:p,roi:x,bestPerformingType:b}}exportLineups(r){let a=this.getAllLineups();return r!=null&&r.type&&(a=a.filter(l=>l.type===r.type)),r!=null&&r.status&&(a=a.filter(l=>l.status===r.status)),JSON.stringify(a,null,2)}importLineups(r){try{const a=JSON.parse(r);let l=0;return a.forEach(u=>{u.id&&u.name&&u.type&&u.picks&&(this.lineups.set(u.id,{...u,savedAt:new Date(u.savedAt)}),l++)}),this.saveToStorage(),this.emit("lineupsImported",l),console.log(`Imported ${l} lineups`),!0}catch(a){return console.error("Failed to import lineups:",a),!1}}saveMoneyMakerLineup(r,a,l,u,d){return this.saveLineup({name:r,type:"money-maker",picks:a,entryAmount:l,projectedPayout:u,status:"active",metadata:{confidence:d,source:"Money Maker Pro",tags:["ai-generated","money-maker"]}})}savePrizePicksLineup(r,a,l,u){const d=a.reduce((h,p)=>h+(p.confidence||0),0)/a.length;return this.saveLineup({name:r,type:"prizepicks",picks:a,entryAmount:l,projectedPayout:u,status:"active",metadata:{confidence:d,source:"PrizePicks Pro",tags:["props","prizepicks"]}})}savePropOllamaLineup(r,a,l,u,d){return this.saveLineup({name:r,type:"propollama",picks:a,entryAmount:l,projectedPayout:u,status:"active",metadata:{confidence:d,source:"PropOllama AI",tags:["ai-analysis","llm-generated"]}})}};Ve(Ts,"instance");let Wu=Ts;const Mt=Wu.getInstance(),rS=()=>{const[t,n]=E.useState([]),[r,a]=E.useState(null),[l,u]=E.useState("all"),[d,h]=E.useState("all"),[p,g]=E.useState(null),[x,y]=E.useState(""),[b,N]=E.useState("newest");E.useEffect(()=>{w();const A=()=>w();return Mt.on("lineupSaved",A),Mt.on("lineupUpdated",A),Mt.on("lineupDeleted",A),()=>{Mt.off("lineupSaved",A),Mt.off("lineupUpdated",A),Mt.off("lineupDeleted",A)}},[]);const w=()=>{const A=Mt.getAllLineups(),B=Mt.getStats();n(A),a(B)},j=E.useMemo(()=>{let A=t.filter(B=>{const X=l==="all"||B.type===l,re=d==="all"||B.status===d,oe=x===""||B.name.toLowerCase().includes(x.toLowerCase())||B.picks.some(we=>{var Ae,ge;return((Ae=we.player)==null?void 0:Ae.toLowerCase().includes(x.toLowerCase()))||((ge=we.description)==null?void 0:ge.toLowerCase().includes(x.toLowerCase()))});return X&&re&&oe});switch(b){case"oldest":A.sort((B,X)=>new Date(B.savedAt).getTime()-new Date(X.savedAt).getTime());break;case"confidence":A.sort((B,X)=>{var re,oe;return(((re=X.metadata)==null?void 0:re.confidence)||0)-(((oe=B.metadata)==null?void 0:oe.confidence)||0)});break;case"payout":A.sort((B,X)=>X.projectedPayout-B.projectedPayout);break;default:A.sort((B,X)=>new Date(X.savedAt).getTime()-new Date(B.savedAt).getTime())}return A},[t,l,d,x,b]),S=A=>{switch(A){case"money-maker":return"text-green-400";case"prizepicks":return"text-yellow-400";case"propollama":return"text-blue-400";default:return"text-gray-400"}},C=A=>{switch(A){case"money-maker":return Ui;case"prizepicks":return Bi;case"propollama":return et;default:return Ho}},F=A=>{switch(A){case"active":return"text-electric-400 bg-electric-400/20";case"completed":return"text-green-400 bg-green-400/20";case"pending":return"text-yellow-400 bg-yellow-400/20";case"cancelled":return"text-red-400 bg-red-400/20";default:return"text-gray-400 bg-gray-400/20"}},T=A=>A.progress&&A.progress.totalPicks>0?A.progress.settledPicks/A.progress.totalPicks*100:0,V=A=>{Mt.deleteLineup(A)},I=A=>{Mt.saveLineup({name:`${A.name} (Copy)`,type:A.type,picks:A.picks,entryAmount:A.entryAmount,projectedPayout:A.projectedPayout,status:"pending",metadata:A.metadata})},z=()=>{const A=Mt.exportLineups({type:l!=="all"?l:void 0,status:d!=="all"?d:void 0}),B=new Blob([A],{type:"application/json"}),X=URL.createObjectURL(B),re=document.createElement("a");re.href=X,re.download=`saved-lineups-${l}-${new Date().toISOString().split("T")[0]}.json`,re.click(),URL.revokeObjectURL(X)},J=A=>{const X=Math.floor((new Date().getTime()-A.getTime())/(1e3*60));return X<60?`${X}m ago`:X<1440?`${Math.floor(X/60)}h ago`:`${Math.floor(X/1440)}d ago`},L=A=>{if(!A.progress)return null;const B=T(A),{wonPicks:X,lostPicks:re,pushPicks:oe,totalPicks:we}=A.progress;return i.jsxs("div",{className:"space-y-2",children:[i.jsxs("div",{className:"flex justify-between text-xs text-gray-400",children:[i.jsxs("span",{children:["Progress: ",A.progress.settledPicks,"/",we]}),i.jsxs("span",{children:[B.toFixed(0),"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-gradient-to-r from-green-400 to-electric-400 h-2 rounded-full transition-all duration-300",style:{width:`${B}%`}})}),A.progress.settledPicks>0&&i.jsxs("div",{className:"flex justify-between text-xs",children:[i.jsxs("span",{className:"text-green-400",children:["Won: ",X]}),i.jsxs("span",{className:"text-red-400",children:["Lost: ",re]}),oe>0&&i.jsxs("span",{className:"text-yellow-400",children:["Push: ",oe]})]})]})};return i.jsxs(Y.div,{className:"space-y-10 animate-slide-in-up",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"relative mb-10",children:[i.jsx("div",{className:"absolute inset-0 bg-indigo-400/20 blur-3xl rounded-full"}),i.jsx("div",{className:"relative text-8xl text-indigo-400 float-element",children:"📋"})]}),i.jsx("h1",{className:"holographic text-6xl font-black mb-6 font-cyber",children:"LINEUP COMMAND CENTER"}),i.jsx("p",{className:"text-2xl text-gray-400 max-w-4xl mx-auto font-mono",children:"Intelligent tracking and analysis of your quantum-powered betting strategies"})]}),r&&i.jsxs(Y.div,{className:"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4",initial:{opacity:0,scale:.9},animate:{opacity:1,scale:1},transition:{delay:.2},children:[i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsx("div",{className:"text-2xl font-bold text-electric-400 font-cyber",children:r.totalLineups}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"Total"})]}),i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsx("div",{className:"text-2xl font-bold text-yellow-400 font-cyber",children:r.activeLineups}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"Active"})]}),i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsxs("div",{className:"text-2xl font-bold text-green-400 font-cyber",children:["$",r.totalWinnings.toLocaleString()]}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"Winnings"})]}),i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsxs("div",{className:`text-2xl font-bold font-cyber ${r.roi>=0?"text-green-400":"text-red-400"}`,children:[r.roi.toFixed(1),"%"]}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"ROI"})]}),i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsxs("div",{className:"text-2xl font-bold text-purple-400 font-cyber",children:[r.winRate.toFixed(1),"%"]}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"Win Rate"})]}),i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsxs("div",{className:"text-2xl font-bold text-blue-400 font-cyber",children:[r.averageConfidence.toFixed(1),"%"]}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"Avg Conf."})]}),i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsx("div",{className:"text-2xl font-bold text-cyan-400 font-cyber",children:r.completedLineups}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"Completed"})]}),i.jsxs("div",{className:"quantum-card p-4 rounded-xl text-center",children:[i.jsx("div",{className:"text-sm font-bold text-electric-400 font-cyber",children:r.bestPerformingType.replace("-"," ").toUpperCase()}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:"Best Type"})]})]}),i.jsxs("div",{className:"quantum-card rounded-2xl p-6 space-y-6",children:[i.jsxs("div",{className:"flex flex-wrap gap-4 items-center justify-between",children:[i.jsxs("div",{className:"relative flex-1 min-w-64",children:[i.jsx(A2,{className:"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"}),i.jsx("input",{type:"text",placeholder:"Search lineups...",value:x,onChange:A=>y(A.target.value),className:"w-full pl-10 pr-4 py-2 bg-gray-800/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-electric-400 focus:outline-none"})]}),i.jsxs("select",{value:b,onChange:A=>N(A.target.value),className:"px-4 py-2 bg-gray-800/50 border border-gray-600 rounded-lg text-white focus:border-electric-400 focus:outline-none",children:[i.jsx("option",{value:"newest",children:"Newest First"}),i.jsx("option",{value:"oldest",children:"Oldest First"}),i.jsx("option",{value:"confidence",children:"Highest Confidence"}),i.jsx("option",{value:"payout",children:"Highest Payout"})]}),i.jsxs("button",{onClick:z,className:"flex items-center space-x-2 px-4 py-2 bg-blue-500/20 text-blue-400 border border-blue-500/30 rounded-lg hover:bg-blue-500/30 transition-all",children:[i.jsx(Bg,{className:"w-4 h-4"}),i.jsx("span",{children:"Export"})]})]}),i.jsxs("div",{className:"flex flex-wrap gap-4",children:[i.jsxs("div",{className:"space-y-2",children:[i.jsx("label",{className:"text-sm text-gray-400 font-mono",children:"TYPE"}),i.jsx("div",{className:"flex gap-2",children:["all","money-maker","prizepicks","propollama"].map(A=>i.jsx("button",{onClick:()=>u(A),className:`px-4 py-2 rounded-lg font-bold transition-all text-sm ${l===A?"bg-electric-500/20 text-electric-400 border border-electric-500/40":"bg-gray-800/50 text-gray-400 hover:text-gray-300"}`,children:A==="all"?"ALL":A.toUpperCase().replace("-"," ")},A))})]}),i.jsxs("div",{className:"space-y-2",children:[i.jsx("label",{className:"text-sm text-gray-400 font-mono",children:"STATUS"}),i.jsx("div",{className:"flex gap-2",children:["all","active","completed","pending","cancelled"].map(A=>i.jsx("button",{onClick:()=>h(A),className:`px-4 py-2 rounded-lg font-bold transition-all text-sm ${d===A?"bg-electric-500/20 text-electric-400 border border-electric-500/40":"bg-gray-800/50 text-gray-400 hover:text-gray-300"}`,children:A.toUpperCase()},A))})]})]})]}),i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",children:i.jsx(fn,{children:j.map(A=>{var X;const B=C(A.type);return T(A),i.jsxs(Y.div,{layout:!0,initial:{opacity:0,scale:.9},animate:{opacity:1,scale:1},exit:{opacity:0,scale:.9},className:"quantum-card rounded-2xl p-6 hover:border-electric-500/30 transition-all cursor-pointer",onClick:()=>g(p===A.id?null:A.id),whileHover:{scale:1.02},children:[i.jsxs("div",{className:"flex justify-between items-start mb-4",children:[i.jsxs("div",{className:"flex items-center space-x-3",children:[i.jsx(B,{className:`w-6 h-6 ${S(A.type)}`}),i.jsxs("div",{children:[i.jsx("h3",{className:"font-bold text-white text-lg truncate",children:A.name}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:A.type.replace("-"," ")})]})]}),i.jsx("div",{className:`px-3 py-1 rounded-full text-xs font-bold ${F(A.status)}`,children:A.status.toUpperCase()})]}),i.jsxs("div",{className:"grid grid-cols-2 gap-4 mb-4",children:[i.jsxs("div",{children:[i.jsx("div",{className:"text-sm text-gray-400",children:"Entry"}),i.jsxs("div",{className:"text-lg font-bold text-white",children:["$",A.entryAmount]})]}),i.jsxs("div",{children:[i.jsx("div",{className:"text-sm text-gray-400",children:"Payout"}),i.jsxs("div",{className:"text-lg font-bold text-green-400",children:["$",A.projectedPayout]})]})]}),A.progress&&i.jsx("div",{className:"mb-4",children:L(A)}),i.jsxs("div",{className:"flex justify-between items-center text-sm mb-4",children:[i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx(Ug,{className:"w-4 h-4 text-gray-400"}),i.jsx("span",{className:"text-gray-400",children:J(A.savedAt)})]}),i.jsxs("div",{className:"text-electric-400 font-mono",children:[A.picks.length," picks"]})]}),((X=A.metadata)==null?void 0:X.confidence)&&i.jsxs("div",{className:"flex items-center justify-between",children:[i.jsx("span",{className:"text-sm text-gray-400",children:"Confidence:"}),i.jsxs("span",{className:"text-electric-400 font-bold",children:[A.metadata.confidence.toFixed(1),"%"]})]}),i.jsx(fn,{children:p===A.id&&i.jsxs(Y.div,{initial:{opacity:0,height:0},animate:{opacity:1,height:"auto"},exit:{opacity:0,height:0},className:"mt-6 pt-4 border-t border-white/10",children:[i.jsx("div",{className:"space-y-2 mb-4",children:A.picks.map((re,oe)=>{var we;return i.jsx("div",{className:"bg-gray-800/30 rounded-lg p-3",children:re.player?i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:re.player}),i.jsxs("div",{className:"text-sm text-gray-400",children:[re.stat," ",(we=re.choice)==null?void 0:we.toUpperCase()," ",re.line]}),re.confidence&&i.jsxs("div",{className:"text-xs text-electric-400",children:[re.confidence.toFixed(1),"% confidence"]})]}):i.jsxs("div",{children:[i.jsx("div",{className:"text-white",children:re.description}),re.confidence&&i.jsxs("div",{className:"text-xs text-electric-400",children:[re.confidence.toFixed(1),"% confidence"]})]})},oe)})}),i.jsxs("div",{className:"flex space-x-2",children:[i.jsxs("button",{onClick:re=>{re.stopPropagation(),I(A)},className:"flex-1 flex items-center justify-center space-x-2 px-4 py-2 bg-electric-500/20 text-electric-400 rounded-lg hover:bg-electric-500/30 transition-all",children:[i.jsx(Hu,{className:"w-4 h-4"}),i.jsx("span",{children:"Duplicate"})]}),i.jsx("button",{onClick:re=>{re.stopPropagation(),V(A.id)},className:"flex items-center justify-center px-4 py-2 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-all",children:i.jsx(U2,{className:"w-4 h-4"})})]})]})})]},A.id)})})}),j.length===0&&i.jsxs(Y.div,{className:"quantum-card rounded-3xl p-12 text-center",initial:{opacity:0},animate:{opacity:1},children:[i.jsx("div",{className:"text-6xl mb-4",children:"🔍"}),i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber mb-4",children:"NO LINEUPS FOUND"}),i.jsx("p",{className:"text-gray-400 mb-6",children:"No lineups match your current filters. Try adjusting your search criteria."}),i.jsx("button",{onClick:()=>{u("all"),h("all"),y("")},className:"px-6 py-3 bg-electric-500/20 text-electric-400 rounded-lg hover:bg-electric-500/30 transition-all",children:"Clear Filters"})]}),i.jsxs("div",{className:"quantum-card rounded-3xl p-8 text-center",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber mb-4",children:"LINEUP INTELLIGENCE CENTER"}),i.jsx("p",{className:"text-gray-400 mb-6",children:"Advanced analytics and management for your quantum-powered betting strategies"}),i.jsxs("div",{className:"flex justify-center space-x-4",children:[i.jsxs("button",{onClick:z,className:"flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold rounded-xl hover:from-blue-400 hover:to-purple-400 transition-all duration-300 font-cyber",children:[i.jsx(os,{className:"w-5 h-5"}),i.jsx("span",{children:"EXPORT ANALYTICS"})]}),i.jsxs("button",{onClick:w,className:"flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-green-500 to-electric-500 text-black font-bold rounded-xl hover:from-green-400 hover:to-electric-400 transition-all duration-300 font-cyber",children:[i.jsx(Vi,{className:"w-5 h-5"}),i.jsx("span",{children:"REFRESH DATA"})]})]})]})]})},iS=()=>{const[t,n]=E.useState("overview"),[r,a]=E.useState(null),[l,u]=E.useState(!0),[d,h]=E.useState({overallHealth:98.7,cpuUsage:67.3,memoryUsage:74.2,diskUsage:45.8,networkLatency:12,activeConnections:247,errorRate:.03,uptime:99.97,responseTime:15,throughput:1247,lastHealthCheck:new Date().toISOString(),services:{"neural-engine":"healthy","data-pipeline":"healthy","model-registry":"healthy","api-gateway":"healthy"},alerts:[]}),[p,g]=E.useState([{accuracy:94.7,precision:92.1,recall:89.6,f1Score:90.8,roc:.947,predictionCount:15847,successRate:87.3,averageConfidence:91.2,modelStatus:"active",lastUpdated:new Date().toISOString(),trainingTime:3600,inferenceTime:12,memoryUsage:2.4,cpuUsage:23.7,modelVersion:"v2.1.3",datasetSize:25e4,featureCount:47,hyperparameters:{learning_rate:.001,batch_size:128,epochs:100}},{accuracy:91.2,precision:88.9,recall:92.1,f1Score:90.5,roc:.912,predictionCount:12453,successRate:85.7,averageConfidence:88.9,modelStatus:"training",lastUpdated:new Date().toISOString(),trainingTime:7200,inferenceTime:18,memoryUsage:3.1,cpuUsage:45.2,modelVersion:"v2.2.0-beta",datasetSize:4e5,featureCount:52,hyperparameters:{learning_rate:5e-4,batch_size:256,epochs:150}}]);E.useEffect(()=>{if(l){const N=setInterval(()=>{h(w=>({...w,cpuUsage:Math.max(20,Math.min(90,w.cpuUsage+(Math.random()-.5)*10)),memoryUsage:Math.max(30,Math.min(95,w.memoryUsage+(Math.random()-.5)*8)),networkLatency:Math.max(5,Math.min(50,w.networkLatency+(Math.random()-.5)*5)),activeConnections:Math.max(100,Math.min(500,w.activeConnections+Math.floor((Math.random()-.5)*20))),lastHealthCheck:new Date().toISOString()})),g(w=>w.map(j=>({...j,accuracy:Math.max(85,Math.min(99,j.accuracy+(Math.random()-.5)*2)),predictionCount:j.predictionCount+Math.floor(Math.random()*100),cpuUsage:Math.max(10,Math.min(80,j.cpuUsage+(Math.random()-.5)*10))})))},3e3);return()=>clearInterval(N)}},[l]);const x=N=>{switch(N){case"active":return"text-green-400";case"training":return"text-yellow-400";case"inactive":return"text-gray-400";case"error":return"text-red-400";default:return"text-gray-400"}},y=()=>i.jsxs("div",{className:"space-y-8",children:[i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-green-500/20",children:[i.jsxs("h3",{className:"text-xl font-bold text-green-400 font-cyber mb-6 flex items-center",children:[i.jsx(zo,{className:"w-6 h-6 mr-2"}),"SYSTEM HEALTH"]}),i.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 gap-6",children:[i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-3xl font-bold text-green-400 font-cyber mb-2",children:[d.overallHealth,"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Overall Health"}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2 mt-2",children:i.jsx("div",{className:"bg-green-400 h-2 rounded-full",style:{width:`${d.overallHealth}%`}})})]}),i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-3xl font-bold text-electric-400 font-cyber mb-2",children:[d.cpuUsage.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"CPU Usage"}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2 mt-2",children:i.jsx("div",{className:"bg-electric-400 h-2 rounded-full",style:{width:`${d.cpuUsage}%`}})})]}),i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-3xl font-bold text-purple-400 font-cyber mb-2",children:[d.memoryUsage.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Memory Usage"}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2 mt-2",children:i.jsx("div",{className:"bg-purple-400 h-2 rounded-full",style:{width:`${d.memoryUsage}%`}})})]}),i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-3xl font-bold text-cyan-400 font-cyber mb-2",children:[d.networkLatency,"ms"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Network Latency"}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2 mt-2",children:i.jsx("div",{className:"bg-cyan-400 h-2 rounded-full",style:{width:`${Math.min(100,d.networkLatency*2)}%`}})})]})]})]}),i.jsx("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-8",children:p.map((N,w)=>i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl border border-purple-500/20 hover:shadow-neon transition-all cursor-pointer",whileHover:{scale:1.02},onClick:()=>a(`model-${w}`),children:[i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsxs("h4",{className:"text-lg font-bold text-purple-400 font-cyber",children:["Neural Model ",w+1]}),i.jsx("div",{className:`px-3 py-1 rounded-full text-xs font-bold ${x(N.modelStatus)} bg-gray-800`,children:N.modelStatus.toUpperCase()})]}),i.jsxs("div",{className:"grid grid-cols-2 gap-4",children:[i.jsxs("div",{children:[i.jsxs("div",{className:"text-2xl font-bold text-white font-cyber",children:[N.accuracy.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 text-sm",children:"Accuracy"})]}),i.jsxs("div",{children:[i.jsx("div",{className:"text-2xl font-bold text-electric-400 font-cyber",children:N.predictionCount.toLocaleString()}),i.jsx("div",{className:"text-gray-400 text-sm",children:"Predictions"})]}),i.jsxs("div",{children:[i.jsx("div",{className:"text-2xl font-bold text-green-400 font-cyber",children:N.f1Score.toFixed(2)}),i.jsx("div",{className:"text-gray-400 text-sm",children:"F1 Score"})]}),i.jsxs("div",{children:[i.jsxs("div",{className:"text-2xl font-bold text-cyan-400 font-cyber",children:[N.inferenceTime,"ms"]}),i.jsx("div",{className:"text-gray-400 text-sm",children:"Response"})]})]}),i.jsx("div",{className:"mt-4 pt-4 border-t border-gray-600",children:i.jsxs("div",{className:"flex justify-between text-sm",children:[i.jsxs("span",{className:"text-gray-400",children:["Version: ",N.modelVersion]}),i.jsxs("span",{className:"text-gray-400",children:["Features: ",N.featureCount]})]})})]},w))}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h3",{className:"text-xl font-bold text-white font-cyber mb-6",children:"SERVICES STATUS"}),i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4",children:Object.entries(d.services).map(([N,w])=>i.jsxs("div",{className:"p-4 bg-gray-800/30 rounded-xl border border-gray-600/30",children:[i.jsxs("div",{className:"flex items-center justify-between mb-2",children:[i.jsx("span",{className:"font-bold text-white font-mono capitalize",children:N.replace("-"," ")}),i.jsx("div",{className:`w-3 h-3 rounded-full ${w==="healthy"?"bg-green-400 animate-pulse":"bg-red-400"}`})]}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:w})]},N))})]})]}),b=()=>i.jsxs("div",{className:"space-y-6",children:[i.jsxs("div",{className:"flex items-center justify-between",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"MODEL MANAGEMENT"}),i.jsxs("div",{className:"flex space-x-4",children:[i.jsxs("button",{className:"flex items-center space-x-2 px-4 py-2 bg-green-500/20 text-green-400 border border-green-500/40 rounded-lg hover:bg-green-500/30",children:[i.jsx(Hu,{className:"w-4 h-4"}),i.jsx("span",{children:"Deploy New"})]}),i.jsxs("button",{className:"flex items-center space-x-2 px-4 py-2 bg-electric-500/20 text-electric-400 border border-electric-500/40 rounded-lg hover:bg-electric-500/30",children:[i.jsx(Vi,{className:"w-4 h-4"}),i.jsx("span",{children:"Retrain All"})]})]})]}),i.jsx("div",{className:"space-y-4",children:p.map((N,w)=>i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsxs("h4",{className:"text-lg font-bold text-white",children:["Neural Model ",w+1]}),i.jsxs("div",{className:"flex space-x-2",children:[i.jsx("button",{className:"p-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30",children:i.jsx(Yi,{className:"w-4 h-4"})}),i.jsx("button",{className:"p-2 bg-green-500/20 text-green-400 rounded-lg hover:bg-green-500/30",children:i.jsx(Hu,{className:"w-4 h-4"})}),i.jsx("button",{className:"p-2 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30",children:i.jsx(S2,{className:"w-4 h-4"})})]})]}),i.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4",children:[i.jsxs("div",{className:"text-center p-3 bg-gray-800/40 rounded-lg",children:[i.jsxs("div",{className:"text-lg font-bold text-green-400",children:[N.accuracy.toFixed(1),"%"]}),i.jsx("div",{className:"text-xs text-gray-400",children:"Accuracy"})]}),i.jsxs("div",{className:"text-center p-3 bg-gray-800/40 rounded-lg",children:[i.jsxs("div",{className:"text-lg font-bold text-blue-400",children:[N.precision.toFixed(1),"%"]}),i.jsx("div",{className:"text-xs text-gray-400",children:"Precision"})]}),i.jsxs("div",{className:"text-center p-3 bg-gray-800/40 rounded-lg",children:[i.jsxs("div",{className:"text-lg font-bold text-purple-400",children:[N.recall.toFixed(1),"%"]}),i.jsx("div",{className:"text-xs text-gray-400",children:"Recall"})]}),i.jsxs("div",{className:"text-center p-3 bg-gray-800/40 rounded-lg",children:[i.jsx("div",{className:"text-lg font-bold text-cyan-400",children:N.f1Score.toFixed(2)}),i.jsx("div",{className:"text-xs text-gray-400",children:"F1 Score"})]}),i.jsxs("div",{className:"text-center p-3 bg-gray-800/40 rounded-lg",children:[i.jsxs("div",{className:"text-lg font-bold text-yellow-400",children:[N.inferenceTime,"ms"]}),i.jsx("div",{className:"text-xs text-gray-400",children:"Inference"})]}),i.jsxs("div",{className:"text-center p-3 bg-gray-800/40 rounded-lg",children:[i.jsx("div",{className:"text-lg font-bold text-orange-400",children:N.predictionCount.toLocaleString()}),i.jsx("div",{className:"text-xs text-gray-400",children:"Predictions"})]})]}),i.jsxs("div",{className:"mt-4 p-4 bg-gray-800/30 rounded-lg",children:[i.jsx("div",{className:"text-sm text-gray-300 mb-2 font-bold",children:"Hyperparameters"}),i.jsx("div",{className:"grid grid-cols-3 gap-4 text-sm",children:Object.entries(N.hyperparameters).map(([j,S])=>i.jsxs("div",{className:"flex justify-between",children:[i.jsxs("span",{className:"text-gray-400",children:[j,":"]}),i.jsx("span",{className:"text-electric-400",children:S})]},j))})]})]},w))})]});return i.jsxs(Y.div,{className:"space-y-8 animate-slide-in-up p-8",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"relative mb-6",children:[i.jsx("div",{className:"absolute inset-0 bg-purple-400/20 blur-3xl rounded-full"}),i.jsx("div",{className:"relative text-6xl text-purple-400 float-element",children:"🧠"})]}),i.jsx("h1",{className:"holographic text-5xl font-black mb-4 font-cyber",children:"ML MODEL CENTER"}),i.jsx("p",{className:"text-xl text-gray-400 font-mono",children:"Advanced machine learning model management and monitoring"})]}),i.jsxs("div",{className:"flex justify-center space-x-4",children:[i.jsxs(Y.button,{onClick:()=>n("overview"),className:`flex items-center space-x-2 px-6 py-3 rounded-xl border transition-all ${t==="overview"?"bg-purple-500/20 border-purple-500/40 text-purple-400":"bg-gray-800/40 border-gray-600/40 text-gray-300 hover:border-gray-500/60"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx(os,{className:"w-4 h-4"}),i.jsx("span",{className:"font-mono",children:"Overview"})]}),i.jsxs(Y.button,{onClick:()=>n("models"),className:`flex items-center space-x-2 px-6 py-3 rounded-xl border transition-all ${t==="models"?"bg-purple-500/20 border-purple-500/40 text-purple-400":"bg-gray-800/40 border-gray-600/40 text-gray-300 hover:border-gray-500/60"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx(et,{className:"w-4 h-4"}),i.jsx("span",{className:"font-mono",children:"Models"})]}),i.jsxs(Y.button,{onClick:()=>u(!l),className:`flex items-center space-x-2 px-6 py-3 rounded-xl border transition-all ${l?"bg-green-500/20 border-green-500/40 text-green-400":"bg-gray-800/40 border-gray-600/40 text-gray-300"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx(Vi,{className:`w-4 h-4 ${l?"animate-spin":""}`}),i.jsx("span",{className:"font-mono",children:"Auto Refresh"})]})]}),t==="overview"?y():b()]})},aS=()=>i.jsx(iS,{}),oS=()=>{const[t,n]=E.useState("preferences"),[r,a]=E.useState("quantum-dark"),[l,u]=E.useState({name:"Alex Chen",email:"alex@quantumsports.ai",bio:"Quantum sports analyst with 5+ years of neural network experience. Specializing in high-frequency betting strategies and AI-driven profit optimization.",location:"San Francisco, CA",timezone:"PST",avatar:null,phone:"+1 (555) 123-4567",website:"https://quantumsports.ai",social:{twitter:"@alexchen_ai",linkedin:"alex-chen-quantum",discord:"AlexQuantum#1337"}}),[d,h]=E.useState({notifications:{email:!0,push:!0,sms:!1,discord:!0,telegram:!1},privacy:{profileVisible:!0,showStats:!0,shareAchievements:!0,allowAnalytics:!0},display:{theme:r,language:"en",currency:"USD",dateFormat:"MM/DD/YYYY",timeFormat:"12h"},neural:{autoOptimize:!0,customModels:!1,dataSharing:!0,advancedMetrics:!0}}),p={currentPlan:"Quantum Pro",planColor:"text-electric-400",planIcon:"⚛️",nextBilling:"2024-02-15",features:["Unlimited Neural Networks","Quantum Processing","Real-time Analytics","Advanced Prop Analysis","Premium Support","API Access","Custom Models","White-label Options"],usage:{predictions:{used:8247,limit:"Unlimited"},aiQueries:{used:1293,limit:"Unlimited"},dataExports:{used:47,limit:100},apiCalls:{used:23847,limit:"Unlimited"}}},g=[{id:1,name:"Neural Master",icon:"🧠",description:"Used 47 neural networks",rarity:"legendary",color:"text-purple-400"},{id:2,name:"Quantum Sage",icon:"⚛️",description:"Achieved 99%+ accuracy",rarity:"mythic",color:"text-cyan-400"},{id:3,name:"Profit Prophet",icon:"💰",description:"Generated $100K+ profit",rarity:"legendary",color:"text-green-400"},{id:4,name:"Speed Demon",icon:"⚡",description:"Sub-5ms processing",rarity:"epic",color:"text-yellow-400"},{id:5,name:"Data Wizard",icon:"📊",description:"Processed 1M+ data points",rarity:"rare",color:"text-blue-400"},{id:6,name:"Streak King",icon:"🔥",description:"50+ win streak",rarity:"epic",color:"text-orange-400"}],x=[{id:"profile",name:"Profile",icon:K2,color:"text-electric-400"},{id:"account",name:"Account",icon:Yi,color:"text-blue-400"},{id:"subscription",name:"Subscription",icon:u2,color:"text-yellow-400"},{id:"neural",name:"Neural AI",icon:et,color:"text-purple-400"},{id:"security",name:"Security",icon:Hd,color:"text-red-400"},{id:"preferences",name:"Preferences",icon:_2,color:"text-green-400"},{id:"achievements",name:"Achievements",icon:Bi,color:"text-orange-400"},{id:"api",name:"API Access",icon:a2,color:"text-cyan-400"}],y=()=>{const N={profile:l,preferences:d,achievements:g,timestamp:new Date().toISOString()},w=new Blob([JSON.stringify(N,null,2)],{type:"application/json"}),j=URL.createObjectURL(w),S=document.createElement("a");S.href=j,S.download="quantum-settings-export.json",S.click(),URL.revokeObjectURL(j)},b=()=>{switch(t){case"profile":return i.jsxs("div",{className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"QUANTUM PROFILE"}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6",children:[i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-electric-400 font-cyber",children:"NAME"}),i.jsx("input",{type:"text",value:l.name,onChange:N=>u({...l,name:N.target.value}),className:"w-full p-4 rounded-xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50"})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-electric-400 font-cyber",children:"EMAIL"}),i.jsx("input",{type:"email",value:l.email,onChange:N=>u({...l,email:N.target.value}),className:"w-full p-4 rounded-xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50"})]}),i.jsxs("div",{className:"md:col-span-2",children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-electric-400 font-cyber",children:"BIO"}),i.jsx("textarea",{value:l.bio,onChange:N=>u({...l,bio:N.target.value}),rows:4,className:"w-full p-4 rounded-xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50"})]})]})]});case"preferences":return i.jsxs("div",{className:"space-y-8",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"QUANTUM PREFERENCES"}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h4",{className:"text-lg font-bold text-electric-400 mb-4",children:"Notifications"}),i.jsx("div",{className:"grid grid-cols-2 gap-4",children:Object.entries(d.notifications).map(([N,w])=>i.jsxs("label",{className:"flex items-center space-x-3",children:[i.jsx("input",{type:"checkbox",checked:w,onChange:j=>h({...d,notifications:{...d.notifications,[N]:j.target.checked}}),className:"w-4 h-4"}),i.jsx("span",{className:"text-gray-300 font-mono capitalize",children:N})]},N))})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h4",{className:"text-lg font-bold text-electric-400 mb-4",children:"Display Settings"}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6",children:[i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-purple-400",children:"Theme"}),i.jsxs("select",{value:d.display.theme,onChange:N=>{const w=N.target.value;a(w),h({...d,display:{...d.display,theme:w}})},className:"w-full p-3 rounded-xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50",children:[i.jsx("option",{value:"quantum-dark",children:"Quantum Dark"}),i.jsx("option",{value:"neural-blue",children:"Neural Blue"}),i.jsx("option",{value:"cyber-purple",children:"Cyber Purple"}),i.jsx("option",{value:"matrix-green",children:"Matrix Green"})]})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-purple-400",children:"Currency"}),i.jsxs("select",{value:d.display.currency,onChange:N=>h({...d,display:{...d.display,currency:N.target.value}}),className:"w-full p-3 rounded-xl border-2 border-electric-500/30 focus:border-electric-500 bg-gray-900/50",children:[i.jsx("option",{value:"USD",children:"USD ($)"}),i.jsx("option",{value:"EUR",children:"EUR (€)"}),i.jsx("option",{value:"GBP",children:"GBP (£)"}),i.jsx("option",{value:"BTC",children:"BTC (₿)"})]})]})]})]})]});case"subscription":return i.jsxs("div",{className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"QUANTUM SUBSCRIPTION"}),i.jsxs("div",{className:"quantum-card p-8 rounded-2xl border-2 border-electric-500/30",children:[i.jsxs("div",{className:"flex items-center space-x-4 mb-6",children:[i.jsx("div",{className:"text-4xl",children:p.planIcon}),i.jsxs("div",{children:[i.jsx("h4",{className:`text-2xl font-bold ${p.planColor} font-cyber`,children:p.currentPlan}),i.jsxs("p",{className:"text-gray-400 font-mono",children:["Next billing: ",p.nextBilling]})]})]}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-8",children:[i.jsxs("div",{children:[i.jsx("h5",{className:"text-lg font-bold text-white mb-4",children:"Features"}),i.jsx("div",{className:"space-y-2",children:p.features.map((N,w)=>i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx("div",{className:"w-2 h-2 bg-green-400 rounded-full"}),i.jsx("span",{className:"text-gray-300 font-mono",children:N})]},w))})]}),i.jsxs("div",{children:[i.jsx("h5",{className:"text-lg font-bold text-white mb-4",children:"Usage"}),i.jsx("div",{className:"space-y-3",children:Object.entries(p.usage).map(([N,w])=>i.jsxs("div",{children:[i.jsxs("div",{className:"flex justify-between text-sm mb-1",children:[i.jsx("span",{className:"text-gray-400 capitalize",children:N.replace(/([A-Z])/g," $1")}),i.jsxs("span",{className:"text-electric-400",children:[w.used," / ",w.limit]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-electric-400 h-2 rounded-full",style:{width:w.limit==="Unlimited"?"100%":`${w.used/w.limit*100}%`}})})]},N))})]})]})]})]});case"account":return i.jsxs("div",{className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"ACCOUNT SETTINGS"}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6",children:[i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h4",{className:"text-lg font-bold text-blue-400 mb-4",children:"Contact Information"}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"Phone"}),i.jsx("input",{type:"tel",value:l.phone,onChange:N=>u({...l,phone:N.target.value}),className:"w-full p-3 rounded-xl border border-gray-600 bg-gray-900/50 text-white"})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"Website"}),i.jsx("input",{type:"url",value:l.website,onChange:N=>u({...l,website:N.target.value}),className:"w-full p-3 rounded-xl border border-gray-600 bg-gray-900/50 text-white"})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"Location"}),i.jsx("input",{type:"text",value:l.location,onChange:N=>u({...l,location:N.target.value}),className:"w-full p-3 rounded-xl border border-gray-600 bg-gray-900/50 text-white"})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h4",{className:"text-lg font-bold text-blue-400 mb-4",children:"Social Connections"}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"Twitter"}),i.jsx("input",{type:"text",value:l.social.twitter,onChange:N=>u({...l,social:{...l.social,twitter:N.target.value}}),className:"w-full p-3 rounded-xl border border-gray-600 bg-gray-900/50 text-white"})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"LinkedIn"}),i.jsx("input",{type:"text",value:l.social.linkedin,onChange:N=>u({...l,social:{...l.social,linkedin:N.target.value}}),className:"w-full p-3 rounded-xl border border-gray-600 bg-gray-900/50 text-white"})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"Discord"}),i.jsx("input",{type:"text",value:l.social.discord,onChange:N=>u({...l,social:{...l.social,discord:N.target.value}}),className:"w-full p-3 rounded-xl border border-gray-600 bg-gray-900/50 text-white"})]})]})]})]})]});case"neural":return i.jsxs("div",{className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"NEURAL AI CONFIGURATION"}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-purple-500/20",children:[i.jsx("h4",{className:"text-lg font-bold text-purple-400 mb-6",children:"Neural Network Settings"}),i.jsxs("div",{className:"space-y-6",children:[i.jsxs("div",{className:"flex items-center justify-between p-4 bg-gray-800/40 rounded-xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"Auto-Optimization"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Automatically optimize neural parameters"})]}),i.jsxs("label",{className:"relative inline-flex items-center cursor-pointer",children:[i.jsx("input",{type:"checkbox",checked:d.neural.autoOptimize,onChange:N=>h({...d,neural:{...d.neural,autoOptimize:N.target.checked}}),className:"sr-only peer"}),i.jsx("div",{className:'w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[""] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600'})]})]}),i.jsxs("div",{className:"flex items-center justify-between p-4 bg-gray-800/40 rounded-xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"Custom Models"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Enable custom neural model training"})]}),i.jsxs("label",{className:"relative inline-flex items-center cursor-pointer",children:[i.jsx("input",{type:"checkbox",checked:d.neural.customModels,onChange:N=>h({...d,neural:{...d.neural,customModels:N.target.checked}}),className:"sr-only peer"}),i.jsx("div",{className:'w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[""] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600'})]})]}),i.jsxs("div",{className:"flex items-center justify-between p-4 bg-gray-800/40 rounded-xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"Data Sharing"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Share anonymized data to improve models"})]}),i.jsxs("label",{className:"relative inline-flex items-center cursor-pointer",children:[i.jsx("input",{type:"checkbox",checked:d.neural.dataSharing,onChange:N=>h({...d,neural:{...d.neural,dataSharing:N.target.checked}}),className:"sr-only peer"}),i.jsx("div",{className:'w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[""] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600'})]})]}),i.jsxs("div",{className:"flex items-center justify-between p-4 bg-gray-800/40 rounded-xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"Advanced Metrics"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Show detailed neural network metrics"})]}),i.jsxs("label",{className:"relative inline-flex items-center cursor-pointer",children:[i.jsx("input",{type:"checkbox",checked:d.neural.advancedMetrics,onChange:N=>h({...d,neural:{...d.neural,advancedMetrics:N.target.checked}}),className:"sr-only peer"}),i.jsx("div",{className:'w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[""] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600'})]})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h4",{className:"text-lg font-bold text-purple-400 mb-4",children:"Neural Performance"}),i.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 gap-4",children:[i.jsxs("div",{className:"text-center p-4 bg-gray-800/40 rounded-xl",children:[i.jsx("div",{className:"text-2xl font-bold text-electric-400",children:"47"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Active Models"})]}),i.jsxs("div",{className:"text-center p-4 bg-gray-800/40 rounded-xl",children:[i.jsx("div",{className:"text-2xl font-bold text-green-400",children:"94.7%"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Avg Accuracy"})]}),i.jsxs("div",{className:"text-center p-4 bg-gray-800/40 rounded-xl",children:[i.jsx("div",{className:"text-2xl font-bold text-cyan-400",children:"12ms"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Response Time"})]}),i.jsxs("div",{className:"text-center p-4 bg-gray-800/40 rounded-xl",children:[i.jsx("div",{className:"text-2xl font-bold text-purple-400",children:"2.4M"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Predictions"})]})]})]})]});case"security":return i.jsxs("div",{className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"SECURITY SETTINGS"}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-red-500/20",children:[i.jsx("h4",{className:"text-lg font-bold text-red-400 mb-6",children:"Authentication & Access"}),i.jsxs("div",{className:"space-y-6",children:[i.jsx("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"Two-Factor Authentication"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Add an extra layer of security"})]}),i.jsx("button",{className:"px-4 py-2 bg-green-500/20 text-green-400 border border-green-500/40 rounded-lg hover:bg-green-500/30",children:"Enable 2FA"})]})}),i.jsx("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"API Key Management"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Manage your API access keys"})]}),i.jsx("button",{className:"px-4 py-2 bg-blue-500/20 text-blue-400 border border-blue-500/40 rounded-lg hover:bg-blue-500/30",children:"Manage Keys"})]})}),i.jsx("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"Session Management"}),i.jsx("div",{className:"text-sm text-gray-400",children:"View and manage active sessions"})]}),i.jsx("button",{className:"px-4 py-2 bg-yellow-500/20 text-yellow-400 border border-yellow-500/40 rounded-lg hover:bg-yellow-500/30",children:"View Sessions"})]})}),i.jsx("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white",children:"Change Password"}),i.jsx("div",{className:"text-sm text-gray-400",children:"Update your account password"})]}),i.jsx("button",{className:"px-4 py-2 bg-purple-500/20 text-purple-400 border border-purple-500/40 rounded-lg hover:bg-purple-500/30",children:"Change Password"})]})})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h4",{className:"text-lg font-bold text-red-400 mb-4",children:"Privacy Controls"}),i.jsx("div",{className:"space-y-4",children:Object.entries(d.privacy).map(([N,w])=>i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/40 rounded-lg",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white capitalize",children:N.replace(/([A-Z])/g," $1")}),i.jsxs("div",{className:"text-sm text-gray-400",children:[N==="profileVisible"&&"Make your profile visible to other users",N==="showStats"&&"Display your statistics publicly",N==="shareAchievements"&&"Share achievements with the community",N==="allowAnalytics"&&"Allow anonymous usage analytics"]})]}),i.jsxs("label",{className:"relative inline-flex items-center cursor-pointer",children:[i.jsx("input",{type:"checkbox",checked:w,onChange:j=>h({...d,privacy:{...d.privacy,[N]:j.target.checked}}),className:"sr-only peer"}),i.jsx("div",{className:'w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[""] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600'})]})]},N))})]})]});case"api":return i.jsxs("div",{className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"API ACCESS CONTROL"}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-cyan-500/20",children:[i.jsx("h4",{className:"text-lg font-bold text-cyan-400 mb-6",children:"API Configuration"}),i.jsxs("div",{className:"space-y-6",children:[i.jsx("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:i.jsxs("div",{className:"mb-4",children:[i.jsx("div",{className:"font-bold text-white mb-2",children:"Primary API Key"}),i.jsxs("div",{className:"flex items-center space-x-4",children:[i.jsx("input",{type:"text",value:"qnt_1234567890abcdef...",readOnly:!0,className:"flex-1 p-3 rounded-lg bg-gray-900 border border-gray-600 text-gray-300 font-mono"}),i.jsx("button",{className:"px-4 py-2 bg-cyan-500/20 text-cyan-400 border border-cyan-500/40 rounded-lg hover:bg-cyan-500/30",children:"Copy"}),i.jsx("button",{className:"px-4 py-2 bg-red-500/20 text-red-400 border border-red-500/40 rounded-lg hover:bg-red-500/30",children:"Regenerate"})]})]})}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6",children:[i.jsxs("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:[i.jsx("div",{className:"font-bold text-white mb-4",children:"Rate Limits"}),i.jsxs("div",{className:"space-y-3",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"Requests/Hour"}),i.jsx("span",{className:"text-cyan-400 font-mono",children:"10,000"})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"Requests/Day"}),i.jsx("span",{className:"text-cyan-400 font-mono",children:"100,000"})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"Concurrent"}),i.jsx("span",{className:"text-cyan-400 font-mono",children:"50"})]})]})]}),i.jsxs("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:[i.jsx("div",{className:"font-bold text-white mb-4",children:"Usage Statistics"}),i.jsxs("div",{className:"space-y-3",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"This Hour"}),i.jsx("span",{className:"text-green-400 font-mono",children:"247"})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"Today"}),i.jsx("span",{className:"text-green-400 font-mono",children:"8,934"})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"This Month"}),i.jsx("span",{className:"text-green-400 font-mono",children:"234,567"})]})]})]})]}),i.jsxs("div",{className:"p-4 bg-gray-800/40 rounded-xl",children:[i.jsx("div",{className:"font-bold text-white mb-4",children:"Endpoint Access"}),i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4",children:["Predictions API","Market Data API","Neural Models API","Real-time Feed","Analytics API","Quantum Engine"].map((N,w)=>i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-900/50 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:N}),i.jsx("div",{className:"w-3 h-3 bg-green-400 rounded-full animate-pulse"})]},w))})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h4",{className:"text-lg font-bold text-cyan-400 mb-4",children:"API Documentation"}),i.jsxs("div",{className:"space-y-4",children:[i.jsx("p",{className:"text-gray-300",children:"Access comprehensive API documentation and code examples to integrate our neural sports intelligence platform into your applications."}),i.jsxs("div",{className:"flex space-x-4",children:[i.jsx("button",{className:"flex items-center space-x-2 px-6 py-3 bg-cyan-500/20 text-cyan-400 border border-cyan-500/40 rounded-lg hover:bg-cyan-500/30",children:i.jsx("span",{children:"View Docs"})}),i.jsx("button",{className:"flex items-center space-x-2 px-6 py-3 bg-purple-500/20 text-purple-400 border border-purple-500/40 rounded-lg hover:bg-purple-500/30",children:i.jsx("span",{children:"Code Examples"})}),i.jsx("button",{className:"flex items-center space-x-2 px-6 py-3 bg-green-500/20 text-green-400 border border-green-500/40 rounded-lg hover:bg-green-500/30",children:i.jsx("span",{children:"SDKs"})})]})]})]})]});case"achievements":return i.jsxs("div",{className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"QUANTUM ACHIEVEMENTS"}),i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",children:g.map(N=>i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl text-center",whileHover:{scale:1.05},children:[i.jsx("div",{className:"text-4xl mb-3",children:N.icon}),i.jsx("h4",{className:`text-lg font-bold ${N.color} font-cyber`,children:N.name}),i.jsx("p",{className:"text-gray-400 text-sm mt-2",children:N.description}),i.jsx("div",{className:`mt-3 text-xs font-bold uppercase tracking-wider ${N.color}`,children:N.rarity})]},N.id))})]});default:return i.jsx("div",{className:"text-center py-20",children:i.jsx("div",{className:"text-gray-500 text-xl font-mono",children:"Select a settings category from the tabs above"})})}};return i.jsxs(Y.div,{className:"space-y-8",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center",children:[i.jsx("h1",{className:"text-4xl font-bold text-white mb-4 animate-cyber-pulse holographic font-cyber",children:"QUANTUM SETTINGS CONTROL"}),i.jsx("p",{className:"text-electric-400 text-lg font-mono",children:"Configure Your Neural Interface"})]}),i.jsx("div",{className:"flex justify-center",children:i.jsx("div",{className:"grid grid-cols-4 gap-2 p-2 quantum-card rounded-2xl",children:x.map(N=>{const w=N.icon;return i.jsxs(Y.button,{onClick:()=>n(N.id),className:`flex flex-col items-center space-y-2 px-4 py-3 rounded-xl transition-all ${t===N.id?`bg-electric-500/20 ${N.color} border-2 border-electric-500/40`:"text-gray-400 hover:text-gray-300"}`,whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(w,{className:"w-5 h-5"}),i.jsx("span",{className:"text-xs font-bold font-cyber",children:N.name})]},N.id)})})}),i.jsx("div",{className:"quantum-card rounded-3xl p-8",children:i.jsx(Y.div,{initial:{opacity:0,x:20},animate:{opacity:1,x:0},transition:{duration:.3},children:b()},t)}),i.jsxs("div",{className:"flex justify-center space-x-6",children:[i.jsxs(Y.button,{onClick:()=>console.log("Saving settings..."),className:"flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-green-500 to-electric-500 text-black font-bold rounded-xl hover:from-green-400 hover:to-electric-400 transition-all duration-300",whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(qd,{className:"w-5 h-5"}),i.jsx("span",{children:"SAVE QUANTUM CONFIG"})]}),i.jsxs(Y.button,{onClick:y,className:"flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold rounded-xl hover:from-blue-400 hover:to-purple-400 transition-all duration-300",whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(Bg,{className:"w-5 h-5"}),i.jsx("span",{children:"EXPORT DATA"})]}),i.jsxs(Y.button,{onClick:()=>console.log("Resetting settings..."),className:"flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold rounded-xl hover:from-red-400 hover:to-pink-400 transition-all duration-300",whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(W2,{className:"w-5 h-5"}),i.jsx("span",{children:"RESET SETTINGS"})]})]})]})};let lS={data:""},cS=t=>typeof window=="object"?((t?t.querySelector("#_goober"):window._goober)||Object.assign((t||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:t||lS,uS=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,dS=/\/\*[^]*?\*\/|  +/g,N0=/\n+/g,Zn=(t,n)=>{let r="",a="",l="";for(let u in t){let d=t[u];u[0]=="@"?u[1]=="i"?r=u+" "+d+";":a+=u[1]=="f"?Zn(d,u):u+"{"+Zn(d,u[1]=="k"?"":n)+"}":typeof d=="object"?a+=Zn(d,n?n.replace(/([^,])+/g,h=>u.replace(/([^,]*:\S+\([^)]*\))|([^,])+/g,p=>/&/.test(p)?p.replace(/&/g,h):h?h+" "+p:p)):u):d!=null&&(u=/^--/.test(u)?u:u.replace(/[A-Z]/g,"-$&").toLowerCase(),l+=Zn.p?Zn.p(u,d):u+":"+d+";")}return r+(n&&l?n+"{"+l+"}":l)+a},Sn={},qg=t=>{if(typeof t=="object"){let n="";for(let r in t)n+=r+qg(t[r]);return n}return t},fS=(t,n,r,a,l)=>{let u=qg(t),d=Sn[u]||(Sn[u]=(p=>{let g=0,x=11;for(;g<p.length;)x=101*x+p.charCodeAt(g++)>>>0;return"go"+x})(u));if(!Sn[d]){let p=u!==t?t:(g=>{let x,y,b=[{}];for(;x=uS.exec(g.replace(dS,""));)x[4]?b.shift():x[3]?(y=x[3].replace(N0," ").trim(),b.unshift(b[0][y]=b[0][y]||{})):b[0][x[1]]=x[2].replace(N0," ").trim();return b[0]})(t);Sn[d]=Zn(l?{["@keyframes "+d]:p}:p,r?"":"."+d)}let h=r&&Sn.g?Sn.g:null;return r&&(Sn.g=Sn[d]),((p,g,x,y)=>{y?g.data=g.data.replace(y,p):g.data.indexOf(p)===-1&&(g.data=x?p+g.data:g.data+p)})(Sn[d],n,a,h),d},hS=(t,n,r)=>t.reduce((a,l,u)=>{let d=n[u];if(d&&d.call){let h=d(r),p=h&&h.props&&h.props.className||/^go/.test(h)&&h;d=p?"."+p:h&&typeof h=="object"?h.props?"":Zn(h,""):h===!1?"":h}return a+l+(d??"")},"");function Wo(t){let n=this||{},r=t.call?t(n.p):t;return fS(r.unshift?r.raw?hS(r,[].slice.call(arguments,1),n.p):r.reduce((a,l)=>Object.assign(a,l&&l.call?l(n.p):l),{}):r,cS(n.target),n.g,n.o,n.k)}let Hg,Qu,Ku;Wo.bind({g:1});let An=Wo.bind({k:1});function mS(t,n,r,a){Zn.p=n,Hg=t,Qu=r,Ku=a}function us(t,n){let r=this||{};return function(){let a=arguments;function l(u,d){let h=Object.assign({},u),p=h.className||l.className;r.p=Object.assign({theme:Qu&&Qu()},h),r.o=/ *go\d+/.test(p),h.className=Wo.apply(r,a)+(p?" "+p:"");let g=t;return t[0]&&(g=h.as||t,delete h.as),Ku&&g[0]&&Ku(h),Hg(g,h)}return l}}var pS=t=>typeof t=="function",Gu=(t,n)=>pS(t)?t(n):t,xS=(()=>{let t=0;return()=>(++t).toString()})(),gS=(()=>{let t;return()=>{if(t===void 0&&typeof window<"u"){let n=matchMedia("(prefers-reduced-motion: reduce)");t=!n||n.matches}return t}})(),yS=20,Wg=(t,n)=>{switch(n.type){case 0:return{...t,toasts:[n.toast,...t.toasts].slice(0,yS)};case 1:return{...t,toasts:t.toasts.map(u=>u.id===n.toast.id?{...u,...n.toast}:u)};case 2:let{toast:r}=n;return Wg(t,{type:t.toasts.find(u=>u.id===r.id)?1:0,toast:r});case 3:let{toastId:a}=n;return{...t,toasts:t.toasts.map(u=>u.id===a||a===void 0?{...u,dismissed:!0,visible:!1}:u)};case 4:return n.toastId===void 0?{...t,toasts:[]}:{...t,toasts:t.toasts.filter(u=>u.id!==n.toastId)};case 5:return{...t,pausedAt:n.time};case 6:let l=n.time-(t.pausedAt||0);return{...t,pausedAt:void 0,toasts:t.toasts.map(u=>({...u,pauseDuration:u.pauseDuration+l}))}}},vS=[],mu={toasts:[],pausedAt:void 0},Qd=t=>{mu=Wg(mu,t),vS.forEach(n=>{n(mu)})},bS=(t,n="blank",r)=>({createdAt:Date.now(),visible:!0,dismissed:!1,type:n,ariaProps:{role:"status","aria-live":"polite"},message:t,pauseDuration:0,...r,id:(r==null?void 0:r.id)||xS()}),Xi=t=>(n,r)=>{let a=bS(n,t,r);return Qd({type:2,toast:a}),a.id},Rt=(t,n)=>Xi("blank")(t,n);Rt.error=Xi("error");Rt.success=Xi("success");Rt.loading=Xi("loading");Rt.custom=Xi("custom");Rt.dismiss=t=>{Qd({type:3,toastId:t})};Rt.remove=t=>Qd({type:4,toastId:t});Rt.promise=(t,n,r)=>{let a=Rt.loading(n.loading,{...r,...r==null?void 0:r.loading});return typeof t=="function"&&(t=t()),t.then(l=>{let u=n.success?Gu(n.success,l):void 0;return u?Rt.success(u,{id:a,...r,...r==null?void 0:r.success}):Rt.dismiss(a),l}).catch(l=>{let u=n.error?Gu(n.error,l):void 0;u?Rt.error(u,{id:a,...r,...r==null?void 0:r.error}):Rt.dismiss(a)}),t};var wS=An`
frontend\dist\assets\index-D90EmcIk.js:454:`;var br=Rt;const j0=[{id:"nba",name:"NBA",icon:"🏀",color:"text-orange-400",category:"primary"},{id:"wnba",name:"WNBA",icon:"🏀",color:"text-orange-300",category:"primary"},{id:"mlb",name:"MLB",icon:"���",color:"text-blue-400",category:"primary"},{id:"nfl",name:"NFL",icon:"🏈",color:"text-green-400",category:"primary"},{id:"nhl",name:"NHL",icon:"🏒",color:"text-cyan-400",category:"primary"},{id:"soccer",name:"Soccer",icon:"⚽",color:"text-white",category:"primary"},{id:"pga",name:"PGA",icon:"⛳",color:"text-emerald-400",category:"primary"},{id:"mma",name:"MMA",icon:"🥊",color:"text-red-400",category:"primary"},{id:"boxing",name:"Boxing",icon:"🥊",color:"text-yellow-500",category:"primary"},{id:"tennis",name:"Tennis",icon:"🎾",color:"text-green-400",category:"primary"},{id:"esports",name:"Esports",icon:"🎮",color:"text-purple-500",category:"primary"},{id:"misc",name:"Misc.",icon:"🎯",color:"text-gray-400",category:"misc"}],S0=[{id:"live",name:"Live Now",description:"Currently active games",icon:"🔴",color:"text-red-400",value:0},{id:"pre-game",name:"Pre-Game",description:"Starting within 2 hours",icon:"⏰",color:"text-orange-400",value:2},{id:"in-game",name:"In-Game",description:"Games in progress",icon:"🎯",color:"text-red-500",value:.5},{id:"1st-quarter",name:"1st Quarter",description:"First quarter bets",icon:"1️⃣",color:"text-blue-400",value:.25},{id:"2nd-quarter",name:"2nd Quarter",description:"Second quarter bets",icon:"2️⃣",color:"text-blue-500",value:.25},{id:"3rd-quarter",name:"3rd Quarter",description:"Third quarter bets",icon:"3️⃣",color:"text-blue-600",value:.25},{id:"4th-quarter",name:"4th Quarter",description:"Fourth quarter bets",icon:"4️⃣",color:"text-blue-700",value:.25},{id:"1st-half",name:"1st Half",description:"First half bets",icon:"🥅",color:"text-green-400",value:.5},{id:"2nd-half",name:"2nd Half",description:"Second half bets",icon:"🎯",color:"text-green-500",value:.5},{id:"halftime",name:"Halftime",description:"Halftime break bets",icon:"⏸️",color:"text-yellow-400",value:.02},{id:"1st-period",name:"1st Period",description:"First period (Hockey)",icon:"🏒",color:"text-cyan-400",value:.33},{id:"2nd-period",name:"2nd Period",description:"Second period (Hockey)",icon:"🏒",color:"text-cyan-500",value:.33},{id:"3rd-period",name:"3rd Period",description:"Third period (Hockey)",icon:"🏒",color:"text-cyan-600",value:.33},{id:"overtime",name:"Overtime",description:"Overtime periods",icon:"⏱️",color:"text-purple-400",value:.08},{id:"early-innings",name:"Early Innings",description:"Innings 1-3",icon:"⚾",color:"text-blue-300",value:.33},{id:"middle-innings",name:"Middle Innings",description:"Innings 4-6",icon:"⚾",color:"text-blue-400",value:.33},{id:"late-innings",name:"Late Innings",description:"Innings 7-9",icon:"⚾",color:"text-blue-500",value:.33},{id:"extra-innings",name:"Extra Innings",description:"Beyond 9th inning",icon:"⚾",color:"text-blue-600",value:.2},{id:"first-45",name:"First 45min",description:"First half (Soccer)",icon:"⚽",color:"text-green-300",value:.75},{id:"second-45",name:"Second 45min",description:"Second half (Soccer)",icon:"⚽",color:"text-green-400",value:.75},{id:"stoppage-time",name:"Stoppage Time",description:"Added time",icon:"⏱️",color:"text-yellow-500",value:.08},{id:"1st-set",name:"1st Set",description:"First set (Tennis)",icon:"🎾",color:"text-yellow-300",value:.5},{id:"2nd-set",name:"2nd Set",description:"Second set (Tennis)",icon:"🎾",color:"text-yellow-400",value:.5},{id:"3rd-set",name:"3rd Set",description:"Third set (Tennis)",icon:"🎾",color:"text-yellow-500",value:.5},{id:"next-hour",name:"Next Hour",description:"Starting within 1 hour",icon:"⏰",color:"text-orange-300",value:1},{id:"today",name:"Today",description:"Rest of today",icon:"📅",color:"text-electric-400",value:24},{id:"tonight",name:"Tonight",description:"6 PM - Midnight",icon:"🌙",color:"text-purple-300",value:6},{id:"tomorrow",name:"Tomorrow",description:"Next day only",icon:"🌅",color:"text-yellow-400",value:48},{id:"week",name:"This Week",description:"Next 7 days",icon:"📊",color:"text-blue-400",value:168},{id:"weekend",name:"Weekend",description:"Sat-Sun games",icon:"🎉",color:"text-purple-400",value:72},{id:"month",name:"This Month",description:"Next 30 days",icon:"📈",color:"text-green-400",value:720},{id:"season",name:"Full Season",description:"All upcoming games",icon:"🏆",color:"text-cyan-400",value:8760}],$S=[{id:"us",name:"United States",icon:"🇺🇸",color:"text-blue-400"},{id:"eu",name:"Europe",icon:"🇪🇺",color:"text-yellow-400"},{id:"uk",name:"United Kingdom",icon:"🇬🇧",color:"text-red-400"},{id:"ca",name:"Canada",icon:"🇨🇦",color:"text-red-500"},{id:"au",name:"Australia",icon:"🇦🇺",color:"text-green-400"},{id:"asia",name:"Asia",icon:"🌏",color:"text-purple-400"}],zS=({filters:t,onFiltersChange:n,className:r="",showAdvanced:a=!1})=>{var S;const[l,u]=E.useState(!1),[d,h]=E.useState("sports"),p=j0.reduce((C,F)=>(C[F.category]||(C[F.category]=[]),C[F.category].push(F),C),{}),g=C=>{n({...t,...C})},x=C=>{const F=t.sports.includes(C)?t.sports.filter(T=>T!==C):[...t.sports,C];g({sports:F})},y=C=>{g({timeFrame:C})},b=C=>{const F=t.regions.includes(C)?t.regions.filter(T=>T!==C):[...t.regions,C];g({regions:F})},N=()=>{n({sports:["nba","nfl","mlb","nhl"],timeFrame:"today",regions:["us"],advanced:{minConfidence:80,onlyLive:!1,includeProps:!0,dataQuality:"all"}})},w=()=>{let C=0;return t.sports.length>0&&C++,t.timeFrame!=="today"&&C++,t.regions.length>1&&C++,t.advanced.minConfidence>80&&C++,t.advanced.onlyLive&&C++,t.advanced.includeProps||C++,t.advanced.dataQuality!=="all"&&C++,C},j=({category:C})=>{const F={primary:"⭐",misc:"🎯"};return i.jsx("span",{className:"text-lg",children:F[C]||"📊"})};return i.jsxs(Y.div,{className:`quantum-card rounded-2xl overflow-hidden ${r}`,initial:{opacity:0,y:10},animate:{opacity:1,y:0},transition:{duration:.3},children:[i.jsxs("div",{className:"p-4 border-b border-white/10",children:[i.jsxs("div",{className:"flex items-center justify-between",children:[i.jsxs("div",{className:"flex items-center space-x-3",children:[i.jsxs("div",{className:"relative",children:[i.jsx(zd,{className:"w-5 h-5 text-electric-400"}),w()>0&&i.jsx("div",{className:"absolute -top-2 -right-2 w-4 h-4 bg-electric-400 text-black text-xs rounded-full flex items-center justify-center font-bold",children:w()})]}),i.jsx("h3",{className:"text-lg font-bold text-white font-cyber",children:"QUANTUM FILTERS"})]}),i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx("button",{onClick:N,className:"p-2 text-gray-400 hover:text-white transition-colors rounded-lg hover:bg-white/10",title:"Reset Filters",children:i.jsx($g,{className:"w-4 h-4"})}),i.jsxs("button",{onClick:()=>u(!l),className:"flex items-center space-x-2 px-3 py-2 bg-electric-500/20 text-electric-400 rounded-lg hover:bg-electric-500/30 transition-all",children:[i.jsx("span",{className:"font-mono text-sm",children:l?"Collapse":"Expand"}),i.jsx(qu,{className:`w-4 h-4 transition-transform ${l?"rotate-180":""}`})]})]})]}),i.jsxs("div",{className:"flex flex-wrap gap-2 mt-4",children:[t.sports.slice(0,3).map(C=>{const F=j0.find(T=>T.id===C);return F?i.jsxs("div",{className:"flex items-center space-x-1 px-2 py-1 bg-white/10 rounded-full text-xs",children:[i.jsx("span",{children:F.icon}),i.jsx("span",{className:"text-gray-300",children:F.name.split(" ")[0]})]},C):null}),t.sports.length>3&&i.jsxs("div",{className:"px-2 py-1 bg-electric-500/20 text-electric-400 rounded-full text-xs font-mono",children:["+",t.sports.length-3," more"]}),i.jsxs("div",{className:"flex items-center space-x-1 px-2 py-1 bg-blue-500/20 text-blue-400 rounded-full text-xs",children:[i.jsx(r2,{className:"w-3 h-3"}),i.jsx("span",{children:(S=S0.find(C=>C.id===t.timeFrame))==null?void 0:S.name})]})]})]}),i.jsx(fn,{children:l&&i.jsxs(Y.div,{initial:{height:0,opacity:0},animate:{height:"auto",opacity:1},exit:{height:0,opacity:0},transition:{duration:.3},className:"overflow-hidden",children:[i.jsx("div",{className:"flex border-b border-white/10",children:[{id:"sports",label:"Sports",icon:ls},{id:"time",label:"Time",icon:Ug},{id:"regions",label:"Regions",icon:x2},...a?[{id:"advanced",label:"Advanced",icon:En}]:[]].map(C=>{const F=C.icon;return i.jsxs("button",{onClick:()=>h(C.id),className:`flex-1 flex items-center justify-center space-x-2 px-4 py-3 transition-all ${d===C.id?"bg-electric-500/20 text-electric-400 border-b-2 border-electric-400":"text-gray-400 hover:text-white hover:bg-white/5"}`,children:[i.jsx(F,{className:"w-4 h-4"}),i.jsx("span",{className:"font-mono text-sm",children:C.label})]},C.id)})}),i.jsxs("div",{className:"p-4",children:[d==="sports"&&i.jsx("div",{className:"space-y-6",children:Object.entries(p).map(([C,F])=>i.jsxs("div",{children:[i.jsxs("div",{className:"flex items-center space-x-2 mb-3",children:[i.jsx(j,{category:C}),i.jsxs("div",{children:[i.jsx("h4",{className:"text-sm font-bold text-gray-300 uppercase tracking-wider font-cyber",children:C==="primary"?"Primary 11 Sports":"Misc. Sports"}),C==="misc"&&i.jsx("p",{className:"text-xs text-gray-400 font-mono mt-1",children:"College sports, international events, specialty competitions"})]})]}),i.jsx("div",{className:"grid grid-cols-2 md:grid-cols-3 gap-2",children:F.map(T=>i.jsxs(Y.button,{onClick:()=>x(T.id),className:`flex items-center space-x-2 p-3 rounded-lg border transition-all ${t.sports.includes(T.id)?"bg-electric-500/20 border-electric-500/40 text-electric-400":"bg-gray-800/30 border-gray-600 text-gray-300 hover:border-gray-500"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx("span",{className:"text-lg",children:T.icon}),i.jsxs("div",{className:"flex-1 text-left",children:[i.jsx("div",{className:"text-sm font-bold",children:T.name.split(" ")[0]}),i.jsx("div",{className:"text-xs opacity-75",children:T.name.split(" ").slice(1).join(" ")})]}),t.sports.includes(T.id)&&i.jsx(vr,{className:"w-4 h-4 text-electric-400"})]},T.id))})]},C))}),d==="time"&&i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-3",children:S0.map(C=>i.jsxs(Y.button,{onClick:()=>y(C.id),className:`p-4 rounded-xl border transition-all text-left ${t.timeFrame===C.id?"bg-electric-500/20 border-electric-500/40 text-electric-400":"bg-gray-800/30 border-gray-600 text-gray-300 hover:border-gray-500"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsxs("div",{className:"flex items-center space-x-3 mb-2",children:[i.jsx("span",{className:"text-xl",children:C.icon}),i.jsx("span",{className:"font-bold font-cyber",children:C.name}),t.timeFrame===C.id&&i.jsx(vr,{className:"w-4 h-4 text-electric-400 ml-auto"})]}),i.jsx("div",{className:"text-sm opacity-75 font-mono",children:C.description})]},C.id))}),d==="regions"&&i.jsx("div",{className:"grid grid-cols-2 md:grid-cols-3 gap-3",children:$S.map(C=>i.jsxs(Y.button,{onClick:()=>b(C.id),className:`flex items-center space-x-3 p-3 rounded-lg border transition-all ${t.regions.includes(C.id)?"bg-electric-500/20 border-electric-500/40 text-electric-400":"bg-gray-800/30 border-gray-600 text-gray-300 hover:border-gray-500"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx("span",{className:"text-lg",children:C.icon}),i.jsx("div",{className:"flex-1 text-left",children:i.jsx("div",{className:"text-sm font-bold",children:C.name})}),t.regions.includes(C.id)&&i.jsx(vr,{className:"w-4 h-4 text-electric-400"})]},C.id))}),d==="advanced"&&a&&i.jsxs("div",{className:"space-y-6",children:[i.jsxs("div",{children:[i.jsxs("label",{className:"block text-sm font-bold mb-3 text-electric-400 font-cyber",children:["MINIMUM CONFIDENCE: ",t.advanced.minConfidence,"%"]}),i.jsx("input",{type:"range",min:"50",max:"99",value:t.advanced.minConfidence,onChange:C=>g({advanced:{...t.advanced,minConfidence:parseInt(C.target.value)}}),className:"w-full h-2 bg-gray-700 rounded-lg appearance-none slider-thumb"})]}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"flex items-center justify-between p-4 quantum-card rounded-xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white font-cyber",children:"Live Games Only"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Show only currently active games"})]}),i.jsx("button",{onClick:()=>g({advanced:{...t.advanced,onlyLive:!t.advanced.onlyLive}}),className:`w-12 h-6 rounded-full transition-all ${t.advanced.onlyLive?"bg-electric-400":"bg-gray-600"}`,children:i.jsx("div",{className:`w-4 h-4 bg-white rounded-full transition-transform ${t.advanced.onlyLive?"translate-x-7":"translate-x-1"}`})})]}),i.jsxs("div",{className:"flex items-center justify-between p-4 quantum-card rounded-xl",children:[i.jsxs("div",{children:[i.jsx("div",{className:"font-bold text-white font-cyber",children:"Include Props"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Show player prop predictions"})]}),i.jsx("button",{onClick:()=>g({advanced:{...t.advanced,includeProps:!t.advanced.includeProps}}),className:`w-12 h-6 rounded-full transition-all ${t.advanced.includeProps?"bg-electric-400":"bg-gray-600"}`,children:i.jsx("div",{className:`w-4 h-4 bg-white rounded-full transition-transform ${t.advanced.includeProps?"translate-x-7":"translate-x-1"}`})})]})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-3 text-electric-400 font-cyber",children:"DATA QUALITY FILTER"}),i.jsx("div",{className:"grid grid-cols-3 gap-2",children:[{id:"all",label:"All Data",desc:"Include all sources"},{id:"high",label:"High Quality",desc:"Verified sources only"},{id:"premium",label:"Premium",desc:"Premium feeds only"}].map(C=>i.jsxs("button",{onClick:()=>g({advanced:{...t.advanced,dataQuality:C.id}}),className:`p-3 rounded-lg border text-center transition-all ${t.advanced.dataQuality===C.id?"bg-electric-500/20 border-electric-500/40 text-electric-400":"bg-gray-800/30 border-gray-600 text-gray-300 hover:border-gray-500"}`,children:[i.jsx("div",{className:"font-bold text-sm",children:C.label}),i.jsx("div",{className:"text-xs opacity-75",children:C.desc})]},C.id))})]})]})]})]})})]})},pu=[{id:"all",name:"All Sports",icon:"🏆",color:"text-electric-400",popular:!0},{id:"nba",name:"NBA",icon:"🏀",color:"text-orange-400",popular:!0},{id:"nfl",name:"NFL",icon:"🏈",color:"text-green-400",popular:!0},{id:"mlb",name:"MLB",icon:"⚾",color:"text-blue-400",popular:!0},{id:"nhl",name:"NHL",icon:"🏒",color:"text-cyan-400",popular:!0},{id:"wnba",name:"WNBA",icon:"🏀",color:"text-orange-300",popular:!1},{id:"soccer",name:"Soccer",icon:"⚽",color:"text-white",popular:!0},{id:"pga",name:"PGA",icon:"⛳",color:"text-emerald-400",popular:!1},{id:"mma",name:"MMA",icon:"🥊",color:"text-red-400",popular:!1},{id:"boxing",name:"Boxing",icon:"🥊",color:"text-yellow-500",popular:!1},{id:"tennis",name:"Tennis",icon:"🎾",color:"text-green-400",popular:!1},{id:"esports",name:"Esports",icon:"🎮",color:"text-purple-500",popular:!1}],xu=[{id:"all",name:"All Times",icon:"⏰",color:"text-gray-400"},{id:"live",name:"Live Now",icon:"🔴",color:"text-red-400"},{id:"pre-game",name:"Pre-Game",icon:"⏰",color:"text-orange-400"},{id:"in-game",name:"In-Game",icon:"🎯",color:"text-red-500"},{id:"today",name:"Today",icon:"📅",color:"text-electric-400"},{id:"tonight",name:"Tonight",icon:"🌙",color:"text-purple-300"},{id:"tomorrow",name:"Tomorrow",icon:"🌅",color:"text-yellow-400"},{id:"week",name:"This Week",icon:"📊",color:"text-blue-400"},{id:"weekend",name:"Weekend",icon:"🎉",color:"text-purple-400"}],gu=[{id:"all",name:"All Regions",icon:"🌍",color:"text-gray-400"},{id:"us",name:"United States",icon:"🇺🇸",color:"text-blue-400"},{id:"eu",name:"Europe",icon:"🇪🇺",color:"text-yellow-400"},{id:"uk",name:"United Kingdom",icon:"🇬🇧",color:"text-red-400"},{id:"ca",name:"Canada",icon:"🇨🇦",color:"text-red-500"},{id:"au",name:"Australia",icon:"🇦🇺",color:"text-green-400"},{id:"asia",name:"Asia",icon:"🌏",color:"text-purple-400"}],Qg=({filters:t,onFiltersChange:n,totalGames:r,filteredGames:a,className:l=""})=>{const[u,d]=E.useState(null),[h,p]=E.useState(!1),g=E.useRef(null);E.useEffect(()=>{const T=V=>{g.current&&!g.current.contains(V.target)&&d(null)};return document.addEventListener("mousedown",T),()=>document.removeEventListener("mousedown",T)},[]);const x=(T,V)=>{n({...t,[T]:V}),d(null)},y=()=>{n({sport:"all",timeFrame:"all",region:"all",confidence:80,onlyLive:!1})},b=()=>{let T=0;return t.sport!=="all"&&T++,t.timeFrame!=="all"&&T++,t.region!=="all"&&T++,t.confidence>80&&T++,t.onlyLive&&T++,T},N=()=>pu.find(T=>T.id===t.sport)||pu[0],w=()=>xu.find(T=>T.id===t.timeFrame)||xu[0],j=()=>gu.find(T=>T.id===t.region)||gu[0],S=r>0?Math.round((r-a)/r*100):0,C=({isActive:T,onClick:V,icon:I,label:z,value:J,color:L="text-gray-400"})=>i.jsxs(Y.button,{onClick:V,className:`flex items-center space-x-2 px-4 py-3 rounded-xl border transition-all duration-300 min-w-[140px] ${T?"bg-electric-500/20 border-electric-500/40 text-electric-400":"bg-gray-800/40 border-gray-600/40 text-gray-300 hover:border-gray-500/60 hover:bg-gray-700/40"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx("span",{className:"text-lg",children:I}),i.jsxs("div",{className:"flex-1 text-left",children:[i.jsx("div",{className:"text-xs text-gray-400 uppercase tracking-wider font-mono",children:z}),i.jsx("div",{className:`text-sm font-semibold ${L}`,children:J})]}),i.jsx(qu,{className:`w-4 h-4 transition-transform duration-200 ${T?"rotate-180":""}`})]}),F=({options:T,selectedId:V,onSelect:I,groupByPopular:z=!1})=>{const J=z?T.filter(A=>A.popular||A.id==="all"):[],L=z?T.filter(A=>!A.popular&&A.id!=="all"):T;return i.jsx(Y.div,{initial:{opacity:0,y:8,scale:.95},animate:{opacity:1,y:0,scale:1},exit:{opacity:0,y:8,scale:.95},transition:{duration:.2},className:"absolute top-full left-0 mt-2 w-full min-w-[250px] quantum-card rounded-xl border border-white/10 overflow-hidden z-50 shadow-2xl",children:i.jsxs("div",{className:"max-h-80 overflow-y-auto",children:[z&&J.length>0&&i.jsxs(i.Fragment,{children:[i.jsx("div",{className:"px-4 py-2 bg-gray-800/50 border-b border-white/10",children:i.jsx("div",{className:"text-xs font-bold text-electric-400 uppercase tracking-wider font-cyber",children:"Popular"})}),J.map(A=>i.jsxs("button",{onClick:()=>I(A.id),className:`w-full flex items-center space-x-3 px-4 py-3 text-left transition-all hover:bg-white/10 ${V===A.id?"bg-electric-500/20 text-electric-400":"text-gray-300"}`,children:[i.jsx("span",{className:"text-lg",children:A.icon}),i.jsx("span",{className:"flex-1 font-semibold",children:A.name}),V===A.id&&i.jsx(vr,{className:"w-4 h-4"})]},A.id))]}),z&&L.length>0&&i.jsxs(i.Fragment,{children:[i.jsx("div",{className:"px-4 py-2 bg-gray-800/50 border-b border-white/10",children:i.jsx("div",{className:"text-xs font-bold text-gray-400 uppercase tracking-wider font-cyber",children:"Other Sports"})}),L.map(A=>i.jsxs("button",{onClick:()=>I(A.id),className:`w-full flex items-center space-x-3 px-4 py-3 text-left transition-all hover:bg-white/10 ${V===A.id?"bg-electric-500/20 text-electric-400":"text-gray-300"}`,children:[i.jsx("span",{className:"text-lg",children:A.icon}),i.jsx("span",{className:"flex-1 font-semibold",children:A.name}),V===A.id&&i.jsx(vr,{className:"w-4 h-4"})]},A.id))]}),!z&&T.map(A=>i.jsxs("button",{onClick:()=>I(A.id),className:`w-full flex items-center space-x-3 px-4 py-3 text-left transition-all hover:bg-white/10 ${V===A.id?"bg-electric-500/20 text-electric-400":"text-gray-300"}`,children:[i.jsx("span",{className:"text-lg",children:A.icon}),i.jsx("span",{className:"flex-1 font-semibold",children:A.name}),V===A.id&&i.jsx(vr,{className:"w-4 h-4"})]},A.id))]})})};return i.jsxs("div",{className:`quantum-card rounded-2xl overflow-hidden ${l}`,ref:g,children:[i.jsx("div",{className:"p-4 border-b border-white/10",children:i.jsxs("div",{className:"flex items-center justify-between",children:[i.jsxs("div",{className:"flex items-center space-x-3",children:[i.jsxs("div",{className:"relative",children:[i.jsx(En,{className:"w-5 h-5 text-electric-400"}),b()>0&&i.jsx("div",{className:"absolute -top-2 -right-2 w-4 h-4 bg-electric-400 text-black text-xs rounded-full flex items-center justify-center font-bold",children:b()})]}),i.jsx("h3",{className:"text-lg font-bold text-white font-cyber",children:"LIVE FILTERS"})]}),i.jsxs("div",{className:"flex items-center space-x-4",children:[i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:[i.jsx("span",{className:"text-electric-400 font-bold",children:a.toLocaleString()}),i.jsx("span",{className:"text-gray-500",children:"/"}),i.jsx("span",{children:r.toLocaleString()}),i.jsx("span",{className:"ml-2 text-xs",children:"games"}),S>0&&i.jsxs("span",{className:"ml-2 text-yellow-400",children:["(-",S,"%)"]})]}),i.jsx("button",{onClick:y,className:"p-2 text-gray-400 hover:text-white transition-colors rounded-lg hover:bg-white/10",title:"Reset All Filters",children:i.jsx($g,{className:"w-4 h-4"})})]})]})}),i.jsxs("div",{className:"p-4",children:[i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4",children:[i.jsxs("div",{className:"relative",children:[i.jsx(C,{isActive:u==="sport",onClick:()=>d(u==="sport"?null:"sport"),icon:N().icon,label:"Sport",value:N().name,color:N().color}),i.jsx(fn,{children:u==="sport"&&i.jsx(F,{options:pu,selectedId:t.sport,onSelect:T=>x("sport",T),groupByPopular:!0})})]}),i.jsxs("div",{className:"relative",children:[i.jsx(C,{isActive:u==="time",onClick:()=>d(u==="time"?null:"time"),icon:w().icon,label:"Time",value:w().name,color:w().color}),i.jsx(fn,{children:u==="time"&&i.jsx(F,{options:xu,selectedId:t.timeFrame,onSelect:T=>x("timeFrame",T)})})]}),i.jsxs("div",{className:"relative",children:[i.jsx(C,{isActive:u==="region",onClick:()=>d(u==="region"?null:"region"),icon:j().icon,label:"Region",value:j().name,color:j().color}),i.jsx(fn,{children:u==="region"&&i.jsx(F,{options:gu,selectedId:t.region,onSelect:T=>x("region",T)})})]})]}),i.jsxs("div",{className:"flex items-center justify-between",children:[i.jsxs("div",{className:"flex items-center space-x-3",children:[i.jsxs(Y.button,{onClick:()=>x("onlyLive",!t.onlyLive),className:`flex items-center space-x-2 px-3 py-2 rounded-lg border transition-all ${t.onlyLive?"bg-red-500/20 border-red-500/40 text-red-400":"bg-gray-800/40 border-gray-600/40 text-gray-400 hover:text-gray-300"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx("div",{className:`w-2 h-2 rounded-full ${t.onlyLive?"bg-red-400 animate-pulse":"bg-gray-500"}`}),i.jsx("span",{className:"text-sm font-mono",children:"Live Only"})]}),i.jsxs(Y.button,{onClick:()=>p(!h),className:`flex items-center space-x-2 px-3 py-2 rounded-lg border transition-all ${h?"bg-purple-500/20 border-purple-500/40 text-purple-400":"bg-gray-800/40 border-gray-600/40 text-gray-400 hover:text-gray-300"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx(Yi,{className:"w-4 h-4"}),i.jsx("span",{className:"text-sm font-mono",children:"Advanced"}),i.jsx(qu,{className:`w-3 h-3 transition-transform ${h?"rotate-180":""}`})]})]}),b()>0&&i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx(zd,{className:"w-4 h-4 text-electric-400"}),i.jsxs("span",{className:"text-sm text-electric-400 font-mono",children:[b()," active filter",b()!==1?"s":""]})]})]}),i.jsx(fn,{children:h&&i.jsx(Y.div,{initial:{height:0,opacity:0},animate:{height:"auto",opacity:1},exit:{height:0,opacity:0},transition:{duration:.3},className:"overflow-hidden border-t border-white/10 mt-4 pt-4",children:i.jsx("div",{className:"space-y-4",children:i.jsxs("div",{children:[i.jsxs("div",{className:"flex items-center justify-between mb-3",children:[i.jsx("label",{className:"text-sm font-bold text-purple-400 font-cyber",children:"MIN CONFIDENCE"}),i.jsxs("span",{className:"text-purple-400 font-mono text-sm",children:[t.confidence,"%"]})]}),i.jsxs("div",{className:"relative",children:[i.jsx("input",{type:"range",min:"50",max:"99",value:t.confidence,onChange:T=>x("confidence",parseInt(T.target.value)),className:"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider-thumb"}),i.jsxs("div",{className:"flex justify-between text-xs text-gray-500 mt-1",children:[i.jsx("span",{children:"50%"}),i.jsx("span",{children:"75%"}),i.jsx("span",{children:"90%"}),i.jsx("span",{children:"99%"})]})]})]})})})})]})]})},qS=["nba","wnba","mlb","nfl","nhl","soccer","pga","mma","boxing","tennis","esports","misc"],vo={sports:[...qS],timeFrame:"today",regions:["us"],advanced:{minConfidence:80,onlyLive:!1,includeProps:!0,dataQuality:"all"}};E.createContext(null);const HS=()=>{const[t,n]=E.useState(()=>{try{const h=localStorage.getItem("quantum_filters");return h?{...vo,...JSON.parse(h)}:vo}catch{return vo}}),[r,a]=E.useState(!1),l=JSON.stringify(t);E.useEffect(()=>{localStorage.setItem("quantum_filters",JSON.stringify(t))},[t]);const u=E.useCallback(h=>{a(!0),n(p=>({...p,...h})),setTimeout(()=>a(!1),300)},[]),d=E.useCallback(()=>{a(!0),n(vo),setTimeout(()=>a(!1),300)},[]);return{filters:t,setFilters:n,updateFilters:u,resetFilters:d,isFiltering:r,filterKey:l}},k0={sport:"all",timeFrame:"all",region:"all",confidence:80,onlyLive:!1},Kg=t=>{const[n,r]=E.useState({...k0,...t}),a=E.useCallback(p=>{r(g=>({...g,...p}))},[]),l=E.useCallback(()=>{r(k0)},[]),u=E.useMemo(()=>n.sport!=="all"||n.timeFrame!=="all"||n.region!=="all"||n.confidence>80||n.onlyLive,[n]),d=E.useMemo(()=>{let p=0;return n.sport!=="all"&&p++,n.timeFrame!=="all"&&p++,n.region!=="all"&&p++,n.confidence>80&&p++,n.onlyLive&&p++,p},[n]),h=E.useMemo(()=>{const p=y=>({all:"All Sports",nba:"NBA",nfl:"NFL",mlb:"MLB",nhl:"NHL",wnba:"WNBA",soccer:"Soccer",pga:"PGA",mma:"MMA",boxing:"Boxing",tennis:"Tennis",esports:"Esports"})[y]||y,g=y=>({all:"All Times",live:"Live Now","pre-game":"Pre-Game","in-game":"In-Game",today:"Today",tonight:"Tonight",tomorrow:"Tomorrow",week:"This Week",weekend:"Weekend"})[y]||y,x=y=>({all:"All Regions",us:"United States",eu:"Europe",uk:"United Kingdom",ca:"Canada",au:"Australia",asia:"Asia"})[y]||y;return{sport:p(n.sport),timeFrame:g(n.timeFrame),region:x(n.region),hasAdvanced:n.confidence>80||n.onlyLive}},[n]);return{filters:n,updateFilters:a,resetFilters:l,isFiltering:u,activeFiltersCount:d,filterSummary:h}},Gg=(t,n=147)=>{const r=E.useMemo(()=>{let l=0;if(t.sport!=="all"&&(l+=.3),t.timeFrame==="live"?l+=.7:t.timeFrame==="today"?l+=.4:t.timeFrame!=="all"&&(l+=.5),t.region!=="all"&&(l+=.2),t.confidence>80){const u=(t.confidence-80)*.01;l+=u}return t.onlyLive&&(l+=.6),l=Math.min(l,.9),Math.max(1,Math.floor(n*(1-l)))},[t,n]),a=n>0?Math.round((n-r)/n*100):0;return{totalItems:n,filteredItems:r,reductionPercent:a,isLoading:!1}};class WS{constructor(){Ve(this,"predictions",[]);Ve(this,"systemState",{coherence:99.97,entanglement:87.3,processing:!0,activeNetworks:47,totalPredictions:0,accuracy:89.7,quantumBoostActive:!0});Ve(this,"subscribers",new Set);this.initializeQuantumSystem().then(()=>{this.startBackgroundProcessing()})}async initializeQuantumSystem(){const n=["http://localhost:8000/api/predictions","/api/predictions",`${window.location.origin.replace(/:\d+/,":8000")}/api/predictions`];let r=[];for(const a of n)try{console.log(`🔄 Quantum: Trying backend URL: ${a}`);const l=await fetch(a);if(l.ok){r=await l.json(),console.log(`✅ Quantum: Connected to ${a}`);break}}catch(l){console.log(`❌ Quantum: Failed to connect to ${a}:`,l.message);continue}try{this.predictions=r.slice(0,6).map((a,l)=>({id:`q_real_${a.id}`,game:`${a.match.homeTeam} vs ${a.match.awayTeam}`,player:this.extractPlayerName(a.match.homeTeam,a.match.awayTeam),prediction:`${a.mostLikelyOutcome==="home_win"?"Over":"Under"} ${this.generateStatLine(a.match.sport)}`,confidence:a.confidenceScore*100,quantumSignal:a.confidenceScore,superpositionState:a.confidenceScore>.8?"entangled":a.confidenceScore>.7?"coherent":"collapsed",neuralNetwork:`${a.algorithmUsed}_model_${l+1}`,timeframe:new Date(a.match.startTime)>new Date?"upcoming":"live",sport:a.match.sport,league:a.match.league,odds:a.marketOdds?{over:a.marketOdds.homeOdds,under:a.marketOdds.awayOdds,current:(a.marketOdds.homeOdds+a.marketOdds.awayOdds)/2}:{over:1.9,under:1.9,current:1.9},metadata:{temperature:70+Math.random()*10,injuryRisk:Math.random()*.3,momentum:a.predictions.homeWin,historicalAccuracy:a.historicalAccuracy||a.confidenceScore}})),this.systemState.totalPredictions=this.predictions.length,this.systemState.activeNetworks=Math.min(this.predictions.length,8)}catch(a){console.error("Failed to fetch real predictions for quantum system:",a),this.predictions=[],this.systemState.totalPredictions=0}}extractPlayerName(n,r){const a={"Saskatchewan Roughriders":"T. Harris","BC Lions":"N. Rourke",Lakers:"A. Davis",Warriors:"S. Curry",Celtics:"J. Tatum",Heat:"J. Butler"};return a[n]||a[r]||"Player TBD"}generateStatLine(n){const r={Basketball:["25.5 Points","8.5 Rebounds","6.5 Assists","2.5 Three-Pointers"],Football:["275.5 Passing Yards","2.5 Passing TDs","65.5 Rushing Yards"],Hockey:["0.5 Goals","1.5 Points","3.5 Shots"],Baseball:["1.5 Hits","0.5 Home Runs","1.5 RBIs"],CFL:["285.5 Passing Yards","2.5 TDs","55.5 Rushing Yards"]},a=r[n]||r.Basketball;return a[Math.floor(Math.random()*a.length)]}startBackgroundProcessing(){setInterval(()=>{this.updateQuantumState(),this.generateNewPredictions(),this.notifySubscribers()},5e3),setInterval(()=>{this.updateSystemMetrics(),this.notifySubscribers()},2e3)}updateQuantumState(){this.systemState.coherence=Math.max(95,Math.min(99.99,this.systemState.coherence+(Math.random()-.5)*.5)),this.systemState.entanglement=Math.max(80,Math.min(95,this.systemState.entanglement+(Math.random()-.5)*2)),this.systemState.accuracy=Math.max(85,Math.min(95,this.systemState.accuracy+(Math.random()-.5)*.5))}updateSystemMetrics(){Math.random()<.1&&(this.systemState.activeNetworks=Math.max(40,Math.min(50,this.systemState.activeNetworks+(Math.random()>.5?1:-1))))}async generateNewPredictions(){if(Math.random()<.1)try{const r=await(await fetch("http://localhost:8000/api/predictions")).json();if(r.length>0){const a=r[Math.floor(Math.random()*r.length)],l={id:`q_real_${a.id}_${Date.now()}`,game:`${a.match.homeTeam} vs ${a.match.awayTeam}`,player:this.extractPlayerName(a.match.homeTeam,a.match.awayTeam),prediction:`${a.mostLikelyOutcome==="home_win"?"Over":"Under"} ${this.generateStatLine(a.match.sport)}`,confidence:a.confidenceScore*100,quantumSignal:a.confidenceScore,superpositionState:a.confidenceScore>.8?"entangled":"coherent",neuralNetwork:`${a.algorithmUsed}_live`,timeframe:"live",sport:a.match.sport,league:a.match.league,odds:a.marketOdds?{over:a.marketOdds.homeOdds,under:a.marketOdds.awayOdds,current:(a.marketOdds.homeOdds+a.marketOdds.awayOdds)/2}:{over:1.9,under:1.9,current:1.9},metadata:{temperature:70+Math.random()*10,injuryRisk:Math.random()*.3,momentum:a.predictions.homeWin,historicalAccuracy:a.historicalAccuracy||a.confidenceScore}};this.predictions.unshift(l),this.systemState.totalPredictions++,this.predictions.length>20&&(this.predictions=this.predictions.slice(0,20))}}catch(n){console.error("Failed to refresh predictions:",n)}}subscribe(n){return this.subscribers.add(n),n(this.predictions,this.systemState),()=>{this.subscribers.delete(n)}}notifySubscribers(){this.subscribers.forEach(n=>{n([...this.predictions],{...this.systemState})})}getPredictions(){return[...this.predictions]}getSystemState(){return{...this.systemState}}getPredictionsBySport(n){return this.predictions.filter(r=>r.sport.toLowerCase()===n.toLowerCase())}getHighConfidencePredictions(n=90){return this.predictions.filter(r=>r.confidence>=n)}getQuantumBoostPredictions(){return this.predictions.filter(n=>n.superpositionState==="entangled"&&n.quantumSignal>.8)}toggleQuantumBoost(){this.systemState.quantumBoostActive=!this.systemState.quantumBoostActive,this.notifySubscribers()}}const T0=new WS,Yg=(t={})=>{const[n,r]=E.useState([]),[a,l]=E.useState({coherence:99.97,entanglement:87.3,processing:!0,activeNetworks:47,totalPredictions:0,accuracy:89.7,quantumBoostActive:!0}),[u,d]=E.useState(!0);return E.useEffect(()=>T0.subscribe((y,b)=>{let N=y;t.sport&&(N=N.filter(w=>w.sport.toLowerCase()===t.sport.toLowerCase())),t.minConfidence&&(N=N.filter(w=>w.confidence>=t.minConfidence)),t.quantumBoostOnly&&(N=N.filter(w=>w.superpositionState==="entangled"&&w.quantumSignal>.8)),r(N),l(b),d(!1)}),[t.sport,t.minConfidence,t.quantumBoostOnly]),{predictions:n,systemState:a,loading:u,toggleQuantumBoost:()=>{T0.toggleQuantumBoost()},getQuantumInsight:x=>{const{quantumSignal:y,superpositionState:b,confidence:N}=x;return b==="entangled"&&y>.9?"🚀 Quantum Entangled - Maximum confidence signal detected":b==="coherent"&&N>92?"⚡ Quantum Coherent - High probability outcome":y>.8?"🔮 Strong Quantum Signal - Above average confidence":"🌊 Standard Quantum State - Normal probability range"},getNetworkStatus:()=>{const{activeNetworks:x,coherence:y,processing:b}=a;return b?y>99.5&&x>=45?"OPTIMAL":y>98&&x>=40?"EXCELLENT":y>95?"GOOD":"CALIBRATING":"OFFLINE"},highConfidencePredictions:n.filter(x=>x.confidence>=90),quantumBoostPredictions:n.filter(x=>x.superpositionState==="entangled"&&x.quantumSignal>.8),recentPredictions:n.slice(0,10)}},QS=()=>{const[t,n]=E.useState(!1),[r,a]=E.useState(!1),[l,u]=E.useState({investment:1e3,strategy:"quantum",confidence:95,portfolio:4,sports:"all",riskLevel:"moderate",timeFrame:"today",leagues:["nba","nfl"],maxOdds:-150,minOdds:-300,playerTypes:"all",weatherFilter:!0,injuryFilter:!0,lineMovement:"any"}),[d,h]=E.useState(null),[p,g]=E.useState(!1),[x,y]=E.useState(""),[b,N]=E.useState(!1),{filters:w,updateFilters:j}=HS(),{filters:S,updateFilters:C}=Kg(),{totalItems:F,filteredItems:T}=Gg(S,89),{predictions:V,systemState:I,getQuantumInsight:z,getNetworkStatus:J}=Yg({minConfidence:85}),L=()=>{if(!d||!x.trim()){br.error("Please enter a lineup name");return}const B=d.picks.map(X=>({id:`pick_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,description:X.pick,confidence:X.confidence}));Mt.saveMoneyMakerLineup(x,B,d.investment,d.payout,d.accuracy),br.success(`💰 Money Maker lineup "${x}" saved!`,{duration:3e3,style:{background:"#1f2937",color:"#10b981",border:"1px solid #10b981"}}),g(!1),y("")},A=async()=>{n(!0),setTimeout(()=>{const X=(S.sport==="all"?1.15:1.05)+S.confidence/1e3,re=S.timeFrame==="live"?1.15:1,oe=Math.pow(2.1,l.portfolio)*(l.confidence/100)*1.2*X*re*neuralBonus,Ae=V.filter(ge=>S.sport==="all"||ge.sport.toLowerCase()===S.sport).sort((ge,fe)=>fe.confidence-ge.confidence).slice(0,l.portfolio).map(ge=>({game:ge.game,pick:ge.player?`${ge.player} ${ge.prediction}`:ge.prediction,confidence:ge.confidence,odds:ge.odds?ge.odds.current>2?`+${Math.round((ge.odds.current-1)*100)}`:`-${Math.round(100/(ge.odds.current-1))}`:"-110",neural:ge.neuralNetwork,reason:z(ge)}));h({investment:l.investment,multiplier:oe,payout:l.investment*oe,accuracy:I.accuracy,picks:Ae,quantumBoost:I.quantumBoostActive,processingTime:`${Math.floor(500+Math.random()*500)}ms`,neuralNetworks:I.activeNetworks+(S.sport==="all"?36:12),filters:l}),n(!1)},3500)};return i.jsxs(Y.div,{className:"space-y-10 animate-slide-in-up",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center mb-16 quantum-card rounded-3xl p-16 shadow-neon border-2 border-green-500/30",children:[i.jsxs("div",{className:"relative mb-8",children:[i.jsx("h1",{className:"holographic text-7xl font-black mb-6 font-cyber",children:"QUANTUM MONEY MAKER"}),i.jsx("div",{className:"text-2xl text-gray-300 font-mono",children:"Neural-Enhanced Profit Generation System"})]}),i.jsxs("div",{className:"relative mb-8",children:[i.jsx("div",{className:"absolute inset-0 bg-green-400/20 blur-3xl"}),i.jsx("div",{className:"relative text-8xl font-black text-green-400 mb-6 animate-cyber-pulse font-cyber",children:"$∞"}),i.jsx("div",{className:"text-xl text-electric-400 font-mono",children:"UNLIMITED NEURAL PROFIT POTENTIAL"})]}),i.jsxs("div",{className:"grid grid-cols-4 gap-8 mb-8",children:[i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-4xl font-bold text-electric-400 font-cyber",children:"∞%"}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Neural ROI"})]}),i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-4xl font-bold text-purple-400 font-cyber",children:[I.accuracy.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Quantum Accuracy"})]}),i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"text-4xl font-bold text-cyan-400 font-cyber",children:[I.coherence.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Coherence"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-4xl font-bold text-blue-400 font-cyber",children:J()}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Neural Status"})]})]})]}),i.jsxs(Y.div,{className:"quantum-card rounded-3xl p-10 border-2 border-electric-500/30 shadow-neon mb-12",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5,delay:.3},children:[i.jsxs("div",{className:"flex items-center space-x-4 mb-10",children:[i.jsx(et,{className:"text-4xl text-electric-400 animate-neural-pulse"}),i.jsxs("div",{className:"flex-1",children:[i.jsx("h2",{className:"text-4xl font-bold text-electric-400 holographic font-cyber mb-2",children:"QUANTUM CONTROL CENTER"}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Neural Matrix • AI Configuration • Filter System"})]}),i.jsx("div",{className:"flex space-x-3",children:i.jsxs(Y.button,{onClick:()=>N(!b),className:"flex items-center space-x-2 px-4 py-2 rounded-xl bg-electric-500/20 border border-electric-500/40 text-electric-400 hover:bg-electric-500/30 transition-all font-cyber font-bold text-sm",whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(zd,{className:`w-4 h-4 ${b?"animate-pulse":""}`}),i.jsx("span",{children:"FILTERS"})]})})]}),i.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8",children:[i.jsxs("div",{className:"space-y-6",children:[i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-green-500/30",children:[i.jsxs("h3",{className:"text-lg font-bold text-green-400 font-cyber mb-4 flex items-center space-x-2",children:[i.jsx(Ui,{className:"w-5 h-5"}),i.jsx("span",{children:"INVESTMENT MATRIX"})]}),i.jsxs("div",{className:"grid grid-cols-2 gap-4",children:[i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-green-400 font-cyber",children:"AMOUNT ($)"}),i.jsx("input",{type:"number",min:"100",max:"10000",step:"100",value:l.investment,onChange:B=>u({...l,investment:parseInt(B.target.value)}),className:"w-full p-3 rounded-xl text-center font-bold text-lg border-2 border-green-500/30 focus:border-green-500 bg-gray-900/50 text-green-400"})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-green-400 font-cyber",children:"STRATEGY"}),i.jsxs("select",{value:l.strategy,onChange:B=>u({...l,strategy:B.target.value}),className:"w-full p-3 rounded-xl border-2 border-green-500/30 focus:border-green-500 bg-gray-900/50 text-white font-cyber",children:[i.jsx("option",{value:"quantum",children:"Quantum Enhanced"}),i.jsx("option",{value:"aggressive",children:"Aggressive Growth"}),i.jsx("option",{value:"conservative",children:"Conservative Steady"}),i.jsx("option",{value:"balanced",children:"Balanced Portfolio"})]})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-blue-500/30",children:[i.jsxs("h3",{className:"text-lg font-bold text-blue-400 font-cyber mb-4 flex items-center space-x-2",children:[i.jsx(Ho,{className:"w-5 h-5"}),i.jsx("span",{children:"PRECISION CONTROLS"})]}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{children:[i.jsxs("label",{className:"block text-sm font-bold mb-3 text-blue-400 font-cyber",children:["CONFIDENCE: ",l.confidence,"%"]}),i.jsx("input",{type:"range",min:"80",max:"99",value:l.confidence,onChange:B=>u({...l,confidence:parseInt(B.target.value)}),className:"w-full h-2 bg-gray-700 rounded-lg appearance-none slider-thumb"}),i.jsxs("div",{className:"flex justify-between text-xs text-gray-400 mt-1 font-mono",children:[i.jsx("span",{children:"Safe (80%)"}),i.jsx("span",{children:"Maximum (99%)"})]})]}),i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-blue-400 font-cyber",children:"PORTFOLIO SIZE"}),i.jsxs("select",{value:l.portfolio,onChange:B=>u({...l,portfolio:parseInt(B.target.value)}),className:"w-full p-3 rounded-xl border-2 border-blue-500/30 focus:border-blue-500 bg-gray-900/50 text-white font-cyber",children:[i.jsx("option",{value:2,children:"2 Picks (Safe)"}),i.jsx("option",{value:3,children:"3 Picks (Balanced)"}),i.jsx("option",{value:4,children:"4 Picks (Optimal)"}),i.jsx("option",{value:5,children:"5 Picks (Aggressive)"}),i.jsx("option",{value:6,children:"6 Picks (Maximum)"})]})]})]})]})]}),i.jsxs("div",{className:"space-y-6",children:[i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-cyan-500/30",children:[i.jsxs("h3",{className:"text-lg font-bold text-cyan-400 font-cyber mb-4 flex items-center space-x-2",children:[i.jsx(En,{className:"w-5 h-5 animate-pulse"}),i.jsx("span",{children:"QUANTUM NEURAL ENGINE"})]}),i.jsxs("div",{className:"space-y-3",children:[i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Network Status"}),i.jsx("span",{className:"text-cyan-400 font-cyber font-bold text-sm",children:J()})]}),i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Active Predictions"}),i.jsx("span",{className:"text-electric-400 font-cyber font-bold text-sm",children:V.length})]}),i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Quantum Boost"}),i.jsx("span",{className:`font-cyber font-bold text-sm ${I.quantumBoostActive?"text-green-400":"text-gray-400"}`,children:I.quantumBoostActive?"ACTIVE":"STANDBY"})]}),i.jsxs("div",{className:"text-center p-3 bg-cyan-500/10 rounded-lg border border-cyan-500/30",children:[i.jsx("div",{className:"text-xs text-cyan-400 font-mono mb-1",children:"Quantum Coherence"}),i.jsxs("div",{className:"text-lg font-bold text-cyan-400 font-cyber",children:[I.coherence.toFixed(2),"%"]})]})]})]}),i.jsx(Qg,{filters:S,onFiltersChange:C,totalGames:F,filteredGames:T,className:"border border-electric-500/20 shadow-neon"}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-purple-500/30",children:[i.jsxs("h3",{className:"text-lg font-bold text-purple-400 font-cyber mb-4 flex items-center space-x-2",children:[i.jsx(ls,{className:"w-5 h-5"}),i.jsx("span",{children:"QUICK SETTINGS"})]}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Neural Enhancement"}),i.jsx("span",{className:"text-green-400 font-cyber font-bold text-sm",children:"AUTO"})]}),i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Risk Protocol"}),i.jsxs("select",{value:l.riskLevel,onChange:B=>u({...l,riskLevel:B.target.value}),className:"bg-gray-900/50 text-white text-sm rounded px-2 py-1 border border-gray-600 font-cyber",children:[i.jsx("option",{value:"conservative",children:"Conservative"}),i.jsx("option",{value:"moderate",children:"Balanced"}),i.jsx("option",{value:"aggressive",children:"Aggressive"}),i.jsx("option",{value:"maximum",children:"Maximum"})]})]}),i.jsxs("div",{className:"text-center p-3 bg-purple-500/10 rounded-lg border border-purple-500/30",children:[i.jsx("div",{className:"text-xs text-purple-400 font-mono mb-1",children:"Advanced Neural Modules"}),i.jsx("div",{className:"text-sm text-gray-300",children:"Configure in Admin Panel"})]})]})]})]})]}),b&&i.jsx(Y.div,{initial:{opacity:0,height:0},animate:{opacity:1,height:"auto"},exit:{opacity:0,height:0},transition:{duration:.4},className:"border-t border-electric-500/30 pt-8 mt-8",children:i.jsx(zS,{filters:w,onFiltersChange:j,showAdvanced:!0,className:"border-2 border-electric-500/30 shadow-neon"})}),r&&i.jsx(Y.div,{initial:{opacity:0,height:0},animate:{opacity:1,height:"auto"},exit:{opacity:0,height:0},transition:{duration:.4},className:"border-t border-purple-500/30 pt-8 mt-8",children:i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-6",children:[i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-purple-500/30",children:[i.jsx("h4",{className:"text-lg font-bold text-purple-400 font-cyber mb-4",children:"NEURAL NETWORKS"}),i.jsxs("div",{className:"space-y-3",children:[i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Active Networks"}),i.jsx("span",{className:"text-purple-400 font-cyber font-bold",children:"47"})]}),i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Processing Power"}),i.jsx("span",{className:"text-electric-400 font-cyber font-bold",children:"∞ TFLOPS"})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-cyan-500/30",children:[i.jsx("h4",{className:"text-lg font-bold text-cyan-400 font-cyber mb-4",children:"DATA STREAMS"}),i.jsxs("div",{className:"space-y-3",children:[i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Live Sources"}),i.jsx("span",{className:"text-cyan-400 font-cyber font-bold",children:"1,247"})]}),i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Update Rate"}),i.jsx("span",{className:"text-green-400 font-cyber font-bold",children:"<1ms"})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-yellow-500/30",children:[i.jsx("h4",{className:"text-lg font-bold text-yellow-400 font-cyber mb-4",children:"QUANTUM STATUS"}),i.jsxs("div",{className:"space-y-3",children:[i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Entanglement"}),i.jsx("span",{className:"text-yellow-400 font-cyber font-bold",children:"ACTIVE"})]}),i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:"Coherence"}),i.jsx("span",{className:"text-electric-400 font-cyber font-bold",children:"99.7%"})]})]})]})]})}),i.jsx("div",{className:"text-center mt-8 pt-8 border-t border-electric-500/30",children:i.jsx(Y.button,{onClick:A,disabled:t,className:`px-16 py-6 rounded-2xl font-bold text-2xl transition-all duration-300 ${t?"bg-gray-600 cursor-not-allowed":"bg-gradient-to-r from-green-500 to-electric-500 hover:from-green-400 hover:to-electric-400 text-black shadow-neon"}`,whileHover:t?{}:{scale:1.05},whileTap:t?{}:{scale:.95},children:t?i.jsxs("div",{className:"flex items-center space-x-4",children:[i.jsx(Vi,{className:"w-7 h-7 animate-spin"}),i.jsx("span",{className:"font-cyber",children:"QUANTUM PROCESSING..."})]}):i.jsxs("div",{className:"flex items-center space-x-4",children:[i.jsx(En,{className:"w-7 h-7"}),i.jsx("span",{className:"font-cyber",children:"ACTIVATE QUANTUM AI"})]})})})]}),d&&i.jsxs(Y.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},className:"quantum-card rounded-3xl p-10 border-2 border-green-500/30",children:[i.jsxs("div",{className:"text-center mb-8",children:[i.jsx("h2",{className:"text-4xl font-bold text-green-400 holographic font-cyber mb-4",children:"QUANTUM RESULTS GENERATED"}),i.jsxs("div",{className:"text-lg text-gray-300 font-mono",children:["Neural networks analyzed ",d.neuralNetworks," data streams in"," ",d.processingTime]})]}),i.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8",children:[i.jsxs("div",{className:"text-center quantum-card p-6 rounded-2xl",children:[i.jsxs("div",{className:"text-3xl font-bold text-green-400 font-cyber mb-2",children:["$",d.investment.toLocaleString()]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Investment"})]}),i.jsxs("div",{className:"text-center quantum-card p-6 rounded-2xl",children:[i.jsxs("div",{className:"text-3xl font-bold text-electric-400 font-cyber mb-2",children:[d.multiplier.toFixed(2),"x"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Neural Multiplier"})]}),i.jsxs("div",{className:"text-center quantum-card p-6 rounded-2xl",children:[i.jsxs("div",{className:"text-3xl font-bold text-yellow-400 font-cyber mb-2",children:["$",d.payout.toLocaleString()]}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Projected Payout"})]})]}),i.jsxs("div",{className:"space-y-4",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber mb-4",children:"NEURAL RECOMMENDATIONS"}),d.picks.map((B,X)=>i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-green-500/20",children:[i.jsxs("div",{className:"flex justify-between items-start mb-3",children:[i.jsxs("div",{children:[i.jsx("div",{className:"text-lg font-bold text-white",children:B.game}),i.jsx("div",{className:"text-electric-400 font-bold",children:B.pick})]}),i.jsxs("div",{className:"text-right",children:[i.jsxs("div",{className:"text-green-400 font-bold text-lg",children:[B.confidence.toFixed(1),"%"]}),i.jsx("div",{className:"text-gray-400 font-mono",children:B.odds})]})]}),i.jsx("div",{className:"text-sm text-gray-300 mb-2",children:B.reason}),i.jsxs("div",{className:"text-xs text-purple-400 font-mono",children:["Processed by ",B.neural]})]},X))]}),i.jsxs("div",{className:"mt-8 flex justify-center space-x-4",children:[i.jsxs(Y.button,{onClick:()=>g(!0),className:"flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold rounded-xl hover:from-blue-400 hover:to-purple-400 transition-all duration-300",whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(qd,{className:"w-5 h-5"}),i.jsx("span",{children:"SAVE LINEUP"})]}),i.jsx(Y.button,{className:"px-8 py-4 bg-gradient-to-r from-green-500 to-yellow-500 text-black font-bold rounded-xl hover:from-green-400 hover:to-yellow-400 transition-all duration-300",whileHover:{scale:1.05},whileTap:{scale:.95},children:"EXECUTE NEURAL STRATEGY"})]})]}),p&&i.jsx(Y.div,{initial:{opacity:0},animate:{opacity:1},className:"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4",onClick:()=>g(!1),children:i.jsxs(Y.div,{initial:{scale:.9,opacity:0},animate:{scale:1,opacity:1},className:"quantum-card rounded-2xl p-8 max-w-md w-full",onClick:B=>B.stopPropagation(),children:[i.jsx("h3",{className:"text-2xl font-bold text-electric-400 mb-6 font-cyber",children:"SAVE MONEY MAKER LINEUP"}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"Lineup Name"}),i.jsx("input",{type:"text",value:x,onChange:B=>y(B.target.value),placeholder:"Enter lineup name...",className:"w-full p-3 rounded-lg bg-gray-800/50 border border-gray-600 text-white placeholder-gray-400 focus:border-electric-400 focus:outline-none"})]}),i.jsxs("div",{className:"flex space-x-4 pt-4",children:[i.jsx("button",{onClick:L,className:"flex-1 py-3 bg-green-500 text-white font-bold rounded-lg hover:bg-green-400 transition-all",children:"Save Lineup"}),i.jsx("button",{onClick:()=>g(!1),className:"flex-1 py-3 bg-gray-600 text-white font-bold rounded-lg hover:bg-gray-500 transition-all",children:"Cancel"})]})]})]})})]})},KS=()=>{const[t,n]=E.useState(new Map),[r]=E.useState(25),[a,l]=E.useState([]),[u,d]=E.useState(!1),[h,p]=E.useState(""),[,g]=E.useState([]),[x,y]=E.useState(!1),{predictions:b}=Yg({minConfidence:80}),[N,w]=dn.useState([]),[j,S]=dn.useState(!0);dn.useEffect(()=>{const L=async()=>{try{const X=await(await fetch("http://localhost:8000/api/prizepicks/props")).json();if(X&&Array.isArray(X)&&X.length>0){const re=X.map((oe,we)=>{var Ae;return{id:oe.id||we,player:oe.description||`Player ${we+1}`,team:oe.stat_type||"Unknown",stat:oe.stat_type||"points",line:oe.line_score||oe.line||0,over:1.85+(oe.confidence-70)*.003,under:2.15-(oe.confidence-70)*.003,confidence:oe.confidence||75,neural:`Enhanced-ML-${oe.model_consensus||"medium"}`,trend:oe.edge>0?"up":"down",game:`${oe.stat_type} Analysis`,expectedValue:oe.edge||0,llmReasoning:`Confidence: ${oe.confidence}%, Edge: ${((Ae=oe.edge)==null?void 0:Ae.toFixed(3))||"N/A"}`,analysis:`Projection: ${oe.projection}, Line: ${oe.line_score}`}});w(re),console.log(`✅ PrizePicks Analysis: Top ${re.length} props loaded`),console.log("📊 Backend Integration: Live data successfully fetched")}else console.log("⚡ PrizePicks Backend: Waiting for live PrizePicks projections to analyze"),w([])}catch(B){console.error("❌ PropOllama API Error:",B),w([])}finally{S(!1)}};L();const A=setInterval(L,3e4);return()=>clearInterval(A)},[]);const F=[...b.filter(L=>L.player&&L.odds).map((L,A)=>{var oe,we,Ae;const B=L.prediction.match(/(Over|Under)\s+([\d.]+)\s+(.+)/),X=parseFloat((B==null?void 0:B[2])||"0"),re=(B==null?void 0:B[3])||"Points";return{id:A+1,player:L.player,team:((oe=L.game.split(" vs ")[L.player===L.game.split(" vs ")[0].split(" ").pop()?0:1])==null?void 0:oe.split(" ").pop())||"TBD",stat:re,line:X,over:((we=L.odds)==null?void 0:we.over)||1.9,under:((Ae=L.odds)==null?void 0:Ae.under)||1.9,confidence:L.confidence,neural:L.neuralNetwork,trend:L.metadata.momentum>.6?"up":"down",game:L.game}}),...N].slice(0,12),T=L=>{const A=[],B=Array.from(L.values());return B.length<2&&A.push("Minimum 2 picks required"),B.length>6&&A.push("Maximum 6 picks allowed"),r<5&&A.push("Minimum entry amount is $5"),r>1e3&&A.push("Maximum entry amount is $1000"),l(A),A.length===0},V=(L,A)=>{const B=`${L}_${A}`;let X=new Map(t);if(t.has(B))X.delete(B);else if(t.size<6){const re=`${L}_${A==="over"?"under":"over"}`;X.has(re)&&X.delete(re),X.set(B,{propId:L,choice:A})}n(X),T(X)},I=()=>{const L=t.size,A={2:3,3:5,4:10,5:20,6:50};return L>=2?r*(A[L]||0)*1.5:0},z=()=>{const L=t.size;return{2:"Power Play (2 picks)",3:"Flex Play (3 picks)",4:"Power Play (4 picks)",5:"Flex Play (5 picks)",6:"Power Play (6 picks)"}[L]||`Select ${Math.max(0,2-L)} more`},J=()=>{if(!h.trim()){alert("Please enter a lineup name");return}const L=Array.from(t.values()).map(B=>{const X=F.find(re=>re.id===B.propId);return{player:X.player,stat:X.stat,line:X.line,choice:B.choice,confidence:X.confidence}}),A={id:`lineup_${Date.now()}`,name:h,picks:L,entryAmount:r,projectedPayout:I(),savedAt:new Date};g(B=>[...B,A]),d(!1),p(""),y(!0),setTimeout(()=>y(!1),3e3),br.success(`Lineup "${h}" saved successfully!`)};return i.jsxs(Y.div,{className:"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900/20 to-gray-900 p-6",initial:{opacity:0},animate:{opacity:1},transition:{duration:.8},children:[i.jsxs("div",{className:"mb-8",children:[i.jsx(Y.h1,{className:"text-5xl font-black text-transparent bg-clip-text bg-gradient-to-r from-electric-400 to-purple-500 mb-4",initial:{y:-20,opacity:0},animate:{y:0,opacity:1},transition:{delay:.2},children:"PrizePicks Pro"}),i.jsx(Y.p,{className:"text-xl text-gray-400",initial:{y:-20,opacity:0},animate:{y:0,opacity:1},transition:{delay:.3},children:"AI-Enhanced Props Analysis • PropOllama Powered"})]}),i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",children:j?i.jsxs("div",{className:"col-span-full text-center py-8",children:[i.jsx("div",{className:"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-electric-400"}),i.jsx("p",{className:"mt-2 text-gray-400",children:"Loading real PrizePicks data..."})]}):F.length===0?i.jsx("div",{className:"col-span-full text-center py-12",children:i.jsxs("div",{className:"max-w-md mx-auto",children:[i.jsx(et,{className:"w-16 h-16 text-electric-400 mx-auto mb-4 animate-pulse"}),i.jsx("h3",{className:"text-xl font-bold text-white mb-2",children:"PropOllama Analysis Engine Ready"}),i.jsx("p",{className:"text-gray-400 mb-4",children:"Waiting for live PrizePicks projections to analyze using our advanced prediction models and LLM reasoning."}),i.jsxs("div",{className:"bg-gray-800/50 rounded-lg p-4 text-left",children:[i.jsx("h4",{className:"text-electric-400 font-semibold mb-2",children:"Analysis Features:"}),i.jsxs("ul",{className:"text-sm text-gray-300 space-y-1",children:[i.jsx("li",{children:"• Real PrizePicks API integration"}),i.jsx("li",{children:"• Multi-factor confidence scoring"}),i.jsx("li",{children:"• LLM-enhanced prop reasoning"}),i.jsx("li",{children:"• Top 6 highest probability picks"}),i.jsx("li",{children:"• Live game correlation analysis"})]})]})]})}):F.map(L=>{const A=`${L.id}_over`,B=`${L.id}_under`,X=t.has(A),re=t.has(B);return i.jsxs(Y.div,{className:"quantum-card rounded-2xl p-6 border border-gray-700/50 hover:border-electric-500/30 transition-all",whileHover:{scale:1.02},layout:!0,children:[i.jsxs("div",{className:"flex justify-between items-start mb-4",children:[i.jsxs("div",{children:[i.jsx("div",{className:"text-xl font-bold text-white",children:L.player}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:[L.team," • ",L.game]})]}),i.jsxs("div",{className:"flex items-center space-x-2",children:[L.trend==="up"?i.jsx(ls,{className:"w-5 h-5 text-green-400"}):i.jsx(Wd,{className:"w-5 h-5 text-red-400"}),i.jsx("div",{className:"text-sm text-purple-400 font-mono",children:L.neural})]})]}),i.jsxs("div",{className:"text-center mb-4",children:[i.jsx("div",{className:"text-lg text-gray-400 font-mono",children:L.stat}),i.jsx("div",{className:"text-3xl font-bold text-electric-400 font-cyber",children:L.line})]}),i.jsxs("div",{className:"grid grid-cols-2 gap-4 mb-4",children:[i.jsxs(Y.button,{onClick:()=>V(L.id,"over"),className:`p-4 rounded-xl font-bold transition-all ${X?"bg-green-500/30 border-2 border-green-500 text-green-300":"bg-gray-800/50 border-2 border-gray-600 text-gray-300 hover:border-green-500/50"}`,whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx("div",{className:"text-lg",children:"OVER"}),i.jsx("div",{className:"text-sm font-mono",children:L.over.toFixed(2)})]}),i.jsxs(Y.button,{onClick:()=>V(L.id,"under"),className:`p-4 rounded-xl font-bold transition-all ${re?"bg-red-500/30 border-2 border-red-500 text-red-300":"bg-gray-800/50 border-2 border-gray-600 text-gray-300 hover:border-red-500/50"}`,whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx("div",{className:"text-lg",children:"UNDER"}),i.jsx("div",{className:"text-sm font-mono",children:L.under.toFixed(2)})]})]}),i.jsxs("div",{className:"space-y-2",children:[i.jsxs("div",{className:"flex items-center justify-between bg-gray-800/30 rounded-lg p-3",children:[i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx(et,{className:"w-4 h-4 text-purple-400"}),i.jsx("span",{className:"text-sm text-purple-400 font-mono",children:"Confidence"})]}),i.jsxs("div",{className:"text-lg font-bold text-electric-400 font-cyber",children:[L.confidence.toFixed(1),"%"]})]}),L.llmReasoning&&i.jsxs("div",{className:"bg-purple-900/20 rounded-lg p-3 border border-purple-500/20",children:[i.jsxs("div",{className:"flex items-center space-x-2 mb-2",children:[i.jsx(En,{className:"w-4 h-4 text-electric-400"}),i.jsx("span",{className:"text-xs text-electric-400 font-mono",children:"PropOllama Analysis"})]}),i.jsx("p",{className:"text-xs text-gray-300 leading-relaxed",children:L.llmReasoning})]}),L.expectedValue&&L.expectedValue>0&&i.jsxs("div",{className:"flex items-center justify-between text-xs",children:[i.jsx("span",{className:"text-gray-400",children:"Expected Value:"}),i.jsxs("span",{className:"text-green-400 font-mono",children:["+",(L.expectedValue*100).toFixed(1),"%"]})]})]})]},L.id)})}),t.size>0&&i.jsxs(Y.div,{className:"fixed bottom-6 right-6 bg-gray-900/95 backdrop-blur-sm rounded-2xl p-6 border border-electric-500/30 max-w-sm",initial:{x:400,opacity:0},animate:{x:0,opacity:1},exit:{x:400,opacity:0},children:[i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsx("h3",{className:"text-lg font-bold text-white",children:"Entry Summary"}),i.jsxs("div",{className:"text-electric-400 font-mono",children:[t.size,"/6"]})]}),i.jsxs("div",{className:"space-y-3 mb-4",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"Entry:"}),i.jsxs("span",{className:"text-white font-mono",children:["$",r]})]}),i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400",children:"Payout:"}),i.jsxs("span",{className:"text-electric-400 font-mono",children:["$",I().toFixed(2)]})]}),i.jsx("div",{className:"text-sm text-purple-400",children:z()})]}),a.length>0&&i.jsx("div",{className:"bg-red-900/30 rounded-lg p-3 mb-4",children:a.map(L=>i.jsx("div",{className:"text-red-400 text-sm",children:L},L))}),i.jsxs("div",{className:"flex space-x-2",children:[i.jsx(Y.button,{onClick:()=>n(new Map),className:"flex-1 py-2 px-4 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors",whileHover:{scale:1.05},whileTap:{scale:.95},children:"Clear"}),i.jsx(Y.button,{onClick:()=>d(!0),disabled:!T(t),className:"flex-1 py-2 px-4 bg-electric-500 text-black rounded-lg hover:bg-electric-400 disabled:bg-gray-600 disabled:text-gray-400 transition-colors",whileHover:{scale:1.05},whileTap:{scale:.95},children:"Save"})]})]}),i.jsxs(fn,{children:[u&&i.jsx(Y.div,{initial:{opacity:0},animate:{opacity:1},exit:{opacity:0},className:"fixed inset-0 bg-black/50 flex items-center justify-center z-50",children:i.jsxs(Y.div,{initial:{scale:.9,opacity:0},animate:{scale:1,opacity:1},exit:{scale:.9,opacity:0},className:"bg-gray-900 rounded-2xl p-6 border border-gray-700 max-w-md w-full mx-4",children:[i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsx("h3",{className:"text-xl font-bold text-white",children:"Save Lineup"}),i.jsx("button",{onClick:()=>d(!1),className:"text-gray-400 hover:text-white",children:i.jsx(zg,{className:"w-5 h-5"})})]}),i.jsx("input",{type:"text",value:h,onChange:L=>p(L.target.value),placeholder:"Enter lineup name...",className:"w-full p-3 bg-gray-800 text-white rounded-lg border border-gray-600 focus:border-electric-500 outline-none mb-4",autoFocus:!0}),i.jsxs("div",{className:"flex space-x-3",children:[i.jsx("button",{onClick:()=>d(!1),className:"flex-1 py-2 px-4 bg-gray-700 text-white rounded-lg hover:bg-gray-600",children:"Cancel"}),i.jsx("button",{onClick:J,className:"flex-1 py-2 px-4 bg-electric-500 text-black rounded-lg hover:bg-electric-400",children:"Save"})]})]})}),x&&i.jsx(Y.div,{initial:{opacity:0,y:50},animate:{opacity:1,y:0},exit:{opacity:0,y:50},className:"fixed bottom-6 left-6 bg-green-500/20 border border-green-500 rounded-lg p-4 backdrop-blur-sm",children:i.jsxs("div",{className:"flex items-center space-x-2 text-green-400",children:[i.jsx(Vg,{className:"w-5 h-5"}),i.jsx("span",{className:"font-bold",children:"Success! Lineup saved."})]})})]})]})},GS=()=>{const[t,n]=E.useState([{id:1,type:"assistant",content:"Welcome to PropGPT Quantum Neural Interface! I'm powered by 47 neural networks and quantum processing. I continuously learn from every interaction to provide better insights. Ask about props, strategies, or market analysis.",timestamp:new Date}]),[r,a]=E.useState(""),[l,u]=E.useState([]),[d]=E.useState(()=>`conv_${Date.now()}_${Math.random().toString(36).substr(2,9)}`),[h,p]=E.useState(!1),[g,x]=E.useState(!1),[y,b]=E.useState(""),[N,w]=E.useState([]),j=()=>{if(!y.trim()){br.error("Please enter a lineup name");return}if(N.length===0){br.error("No AI recommendations to save");return}const T=N.map((V,I)=>({id:`ai_pick_${I}`,description:V,confidence:85+Math.random()*10}));Mt.savePropOllamaLineup(y,T,100,500,85+Math.random()*10),br.success(`🤖 PropOllama lineup "${y}" saved!`,{duration:3e3,style:{background:"#1f2937",color:"#3b82f6",border:"1px solid #3b82f6"}}),x(!1),b("")},S=async()=>{if(!r.trim())return;const T={id:Date.now(),type:"user",content:r,timestamp:new Date};n(V=>[...V,T]),u(V=>[...V.slice(-10),r.toLowerCase()]),a(""),p(!0),new Date().toISOString();try{setTimeout(()=>{const V={id:Date.now()+1,type:"assistant",content:C(r,l),timestamp:new Date};n(I=>[...I,V]),p(!1)},1500)}catch(V){console.error("PropGPT LLM Error:",V),p(!1)}},C=(T,V)=>{const I=T.toLowerCase(),z=V.some(L=>L.includes("lebron"));if(V.some(L=>L.includes("strategy")||L.includes("bet")),I.includes("lebron")||I.includes("james"))return`🏀 **LeBron James Neural Analysis**
frontend\dist\assets\index-D90EmcIk.js:491:• Weather and venue factors`];return J[Math.floor(Math.random()*J.length)]},F=[{name:"NEURAL ANALYSIS",icon:et,color:"from-purple-500 to-blue-500",action:"Analyze current props with neural networks"},{name:"LIVE MARKETS",icon:$d,color:"from-green-500 to-teal-500",action:"Show me live betting opportunities"},{name:"VALUE DETECTION",icon:Ho,color:"from-orange-500 to-red-500",action:"Find props with highest expected value"},{name:"STRATEGY AI",icon:ls,color:"from-cyan-500 to-blue-500",action:"Help me build an optimal strategy"}];return i.jsxs(Y.div,{className:"space-y-8 animate-slide-in-up",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center mb-8",children:[i.jsx("h1",{className:"holographic text-6xl font-black mb-4 font-cyber",children:"PROPGPT QUANTUM"}),i.jsx("p",{className:"text-2xl text-gray-400 font-mono mb-8",children:"Neural Sports Intelligence Assistant"}),i.jsxs("div",{className:"grid grid-cols-4 gap-8 mb-8",children:[i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-4xl font-bold text-electric-400 font-cyber",children:"247"}),i.jsx("div",{className:"text-gray-400 font-mono text-sm",children:"Neural Networks"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-4xl font-bold text-purple-400 font-cyber",children:"24.7"}),i.jsx("div",{className:"text-gray-400 font-mono text-sm",children:"Processing Speed"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-4xl font-bold text-green-400 font-cyber",children:"91.5%"}),i.jsx("div",{className:"text-gray-400 font-mono text-sm",children:"Accuracy"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-4xl font-bold text-cyan-400 font-cyber",children:"<1ms"}),i.jsx("div",{className:"text-gray-400 font-mono text-sm",children:"Response Time"})]})]})]}),i.jsxs("div",{className:"quantum-card rounded-3xl p-8 min-h-[500px] flex flex-col",children:[i.jsxs("div",{className:"flex-1 space-y-6 mb-6 overflow-y-auto max-h-[400px]",children:[t.map(T=>i.jsx(Y.div,{initial:{opacity:0,y:10},animate:{opacity:1,y:0},className:`flex ${T.type==="user"?"justify-end":"justify-start"}`,children:i.jsxs("div",{className:`flex items-start space-x-3 max-w-[80%] ${T.type==="user"?"flex-row-reverse space-x-reverse":""}`,children:[i.jsx("div",{className:`w-10 h-10 rounded-xl flex items-center justify-center ${T.type==="user"?"bg-gradient-to-br from-electric-400 to-cyan-400":"bg-gradient-to-br from-purple-500 to-blue-500"}`,children:T.type==="user"?i.jsx("span",{className:"text-black font-bold text-sm",children:"U"}):i.jsx(et,{className:"w-5 h-5 text-white"})}),i.jsxs("div",{className:`p-4 rounded-2xl ${T.type==="user"?"bg-electric-500/20 border border-electric-500/30":"bg-purple-500/20 border border-purple-500/30"}`,children:[i.jsx("div",{className:"text-white whitespace-pre-line",children:T.content}),i.jsx("div",{className:"text-xs text-gray-400 mt-2",children:T.timestamp.toLocaleTimeString()})]})]})},T.id)),h&&i.jsx(Y.div,{initial:{opacity:0,y:10},animate:{opacity:1,y:0},className:"flex justify-start",children:i.jsxs("div",{className:"flex items-start space-x-3",children:[i.jsx("div",{className:"w-10 h-10 rounded-xl bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center",children:i.jsx(et,{className:"w-5 h-5 text-white animate-pulse"})}),i.jsx("div",{className:"p-4 rounded-2xl bg-purple-500/20 border border-purple-500/30",children:i.jsxs("div",{className:"flex space-x-1",children:[i.jsx("div",{className:"w-2 h-2 bg-purple-400 rounded-full animate-bounce"}),i.jsx("div",{className:"w-2 h-2 bg-purple-400 rounded-full animate-bounce",style:{animationDelay:"0.1s"}}),i.jsx("div",{className:"w-2 h-2 bg-purple-400 rounded-full animate-bounce",style:{animationDelay:"0.2s"}})]})})]})})]}),i.jsxs("div",{className:"border-t border-white/10 pt-6",children:[i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"Neural conversation analysis active"}),i.jsxs("button",{onClick:()=>x(!0),className:"flex items-center space-x-2 px-4 py-2 bg-blue-500/20 text-blue-400 border border-blue-500/30 rounded-lg hover:bg-blue-500/30 transition-all",children:[i.jsx(qd,{className:"w-4 h-4"}),i.jsx("span",{children:"Save Analysis"})]})]}),i.jsxs("div",{className:"flex space-x-4",children:[i.jsx("input",{value:r,onChange:T=>a(T.target.value),onKeyPress:T=>T.key==="Enter"&&S(),placeholder:"Ask about props, strategies, or market analysis...",className:"flex-1 p-4 rounded-2xl bg-gray-800/50 border border-gray-600 focus:border-electric-500 focus:outline-none text-white placeholder-gray-400"}),i.jsx(Y.button,{onClick:S,disabled:!r.trim()||h,className:"px-6 py-4 bg-gradient-to-r from-electric-500 to-purple-500 text-white rounded-2xl hover:from-electric-400 hover:to-purple-400 transition-all disabled:opacity-50 disabled:cursor-not-allowed",whileHover:{scale:1.05},whileTap:{scale:.95},children:i.jsx(R2,{className:"w-5 h-5"})})]})]})]}),i.jsx("div",{className:"grid grid-cols-4 gap-6",children:F.map((T,V)=>{const I=T.icon;return i.jsxs(Y.button,{onClick:()=>a(T.action),className:`p-6 rounded-2xl bg-gradient-to-br ${T.color} hover:scale-105 transition-all duration-300 group`,whileHover:{scale:1.05},whileTap:{scale:.95},children:[i.jsx(I,{className:"w-8 h-8 text-white mb-3 mx-auto group-hover:animate-pulse"}),i.jsx("div",{className:"text-white font-bold text-sm font-cyber",children:T.name})]},V)})}),g&&i.jsx(Y.div,{initial:{opacity:0},animate:{opacity:1},className:"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4",onClick:()=>x(!1),children:i.jsxs(Y.div,{initial:{scale:.9,opacity:0},animate:{scale:1,opacity:1},className:"quantum-card rounded-2xl p-8 max-w-md w-full",onClick:T=>T.stopPropagation(),children:[i.jsx("h3",{className:"text-2xl font-bold text-blue-400 mb-6 font-cyber",children:"SAVE AI ANALYSIS"}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{children:[i.jsx("label",{className:"block text-sm font-bold mb-2 text-gray-300",children:"Analysis Name"}),i.jsx("input",{type:"text",value:y,onChange:T=>b(T.target.value),placeholder:"Enter analysis name...",className:"w-full p-3 rounded-lg bg-gray-800/50 border border-gray-600 text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"})]}),i.jsx("div",{className:"text-sm text-gray-400",children:"This will save your current AI conversation as a lineup for tracking."}),i.jsxs("div",{className:"flex space-x-4 pt-4",children:[i.jsx("button",{onClick:j,className:"flex-1 py-3 bg-blue-500 text-white font-bold rounded-lg hover:bg-blue-400 transition-all",children:"Save Analysis"}),i.jsx("button",{onClick:()=>x(!1),className:"flex-1 py-3 bg-gray-600 text-white font-bold rounded-lg hover:bg-gray-500 transition-all",children:"Cancel"})]})]})]})})]})},YS=()=>{const{filters:t,updateFilters:n}=Kg(),{totalItems:r,filteredItems:a}=Gg(t,847),[l,u]=E.useState([]),[d,h]=E.useState([]),[p,g]=E.useState([]),[x,y]=E.useState("overview");E.useEffect(()=>{const w=[{sport:"NBA",metric:"Avg Total Points",value:224.7,change:2.3,trend:"up",confidence:94.2,volume:15847},{sport:"NFL",metric:"Money Line Movement",value:-110,change:-5,trend:"down",confidence:87.9,volume:23145},{sport:"MLB",metric:"Over/Under %",value:67.3,change:1.8,trend:"up",confidence:91.6,volume:8932},{sport:"NHL",metric:"Puck Line Spread",value:1.5,change:0,trend:"stable",confidence:89.1,volume:5643},{sport:"Soccer",metric:"Goal Line Average",value:2.75,change:.15,trend:"up",confidence:92.4,volume:12378},{sport:"Tennis",metric:"Set Betting Edge",value:4.2,change:-.3,trend:"down",confidence:85.7,volume:3567}],j=[{id:"1",type:"arbitrage",sport:"NBA",market:"Lakers vs Warriors",opportunity:"2.3% arbitrage",edge:2.3,timeLeft:45,confidence:96.8},{id:"2",type:"value",sport:"NFL",market:"Chiefs -3.5",opportunity:"Value bet +EV 12%",edge:12,timeLeft:120,confidence:89.2},{id:"3",type:"steam",sport:"MLB",market:"Yankees ML",opportunity:"Steam move detected",edge:5.7,timeLeft:30,confidence:94.1},{id:"4",type:"reverse",sport:"NHL",market:"Bruins O5.5",opportunity:"Reverse line movement",edge:3.9,timeLeft:75,confidence:87.5}],S=[{sport:"NBA",bullish:68,bearish:24,neutral:8,socialVolume:45231,newsCount:127},{sport:"NFL",bullish:72,bearish:19,neutral:9,socialVolume:78945,newsCount:203},{sport:"MLB",bullish:45,bearish:38,neutral:17,socialVolume:23456,newsCount:89},{sport:"NHL",bullish:52,bearish:33,neutral:15,socialVolume:12789,newsCount:56},{sport:"Soccer",bullish:61,bearish:29,neutral:10,socialVolume:34567,newsCount:145}];u(w),h(j),g(S)},[]);const b=w=>{switch(w){case"up":return i.jsx(ls,{className:"w-4 h-4 text-green-400"});case"down":return i.jsx(Wd,{className:"w-4 h-4 text-red-400"});default:return i.jsx(os,{className:"w-4 h-4 text-gray-400"})}},N=w=>{switch(w){case"arbitrage":return"text-green-400 bg-green-500/20 border-green-500/40";case"value":return"text-blue-400 bg-blue-500/20 border-blue-500/40";case"steam":return"text-yellow-400 bg-yellow-500/20 border-yellow-500/40";case"reverse":return"text-purple-400 bg-purple-500/20 border-purple-500/40";default:return"text-gray-400 bg-gray-500/20 border-gray-500/40"}};return i.jsxs(Y.div,{className:"space-y-8 animate-slide-in-up p-8",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"relative mb-6",children:[i.jsx("div",{className:"absolute inset-0 bg-pink-400/20 blur-3xl rounded-full"}),i.jsx("div",{className:"relative text-6xl text-pink-400 float-element",children:"📈"})]}),i.jsx("h1",{className:"holographic text-5xl font-black mb-4 font-cyber",children:"MARKET INTELLIGENCE"}),i.jsx("p",{className:"text-xl text-gray-400 font-mono",children:"Advanced market analysis with neural sentiment processing"})]}),i.jsx(Qg,{filters:t,onFiltersChange:n,totalGames:r,filteredGames:a,className:"border border-pink-500/20 shadow-neon"}),i.jsx("div",{className:"flex justify-center space-x-4 mb-8",children:[{id:"overview",label:"Market Overview",icon:os},{id:"opportunities",label:"Live Opportunities",icon:Ho},{id:"sentiment",label:"Market Sentiment",icon:et},{id:"analysis",label:"Deep Analysis",icon:$d}].map(w=>{const j=w.icon;return i.jsxs(Y.button,{onClick:()=>y(w.id),className:`flex items-center space-x-2 px-6 py-3 rounded-xl border transition-all ${x===w.id?"bg-pink-500/20 border-pink-500/40 text-pink-400":"bg-gray-800/40 border-gray-600/40 text-gray-300 hover:border-gray-500/60"}`,whileHover:{scale:1.02},whileTap:{scale:.98},children:[i.jsx(j,{className:"w-4 h-4"}),i.jsx("span",{className:"font-mono text-sm",children:w.label})]},w.id)})}),i.jsxs(fn,{mode:"wait",children:[x==="overview"&&i.jsxs(Y.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},className:"space-y-8",children:[i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",children:l.map((w,j)=>i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl border border-pink-500/20 hover:shadow-neon transition-all",whileHover:{scale:1.02},children:[i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsx("span",{className:"text-pink-400 font-bold font-cyber",children:w.sport}),b(w.trend)]}),i.jsxs("div",{className:"space-y-2",children:[i.jsx("div",{className:"text-white font-bold",children:w.metric}),i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx("span",{className:"text-2xl font-bold text-electric-400 font-cyber",children:w.value}),i.jsxs("span",{className:`text-sm font-mono ${w.change>0?"text-green-400":w.change<0?"text-red-400":"text-gray-400"}`,children:[w.change>0?"+":"",w.change]})]}),i.jsxs("div",{className:"flex justify-between text-sm",children:[i.jsxs("span",{className:"text-gray-400 font-mono",children:["Vol: ",w.volume.toLocaleString()]}),i.jsxs("span",{className:"text-cyan-400 font-mono",children:[w.confidence,"% conf"]})]})]})]},j))}),i.jsxs("div",{className:"quantum-card p-8 rounded-2xl border border-electric-500/20",children:[i.jsx("h3",{className:"text-2xl font-bold text-electric-400 font-cyber mb-6",children:"MARKET SUMMARY"}),i.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 gap-8",children:[i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-3xl font-bold text-green-400 font-cyber mb-2",children:a}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Active Markets"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-3xl font-bold text-yellow-400 font-cyber mb-2",children:d.length}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Live Opportunities"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-3xl font-bold text-purple-400 font-cyber mb-2",children:"94.7%"}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Model Accuracy"})]}),i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"text-3xl font-bold text-cyan-400 font-cyber mb-2",children:"$2.4M"}),i.jsx("div",{className:"text-gray-400 font-mono",children:"Market Volume"})]})]})]})]},"overview"),x==="opportunities"&&i.jsxs(Y.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},className:"space-y-6",children:[i.jsxs("div",{className:"flex items-center justify-between",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"LIVE OPPORTUNITIES"}),i.jsxs("button",{className:"flex items-center space-x-2 px-4 py-2 bg-electric-500/20 text-electric-400 rounded-lg hover:bg-electric-500/30 transition-all",children:[i.jsx(Vi,{className:"w-4 h-4"}),i.jsx("span",{className:"font-mono",children:"Refresh"})]})]}),i.jsx("div",{className:"grid gap-4",children:d.map(w=>i.jsx(Y.div,{className:`quantum-card p-6 rounded-2xl border ${N(w.type)}`,whileHover:{scale:1.01},children:i.jsxs("div",{className:"flex items-center justify-between",children:[i.jsxs("div",{className:"flex-1",children:[i.jsxs("div",{className:"flex items-center space-x-3 mb-2",children:[i.jsx("span",{className:"font-bold font-cyber text-white",children:w.sport}),i.jsx("span",{className:`px-2 py-1 rounded text-xs font-mono font-bold ${N(w.type)}`,children:w.type.toUpperCase()}),i.jsx("span",{className:"text-gray-400 font-mono",children:w.market})]}),i.jsx("div",{className:"text-lg font-bold text-white mb-1",children:w.opportunity}),i.jsxs("div",{className:"flex items-center space-x-4 text-sm",children:[i.jsxs("span",{className:"text-green-400 font-mono",children:["+",w.edge,"% Edge"]}),i.jsxs("span",{className:"text-cyan-400 font-mono",children:[w.confidence,"% Confidence"]})]})]}),i.jsxs("div",{className:"text-right",children:[i.jsxs("div",{className:"text-orange-400 font-bold font-mono",children:[w.timeLeft,"min"]}),i.jsx("div",{className:"text-gray-400 text-xs font-mono",children:"Time Left"})]})]})},w.id))})]},"opportunities"),x==="sentiment"&&i.jsxs(Y.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"MARKET SENTIMENT ANALYSIS"}),i.jsx("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:p.map((w,j)=>i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-brain-500/20",children:[i.jsxs("div",{className:"flex items-center justify-between mb-4",children:[i.jsx("h4",{className:"text-xl font-bold text-white font-cyber",children:w.sport}),i.jsxs("div",{className:"text-sm text-gray-400 font-mono",children:["Vol: ",w.socialVolume.toLocaleString()]})]}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"space-y-2",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-green-400 font-mono",children:"Bullish"}),i.jsxs("span",{className:"text-green-400 font-mono",children:[w.bullish,"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-green-400 h-2 rounded-full",style:{width:`${w.bullish}%`}})})]}),i.jsxs("div",{className:"space-y-2",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-red-400 font-mono",children:"Bearish"}),i.jsxs("span",{className:"text-red-400 font-mono",children:[w.bearish,"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-red-400 h-2 rounded-full",style:{width:`${w.bearish}%`}})})]}),i.jsxs("div",{className:"space-y-2",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-400 font-mono",children:"Neutral"}),i.jsxs("span",{className:"text-gray-400 font-mono",children:[w.neutral,"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-gray-400 h-2 rounded-full",style:{width:`${w.neutral}%`}})})]}),i.jsxs("div",{className:"flex justify-between pt-2 border-t border-gray-600",children:[i.jsx("span",{className:"text-electric-400 font-mono",children:"News Articles"}),i.jsx("span",{className:"text-electric-400 font-mono",children:w.newsCount})]})]})]},j))})]},"sentiment"),x==="analysis"&&i.jsxs(Y.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},className:"space-y-6",children:[i.jsx("h3",{className:"text-2xl font-bold text-white font-cyber",children:"DEEP MARKET ANALYSIS"}),i.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-8",children:[i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-purple-500/20",children:[i.jsxs("h4",{className:"text-lg font-bold text-purple-400 font-cyber mb-4 flex items-center",children:[i.jsx(et,{className:"w-5 h-5 mr-2"}),"AI MARKET INSIGHTS"]}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"p-4 bg-gray-800/40 rounded-lg",children:[i.jsx("div",{className:"font-bold text-white mb-2",children:"NFL Market Trend"}),i.jsx("div",{className:"text-gray-300 text-sm font-mono",children:"Detecting unusual money movement on Chiefs -3.5. Sharp money indicators suggest value opportunity."}),i.jsx("div",{className:"text-green-400 text-xs font-mono mt-2",children:"Confidence: 92.4%"})]}),i.jsxs("div",{className:"p-4 bg-gray-800/40 rounded-lg",children:[i.jsx("div",{className:"font-bold text-white mb-2",children:"NBA Over/Under Pattern"}),i.jsx("div",{className:"text-gray-300 text-sm font-mono",children:"Totals trending higher across Western Conference games. Weather and rest factors analysis."}),i.jsx("div",{className:"text-yellow-400 text-xs font-mono mt-2",children:"Confidence: 87.9%"})]}),i.jsxs("div",{className:"p-4 bg-gray-800/40 rounded-lg",children:[i.jsx("div",{className:"font-bold text-white mb-2",children:"Arbitrage Alert"}),i.jsx("div",{className:"text-gray-300 text-sm font-mono",children:"2.3% arbitrage detected on Lakers ML across three books. Execute within 15 minutes."}),i.jsx("div",{className:"text-green-400 text-xs font-mono mt-2",children:"Confidence: 96.8%"})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-cyan-500/20",children:[i.jsxs("h4",{className:"text-lg font-bold text-cyan-400 font-cyber mb-4 flex items-center",children:[i.jsx(zo,{className:"w-5 h-5 mr-2"}),"NEURAL NETWORK STATUS"]}),i.jsx("div",{className:"space-y-4",children:[{name:"Market Pattern Recognition",status:94.7,color:"green"},{name:"Sentiment Analysis Engine",status:91.2,color:"blue"},{name:"Arbitrage Detection",status:97.8,color:"cyan"},{name:"Value Bet Identification",status:89.5,color:"purple"},{name:"Steam Move Detector",status:92.1,color:"yellow"}].map((w,j)=>i.jsxs("div",{className:"space-y-2",children:[i.jsxs("div",{className:"flex justify-between",children:[i.jsx("span",{className:"text-gray-300 font-mono text-sm",children:w.name}),i.jsxs("span",{className:`text-${w.color}-400 font-mono text-sm`,children:[w.status,"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:`bg-${w.color}-400 h-2 rounded-full transition-all duration-500`,style:{width:`${w.status}%`}})})]},j))})]})]})]},"analysis")]})]})};function Xg(t,n){return function(){return t.apply(n,arguments)}}const{toString:XS}=Object.prototype,{getPrototypeOf:Kd}=Object,{iterator:Qo,toStringTag:Jg}=Symbol,Ko=(t=>n=>{const r=XS.call(n);return t[r]||(t[r]=r.slice(8,-1).toLowerCase())})(Object.create(null)),en=t=>(t=t.toLowerCase(),n=>Ko(n)===t),Go=t=>n=>typeof n===t,{isArray:Or}=Array,$i=Go("undefined");function JS(t){return t!==null&&!$i(t)&&t.constructor!==null&&!$i(t.constructor)&&St(t.constructor.isBuffer)&&t.constructor.isBuffer(t)}const Zg=en("ArrayBuffer");function ZS(t){let n;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?n=ArrayBuffer.isView(t):n=t&&t.buffer&&Zg(t.buffer),n}const ek=Go("string"),St=Go("function"),ey=Go("number"),Yo=t=>t!==null&&typeof t=="object",tk=t=>t===!0||t===!1,ko=t=>{if(Ko(t)!=="object")return!1;const n=Kd(t);return(n===null||n===Object.prototype||Object.getPrototypeOf(n)===null)&&!(Jg in t)&&!(Qo in t)},nk=en("Date"),sk=en("File"),rk=en("Blob"),ik=en("FileList"),ak=t=>Yo(t)&&St(t.pipe),ok=t=>{let n;return t&&(typeof FormData=="function"&&t instanceof FormData||St(t.append)&&((n=Ko(t))==="formdata"||n==="object"&&St(t.toString)&&t.toString()==="[object FormData]"))},lk=en("URLSearchParams"),[ck,uk,dk,fk]=["ReadableStream","Request","Response","Headers"].map(en),hk=t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function Ji(t,n,{allOwnKeys:r=!1}={}){if(t===null||typeof t>"u")return;let a,l;if(typeof t!="object"&&(t=[t]),Or(t))for(a=0,l=t.length;a<l;a++)n.call(null,t[a],a,t);else{const u=r?Object.getOwnPropertyNames(t):Object.keys(t),d=u.length;let h;for(a=0;a<d;a++)h=u[a],n.call(null,t[h],h,t)}}function ty(t,n){n=n.toLowerCase();const r=Object.keys(t);let a=r.length,l;for(;a-- >0;)if(l=r[a],n===l.toLowerCase())return l;return null}const As=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,ny=t=>!$i(t)&&t!==As;function Yu(){const{caseless:t}=ny(this)&&this||{},n={},r=(a,l)=>{const u=t&&ty(n,l)||l;ko(n[u])&&ko(a)?n[u]=Yu(n[u],a):ko(a)?n[u]=Yu({},a):Or(a)?n[u]=a.slice():n[u]=a};for(let a=0,l=arguments.length;a<l;a++)arguments[a]&&Ji(arguments[a],r);return n}const mk=(t,n,r,{allOwnKeys:a}={})=>(Ji(n,(l,u)=>{r&&St(l)?t[u]=Xg(l,r):t[u]=l},{allOwnKeys:a}),t),pk=t=>(t.charCodeAt(0)===65279&&(t=t.slice(1)),t),xk=(t,n,r,a)=>{t.prototype=Object.create(n.prototype,a),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:n.prototype}),r&&Object.assign(t.prototype,r)},gk=(t,n,r,a)=>{let l,u,d;const h={};if(n=n||{},t==null)return n;do{for(l=Object.getOwnPropertyNames(t),u=l.length;u-- >0;)d=l[u],(!a||a(d,t,n))&&!h[d]&&(n[d]=t[d],h[d]=!0);t=r!==!1&&Kd(t)}while(t&&(!r||r(t,n))&&t!==Object.prototype);return n},yk=(t,n,r)=>{t=String(t),(r===void 0||r>t.length)&&(r=t.length),r-=n.length;const a=t.indexOf(n,r);return a!==-1&&a===r},vk=t=>{if(!t)return null;if(Or(t))return t;let n=t.length;if(!ey(n))return null;const r=new Array(n);for(;n-- >0;)r[n]=t[n];return r},bk=(t=>n=>t&&n instanceof t)(typeof Uint8Array<"u"&&Kd(Uint8Array)),wk=(t,n)=>{const a=(t&&t[Qo]).call(t);let l;for(;(l=a.next())&&!l.done;){const u=l.value;n.call(t,u[0],u[1])}},Nk=(t,n)=>{let r;const a=[];for(;(r=t.exec(n))!==null;)a.push(r);return a},jk=en("HTMLFormElement"),Sk=t=>t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(r,a,l){return a.toUpperCase()+l}),C0=(({hasOwnProperty:t})=>(n,r)=>t.call(n,r))(Object.prototype),kk=en("RegExp"),sy=(t,n)=>{const r=Object.getOwnPropertyDescriptors(t),a={};Ji(r,(l,u)=>{let d;(d=n(l,u,t))!==!1&&(a[u]=d||l)}),Object.defineProperties(t,a)},Tk=t=>{sy(t,(n,r)=>{if(St(t)&&["arguments","caller","callee"].indexOf(r)!==-1)return!1;const a=t[r];if(St(a)){if(n.enumerable=!1,"writable"in n){n.writable=!1;return}n.set||(n.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")})}})},Ck=(t,n)=>{const r={},a=l=>{l.forEach(u=>{r[u]=!0})};return Or(t)?a(t):a(String(t).split(n)),r},Pk=()=>{},Ek=(t,n)=>t!=null&&Number.isFinite(t=+t)?t:n;function Ak(t){return!!(t&&St(t.append)&&t[Jg]==="FormData"&&t[Qo])}const Mk=t=>{const n=new Array(10),r=(a,l)=>{if(Yo(a)){if(n.indexOf(a)>=0)return;if(!("toJSON"in a)){n[l]=a;const u=Or(a)?[]:{};return Ji(a,(d,h)=>{const p=r(d,l+1);!$i(p)&&(u[h]=p)}),n[l]=void 0,u}}return a};return r(t,0)},Rk=en("AsyncFunction"),Lk=t=>t&&(Yo(t)||St(t))&&St(t.then)&&St(t.catch),ry=((t,n)=>t?setImmediate:n?((r,a)=>(As.addEventListener("message",({source:l,data:u})=>{l===As&&u===r&&a.length&&a.shift()()},!1),l=>{a.push(l),As.postMessage(r,"*")}))(`axios@${Math.random()}`,[]):r=>setTimeout(r))(typeof setImmediate=="function",St(As.postMessage)),Ok=typeof queueMicrotask<"u"?queueMicrotask.bind(As):typeof process<"u"&&process.nextTick||ry,Dk=t=>t!=null&&St(t[Qo]),U={isArray:Or,isArrayBuffer:Zg,isBuffer:JS,isFormData:ok,isArrayBufferView:ZS,isString:ek,isNumber:ey,isBoolean:tk,isObject:Yo,isPlainObject:ko,isReadableStream:ck,isRequest:uk,isResponse:dk,isHeaders:fk,isUndefined:$i,isDate:nk,isFile:sk,isBlob:rk,isRegExp:kk,isFunction:St,isStream:ak,isURLSearchParams:lk,isTypedArray:bk,isFileList:ik,forEach:Ji,merge:Yu,extend:mk,trim:hk,stripBOM:pk,inherits:xk,toFlatObject:gk,kindOf:Ko,kindOfTest:en,endsWith:yk,toArray:vk,forEachEntry:wk,matchAll:Nk,isHTMLForm:jk,hasOwnProperty:C0,hasOwnProp:C0,reduceDescriptors:sy,freezeMethods:Tk,toObjectSet:Ck,toCamelCase:Sk,noop:Pk,toFiniteNumber:Ek,findKey:ty,global:As,isContextDefined:ny,isSpecCompliantForm:Ak,toJSONObject:Mk,isAsyncFn:Rk,isThenable:Lk,setImmediate:ry,asap:Ok,isIterable:Dk};function pe(t,n,r,a,l){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=t,this.name="AxiosError",n&&(this.code=n),r&&(this.config=r),a&&(this.request=a),l&&(this.response=l,this.status=l.status?l.status:null)}U.inherits(pe,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:U.toJSONObject(this.config),code:this.code,status:this.status}}});const iy=pe.prototype,ay={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(t=>{ay[t]={value:t}});Object.defineProperties(pe,ay);Object.defineProperty(iy,"isAxiosError",{value:!0});pe.from=(t,n,r,a,l,u)=>{const d=Object.create(iy);return U.toFlatObject(t,d,function(p){return p!==Error.prototype},h=>h!=="isAxiosError"),pe.call(d,t.message,n,r,a,l),d.cause=t,d.name=t.name,u&&Object.assign(d,u),d};const _k=null;function Xu(t){return U.isPlainObject(t)||U.isArray(t)}function oy(t){return U.endsWith(t,"[]")?t.slice(0,-2):t}function P0(t,n,r){return t?t.concat(n).map(function(l,u){return l=oy(l),!r&&u?"["+l+"]":l}).join(r?".":""):n}function Fk(t){return U.isArray(t)&&!t.some(Xu)}const Ik=U.toFlatObject(U,{},null,function(n){return/^is[A-Z]/.test(n)});function Xo(t,n,r){if(!U.isObject(t))throw new TypeError("target must be an object");n=n||new FormData,r=U.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,function(j,S){return!U.isUndefined(S[j])});const a=r.metaTokens,l=r.visitor||x,u=r.dots,d=r.indexes,p=(r.Blob||typeof Blob<"u"&&Blob)&&U.isSpecCompliantForm(n);if(!U.isFunction(l))throw new TypeError("visitor must be a function");function g(w){if(w===null)return"";if(U.isDate(w))return w.toISOString();if(U.isBoolean(w))return w.toString();if(!p&&U.isBlob(w))throw new pe("Blob is not supported. Use a Buffer instead.");return U.isArrayBuffer(w)||U.isTypedArray(w)?p&&typeof Blob=="function"?new Blob([w]):Buffer.from(w):w}function x(w,j,S){let C=w;if(w&&!S&&typeof w=="object"){if(U.endsWith(j,"{}"))j=a?j:j.slice(0,-2),w=JSON.stringify(w);else if(U.isArray(w)&&Fk(w)||(U.isFileList(w)||U.endsWith(j,"[]"))&&(C=U.toArray(w)))return j=oy(j),C.forEach(function(T,V){!(U.isUndefined(T)||T===null)&&n.append(d===!0?P0([j],V,u):d===null?j:j+"[]",g(T))}),!1}return Xu(w)?!0:(n.append(P0(S,j,u),g(w)),!1)}const y=[],b=Object.assign(Ik,{defaultVisitor:x,convertValue:g,isVisitable:Xu});function N(w,j){if(!U.isUndefined(w)){if(y.indexOf(w)!==-1)throw Error("Circular reference detected in "+j.join("."));y.push(w),U.forEach(w,function(C,F){(!(U.isUndefined(C)||C===null)&&l.call(n,C,U.isString(F)?F.trim():F,j,b))===!0&&N(C,j?j.concat(F):[F])}),y.pop()}}if(!U.isObject(t))throw new TypeError("data must be an object");return N(t),n}function E0(t){const n={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,function(a){return n[a]})}function Gd(t,n){this._pairs=[],t&&Xo(t,this,n)}const ly=Gd.prototype;ly.append=function(n,r){this._pairs.push([n,r])};ly.toString=function(n){const r=n?function(a){return n.call(this,a,E0)}:E0;return this._pairs.map(function(l){return r(l[0])+"="+r(l[1])},"").join("&")};function Uk(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function cy(t,n,r){if(!n)return t;const a=r&&r.encode||Uk;U.isFunction(r)&&(r={serialize:r});const l=r&&r.serialize;let u;if(l?u=l(n,r):u=U.isURLSearchParams(n)?n.toString():new Gd(n,r).toString(a),u){const d=t.indexOf("#");d!==-1&&(t=t.slice(0,d)),t+=(t.indexOf("?")===-1?"?":"&")+u}return t}class A0{constructor(){this.handlers=[]}use(n,r,a){return this.handlers.push({fulfilled:n,rejected:r,synchronous:a?a.synchronous:!1,runWhen:a?a.runWhen:null}),this.handlers.length-1}eject(n){this.handlers[n]&&(this.handlers[n]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(n){U.forEach(this.handlers,function(a){a!==null&&n(a)})}}const uy={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Vk=typeof URLSearchParams<"u"?URLSearchParams:Gd,Bk=typeof FormData<"u"?FormData:null,$k=typeof Blob<"u"?Blob:null,zk={isBrowser:!0,classes:{URLSearchParams:Vk,FormData:Bk,Blob:$k},protocols:["http","https","file","blob","url","data"]},Yd=typeof window<"u"&&typeof document<"u",Ju=typeof navigator=="object"&&navigator||void 0,qk=Yd&&(!Ju||["ReactNative","NativeScript","NS"].indexOf(Ju.product)<0),Hk=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function",Wk=Yd&&window.location.href||"http://localhost",Qk=Object.freeze(Object.defineProperty({__proto__:null,hasBrowserEnv:Yd,hasStandardBrowserEnv:qk,hasStandardBrowserWebWorkerEnv:Hk,navigator:Ju,origin:Wk},Symbol.toStringTag,{value:"Module"})),ut={...Qk,...zk};function Kk(t,n){return Xo(t,new ut.classes.URLSearchParams,Object.assign({visitor:function(r,a,l,u){return ut.isNode&&U.isBuffer(r)?(this.append(a,r.toString("base64")),!1):u.defaultVisitor.apply(this,arguments)}},n))}function Gk(t){return U.matchAll(/\w+|\[(\w*)]/g,t).map(n=>n[0]==="[]"?"":n[1]||n[0])}function Yk(t){const n={},r=Object.keys(t);let a;const l=r.length;let u;for(a=0;a<l;a++)u=r[a],n[u]=t[u];return n}function dy(t){function n(r,a,l,u){let d=r[u++];if(d==="__proto__")return!0;const h=Number.isFinite(+d),p=u>=r.length;return d=!d&&U.isArray(l)?l.length:d,p?(U.hasOwnProp(l,d)?l[d]=[l[d],a]:l[d]=a,!h):((!l[d]||!U.isObject(l[d]))&&(l[d]=[]),n(r,a,l[d],u)&&U.isArray(l[d])&&(l[d]=Yk(l[d])),!h)}if(U.isFormData(t)&&U.isFunction(t.entries)){const r={};return U.forEachEntry(t,(a,l)=>{n(Gk(a),l,r,0)}),r}return null}function Xk(t,n,r){if(U.isString(t))try{return(n||JSON.parse)(t),U.trim(t)}catch(a){if(a.name!=="SyntaxError")throw a}return(r||JSON.stringify)(t)}const Zi={transitional:uy,adapter:["xhr","http","fetch"],transformRequest:[function(n,r){const a=r.getContentType()||"",l=a.indexOf("application/json")>-1,u=U.isObject(n);if(u&&U.isHTMLForm(n)&&(n=new FormData(n)),U.isFormData(n))return l?JSON.stringify(dy(n)):n;if(U.isArrayBuffer(n)||U.isBuffer(n)||U.isStream(n)||U.isFile(n)||U.isBlob(n)||U.isReadableStream(n))return n;if(U.isArrayBufferView(n))return n.buffer;if(U.isURLSearchParams(n))return r.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),n.toString();let h;if(u){if(a.indexOf("application/x-www-form-urlencoded")>-1)return Kk(n,this.formSerializer).toString();if((h=U.isFileList(n))||a.indexOf("multipart/form-data")>-1){const p=this.env&&this.env.FormData;return Xo(h?{"files[]":n}:n,p&&new p,this.formSerializer)}}return u||l?(r.setContentType("application/json",!1),Xk(n)):n}],transformResponse:[function(n){const r=this.transitional||Zi.transitional,a=r&&r.forcedJSONParsing,l=this.responseType==="json";if(U.isResponse(n)||U.isReadableStream(n))return n;if(n&&U.isString(n)&&(a&&!this.responseType||l)){const d=!(r&&r.silentJSONParsing)&&l;try{return JSON.parse(n)}catch(h){if(d)throw h.name==="SyntaxError"?pe.from(h,pe.ERR_BAD_RESPONSE,this,null,this.response):h}}return n}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ut.classes.FormData,Blob:ut.classes.Blob},validateStatus:function(n){return n>=200&&n<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};U.forEach(["delete","get","head","post","put","patch"],t=>{Zi.headers[t]={}});const Jk=U.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Zk=t=>{const n={};let r,a,l;return t&&t.split(`
frontend\dist\assets\index-D90EmcIk.js:496:`+u):a.stack=u}catch{}}throw a}}_request(n,r){typeof n=="string"?(r=r||{},r.url=n):r=n||{},r=Vs(this.defaults,r);const{transitional:a,paramsSerializer:l,headers:u}=r;a!==void 0&&Co.assertOptions(a,{silentJSONParsing:on.transitional(on.boolean),forcedJSONParsing:on.transitional(on.boolean),clarifyTimeoutError:on.transitional(on.boolean)},!1),l!=null&&(U.isFunction(l)?r.paramsSerializer={serialize:l}:Co.assertOptions(l,{encode:on.function,serialize:on.function},!0)),r.allowAbsoluteUrls!==void 0||(this.defaults.allowAbsoluteUrls!==void 0?r.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:r.allowAbsoluteUrls=!0),Co.assertOptions(r,{baseUrl:on.spelling("baseURL"),withXsrfToken:on.spelling("withXSRFToken")},!0),r.method=(r.method||this.defaults.method||"get").toLowerCase();let d=u&&U.merge(u.common,u[r.method]);u&&U.forEach(["delete","get","head","post","put","patch","common"],w=>{delete u[w]}),r.headers=kt.concat(d,u);const h=[];let p=!0;this.interceptors.request.forEach(function(j){typeof j.runWhen=="function"&&j.runWhen(r)===!1||(p=p&&j.synchronous,h.unshift(j.fulfilled,j.rejected))});const g=[];this.interceptors.response.forEach(function(j){g.push(j.fulfilled,j.rejected)});let x,y=0,b;if(!p){const w=[I0.bind(this),void 0];for(w.unshift.apply(w,h),w.push.apply(w,g),b=w.length,x=Promise.resolve(r);y<b;)x=x.then(w[y++],w[y++]);return x}b=h.length;let N=r;for(y=0;y<b;){const w=h[y++],j=h[y++];try{N=w(N)}catch(S){j.call(this,S);break}}try{x=I0.call(this,N)}catch(w){return Promise.reject(w)}for(y=0,b=g.length;y<b;)x=x.then(g[y++],g[y++]);return x}getUri(n){n=Vs(this.defaults,n);const r=my(n.baseURL,n.url,n.allowAbsoluteUrls);return cy(r,n.params,n.paramsSerializer)}};U.forEach(["delete","get","head","options"],function(n){Us.prototype[n]=function(r,a){return this.request(Vs(a||{},{method:n,url:r,data:(a||{}).data}))}});U.forEach(["post","put","patch"],function(n){function r(a){return function(u,d,h){return this.request(Vs(h||{},{method:n,headers:a?{"Content-Type":"multipart/form-data"}:{},url:u,data:d}))}}Us.prototype[n]=r(),Us.prototype[n+"Form"]=r(!0)});let ST=class by{constructor(n){if(typeof n!="function")throw new TypeError("executor must be a function.");let r;this.promise=new Promise(function(u){r=u});const a=this;this.promise.then(l=>{if(!a._listeners)return;let u=a._listeners.length;for(;u-- >0;)a._listeners[u](l);a._listeners=null}),this.promise.then=l=>{let u;const d=new Promise(h=>{a.subscribe(h),u=h}).then(l);return d.cancel=function(){a.unsubscribe(u)},d},n(function(u,d,h){a.reason||(a.reason=new Dr(u,d,h),r(a.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(n){if(this.reason){n(this.reason);return}this._listeners?this._listeners.push(n):this._listeners=[n]}unsubscribe(n){if(!this._listeners)return;const r=this._listeners.indexOf(n);r!==-1&&this._listeners.splice(r,1)}toAbortSignal(){const n=new AbortController,r=a=>{n.abort(a)};return this.subscribe(r),n.signal.unsubscribe=()=>this.unsubscribe(r),n.signal}static source(){let n;return{token:new by(function(l){n=l}),cancel:n}}};function kT(t){return function(r){return t.apply(null,r)}}function TT(t){return U.isObject(t)&&t.isAxiosError===!0}const td={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(td).forEach(([t,n])=>{td[n]=t});function wy(t){const n=new Us(t),r=Xg(Us.prototype.request,n);return U.extend(r,Us.prototype,n,{allOwnKeys:!0}),U.extend(r,n,null,{allOwnKeys:!0}),r.create=function(l){return wy(Vs(t,l))},r}const We=wy(Zi);We.Axios=Us;We.CanceledError=Dr;We.CancelToken=ST;We.isCancel=fy;We.VERSION=vy;We.toFormData=Xo;We.AxiosError=pe;We.Cancel=We.CanceledError;We.all=function(n){return Promise.all(n)};We.spread=kT;We.isAxiosError=TT;We.mergeConfig=Vs;We.AxiosHeaders=kt;We.formToJSON=t=>dy(U.isHTMLForm(t)?new FormData(t):t);We.getAdapter=yy.getAdapter;We.HttpStatusCode=td;We.default=We;const{Axios:nC,AxiosError:sC,CanceledError:rC,isCancel:iC,CancelToken:aC,VERSION:oC,all:lC,Cancel:cC,isAxiosError:uC,spread:dC,toFormData:fC,AxiosHeaders:hC,HttpStatusCode:mC,formToJSON:pC,getAdapter:xC,mergeConfig:gC}=We;class CT{constructor(){Ve(this,"client");Ve(this,"baseURL");this.baseURL="http://localhost:8000",this.client=We.create({baseURL:this.baseURL,timeout:3e4,headers:{"Content-Type":"application/json"}}),this.setupInterceptors()}setupInterceptors(){this.client.interceptors.request.use(n=>{const r=localStorage.getItem("auth_token");return r&&(n.headers.Authorization=`Bearer ${r}`),n},n=>Promise.reject(n)),this.client.interceptors.response.use(n=>n,n=>{var r;return((r=n.response)==null?void 0:r.status)===401&&(localStorage.removeItem("auth_token"),window.location.href="/login"),Promise.reject(n)})}async getHealth(){return(await this.client.get("/health")).data}async getDetailedHealth(){return(await this.client.get("/health/detailed")).data}async getLiveGames(n,r){const a=new URLSearchParams;return n&&a.append("sport",n),r&&a.append("date",r),(await this.client.get(`/api/v1/live-games?${a}`)).data}async getGameOdds(n,r){const a=new URLSearchParams;return r&&a.append("market",r),(await this.client.get(`/api/v1/odds/${n}?${a}`)).data}async getPlayerProps(n,r){const a=new URLSearchParams;return n&&a.append("sport",n),r&&a.append("player",r),(await this.client.get(`/api/v1/player-props?${a}`)).data}async getPlayerStats(n){return(await this.client.get(`/api/v1/player-stats/${n}`)).data}async getSportsNews(n,r){const a=new URLSearchParams;return n&&a.append("sport",n),r&&a.append("limit",r.toString()),(await this.client.get(`/api/v1/sports-news?${a}`)).data}async getPredictions(n,r){const a=new URLSearchParams;return n&&a.append("game_id",n),r&&a.append("sport",r),(await this.client.get(`/api/predictions?${a}`)).data}async getBettingOpportunities(n,r){const a=new URLSearchParams;return n&&a.append("sport",n),r&&a.append("min_value",r.toString()),(await this.client.get(`/api/betting-opportunities?${a}`)).data}async getArbitrageOpportunities(n,r){const a=new URLSearchParams;return n&&a.append("sport",n),r&&a.append("min_profit",r.toString()),(await this.client.get(`/api/arbitrage-opportunities?${a}`)).data}async getValueBets(n,r){const a=new URLSearchParams;return n&&a.append("sport",n),r&&a.append("min_value",r.toString()),(await this.client.get(`/api/value-bets?${a}`)).data}async getUserProfile(){return(await this.client.get("/api/user/profile")).data}async updateUserProfile(n){return(await this.client.put("/api/user/profile",n)).data}async placeBet(n){return(await this.client.post("/api/place-bet",n)).data}async getUserBets(n){const r=new URLSearchParams;return n&&r.append("status",n),(await this.client.get(`/api/user/bets?${r}`)).data}async getAnalytics(n){const r=new URLSearchParams;return n&&r.append("timeframe",n),(await this.client.get(`/api/analytics?${r}`)).data}async submitFeedback(n){return(await this.client.post("/api/feedback",n)).data}async getUnifiedFeed(n){const r=new URLSearchParams;return n&&r.append("date",n),(await this.client.get(`/api/v1/unified-data?${r}`)).data}async getSportradarGames(n,r){const a=new URLSearchParams;return a.append("sport",n),r&&a.append("date",r),(await this.client.get(`/api/v1/sr/games?${a}`)).data}async getTheOddsData(n,r){const a=new URLSearchParams;return a.append("sport",n),r&&a.append("region",r),(await this.client.get(`/api/v1/the-odds/sports/${n}?${a}`)).data}async getPrizePicksProps(n){const r=new URLSearchParams;return n&&r.append("league",n),(await this.client.get(`/api/v1/prizepicks/props?${r}`)).data}async getESPNData(n){return(await this.client.get(`/api/v1/espn/${n}`)).data}connectWebSocket(n){try{const r=this.baseURL.replace("http","ws")+"/ws",a=new WebSocket(r);return a.onopen=()=>{console.log("WebSocket connected")},a.onmessage=l=>{const u=JSON.parse(l.data);n&&n(u)},a.onclose=()=>{console.log("WebSocket disconnected")},a.onerror=l=>{console.error("WebSocket error:",l)},a}catch(r){return console.error("Failed to create WebSocket connection:",r),null}}}const PT=new CT,wu=(t,n=2)=>`${(t*100).toFixed(n)}%`,ET=t=>t>=2?`+${Math.round((t-1)*100)}`:`-${Math.round(100/(t-1))}`,AT=({title:t,children:n,className:r="",glowing:a=!1,style:l={}})=>{const u={background:"rgba(255, 255, 255, 0.05)",backdropFilter:"blur(20px) saturate(180%)",border:"1px solid rgba(255, 255, 255, 0.1)",boxShadow:a?"0 0 20px rgba(0,255,136,0.6), 0 0 40px rgba(0,255,136,0.4)":"0 8px 32px rgba(0, 0, 0, 0.1)",...l};return i.jsxs("div",{className:`glass-card rounded-2xl p-6 transition-all duration-300 ${r}`,style:u,children:[t&&i.jsx("h3",{className:"text-lg font-semibold mb-4 text-electric-400",children:t}),i.jsx("div",{children:n})]})},MT=({children:t,className:n="",...r})=>i.jsx("button",{className:`ultimate-btn px-6 py-3 rounded-xl text-white font-semibold text-lg transition-all hover:scale-105 ${n}`,...r,children:t}),RT=({content:t,children:n,delay:r=300,position:a="top",className:l=""})=>{const[u,d]=E.useState(!1),[h,p]=E.useState({x:0,y:0}),g=E.useRef(null),x=E.useRef(null),y=E.useRef(null),b=()=>{g.current&&clearTimeout(g.current),g.current=setTimeout(()=>{d(!0)},r)},N=()=>{g.current&&clearTimeout(g.current),d(!1)};return E.useEffect(()=>{if(u&&y.current&&x.current){const w=y.current.getBoundingClientRect(),j=x.current.getBoundingClientRect();let S={x:0,y:0};switch(a){case"top":S={x:w.left+w.width/2-j.width/2,y:w.top-j.height-8};break;case"bottom":S={x:w.left+w.width/2-j.width/2,y:w.bottom+8};break;case"left":S={x:w.left-j.width-8,y:w.top+w.height/2-j.height/2};break;case"right":S={x:w.right+8,y:w.top+w.height/2-j.height/2};break}p(S)}},[u,a]),i.jsxs("div",{className:"relative inline-block",children:[i.jsx("div",{ref:y,onMouseEnter:b,onMouseLeave:N,onFocus:b,onBlur:N,className:"inline-block",children:n}),i.jsx(fn,{children:u&&i.jsxs(Y.div,{ref:x,initial:"hidden",animate:"visible",exit:"hidden",variants:{hidden:{opacity:0,y:5,scale:.95},visible:{opacity:1,y:0,scale:1}},transition:{duration:.2,ease:"easeOut"},className:`absolute z-50 p-3 text-sm text-white bg-gray-900 rounded-lg shadow-lg ${l}`,style:{left:`${h.x}px`,top:`${h.y}px`},children:[t,i.jsx("div",{className:"absolute w-2 h-2 bg-gray-900 transform -translate-x-1/2 -translate-y-1/2 rotate-45",style:{left:"50%",top:a==="bottom"?"0":"auto",bottom:a==="top"?"0":"auto"}})]})})]})},LT=({opportunity:t,onPlaceBet:n})=>i.jsx(AT,{children:i.jsxs("div",{className:"flex flex-col gap-4",children:[i.jsxs("div",{children:[i.jsx("h3",{className:"text-lg font-bold",children:t.event}),i.jsx("p",{className:"text-sm text-gray-400",children:t.market})]}),i.jsxs("div",{className:"grid grid-cols-2 gap-4",children:[i.jsxs("div",{className:"flex flex-col",children:[i.jsx("span",{className:"text-sm text-gray-400",children:"Odds"}),i.jsx("span",{className:"text-lg font-semibold",children:ET(t.odds)})]}),i.jsxs("div",{className:"flex flex-col",children:[i.jsx("span",{className:"text-sm text-gray-400",children:"Probability"}),i.jsx("span",{className:"text-lg font-semibold",children:wu(t.probability)})]}),i.jsxs("div",{className:"flex flex-col",children:[i.jsx("span",{className:"text-sm text-gray-400",children:"Expected Value"}),i.jsx("span",{className:"text-lg font-semibold",children:wu(t.expected_value)})]}),i.jsxs("div",{className:"flex flex-col",children:[i.jsx("span",{className:"text-sm text-gray-400",children:"Confidence"}),i.jsx("span",{className:"text-lg font-semibold",children:wu(t.confidence)})]})]}),i.jsx(RT,{content:t.recommendation,children:i.jsx(MT,{onClick:()=>n(t),children:"Place Bet"})})]})}),OT=({onBetPlaced:t})=>{const[n,r]=E.useState([]),[a,l]=E.useState(!0),[u,d]=E.useState(null);return E.useEffect(()=>{(async()=>{try{const p=await PT.getBettingOpportunities();r(p)}catch(p){d("Failed to fetch betting opportunities."),console.error(p)}l(!1)})()},[]),a?i.jsx("div",{className:"flex justify-center p-6",children:i.jsx("div",{className:"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-600"})}):u?i.jsx("div",{className:"text-red-500 text-center p-4",children:u}):n.length===0?i.jsx("div",{className:"text-center py-8 text-gray-500",children:i.jsx("p",{children:"No betting opportunities available at the moment."})}):i.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6",children:n.map(h=>i.jsx(LT,{opportunity:h,onPlaceBet:()=>t(h)},h.id))})},fr=({label:t,onClick:n,variant:r="primary",className:a="",icon:l=null,size:u="md",disabled:d=!1,loading:h=!1})=>{const p={primary:"quantum-btn",secondary:"bg-gray-700/50 hover:bg-gray-600/50 text-white border-2 border-gray-600 hover:border-gray-500 backdrop-blur-20",success:"bg-green-600/50 hover:bg-green-700/50 text-white border-2 border-green-500 backdrop-blur-20",danger:"bg-red-600/50 hover:bg-red-700/50 text-white border-2 border-red-500 backdrop-blur-20",ghost:"bg-transparent border-2 border-electric-500 text-electric-500 hover:bg-electric-500 hover:text-black backdrop-blur-20",neural:"bg-purple-600/50 hover:bg-purple-700/50 text-white border-2 border-purple-500 backdrop-blur-20"},g={sm:"px-4 py-2 text-sm",md:"px-6 py-3",lg:"px-8 py-4 text-lg",xl:"px-10 py-5 text-xl"};return i.jsxs("button",{onClick:n,disabled:d||h,className:`${g[u]} rounded-2xl font-bold transition-all duration-300 flex items-center justify-center space-x-2 ${p[r]} ${d||h?"opacity-50 cursor-not-allowed":""} ${a}`,children:[h&&i.jsx("div",{className:"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"}),!h&&l&&l,i.jsx("span",{children:t})]})},bo=({title:t,children:n,className:r="",glowing:a=!1,variant:l="default"})=>{const u={default:"quantum-card",glass:"ultra-glass",neural:"quantum-card border-purple-500/30",success:"quantum-card border-green-500/30",warning:"quantum-card border-yellow-500/30"},d=a?"shadow-neon":"";return i.jsxs("div",{className:`${u[l]} rounded-3xl p-8 ${d} ${r}`,children:[t&&i.jsxs("div",{className:"flex items-center justify-between mb-6",children:[i.jsx("h3",{className:"text-xl font-bold text-electric-400 holographic",children:t}),i.jsx("div",{className:"w-3 h-3 bg-electric-400 rounded-full animate-pulse"})]}),i.jsx("div",{children:n})]})},hr=({label:t,value:n,icon:r,change:a,trend:l="up",live:u=!1,variant:d="default"})=>{const h=l==="up"?"text-green-400":l==="down"?"text-red-400":"text-gray-400",p=l==="up"?i.jsx(ls,{size:16}):l==="down"?i.jsx(Wd,{size:16}):i.jsx(N2,{size:16}),g={default:"quantum-card",neural:"quantum-card border-purple-500/20",quantum:"quantum-card border-blue-500/20",profit:"quantum-card border-green-500/20"};return i.jsxs("div",{className:`${g[d]} rounded-2xl p-6 text-center hover:shadow-neon transition-all duration-500 transform hover:scale-105 hover:rotate-1`,children:[i.jsxs("div",{className:"relative mb-4",children:[i.jsx("div",{className:"absolute inset-0 bg-electric-400/20 rounded-full blur-xl"}),i.jsx("div",{className:`relative text-4xl text-electric-400 ${u?"brain-pulse":""}`,children:r})]}),i.jsx("div",{className:`text-3xl font-black mb-2 text-white font-cyber ${u?"animate-cyber-pulse":""}`,children:n}),i.jsx("div",{className:"text-gray-400 text-sm mb-3 uppercase tracking-wider",children:t}),a&&i.jsxs("div",{className:`flex items-center justify-center text-sm ${h} font-semibold`,children:[p,i.jsx("span",{className:"ml-1",children:a})]})]})},V0=({onNavigate:t})=>{const[n,r]=E.useState({liveGames:0,predictions:0,accuracy:0,profit:0,neuralActivity:0,quantumCoherence:0,dataPoints:0,processingSpeed:0,confidence:0,activeBots:0,winStreak:0}),[a,l]=E.useState(!0);E.useEffect(()=>{const d=async()=>{var p,g,x,y,b,N,w,j,S,C,F,T,V,I,z;try{const J=["http://localhost:8000","",window.location.origin.replace(/:\d+/,":8000")];let L=null,A=null;for(const B of J)try{console.log(`🔄 Dashboard: Trying backend: ${B}`);const[X,re]=await Promise.all([fetch(`${B}/api/health/all`),fetch(`${B}/api/analytics/advanced`)]);if(X.ok&&re.ok){L=await X.json(),A=await re.json(),console.log(`✅ Dashboard: Connected to ${B}`);break}}catch(X){console.log(`❌ Dashboard: Failed ${B}:`,X.message);continue}if(!L||!A)throw new Error("All backend URLs failed");r({liveGames:((p=L.models)==null?void 0:p.active_models)||0,predictions:((g=L.models)==null?void 0:g.predictions_today)||0,accuracy:((x=L.models)==null?void 0:x.model_accuracy)||0,profit:Math.round((((N=(b=(y=A.performance_analytics)==null?void 0:y.model_performance)==null?void 0:b.roi_trend)==null?void 0:N.slice(-1)[0])||0)*1e5),neuralActivity:((w=L.performance)==null?void 0:w.cpu_usage)||0,quantumCoherence:Math.round((((j=L.api_metrics)==null?void 0:j.cache_hit_rate)||0)*100*100)/100,dataPoints:((S=A.machine_learning_insights)==null?void 0:S.data_points_processed)||0,processingSpeed:((C=L.api_metrics)==null?void 0:C.requests_per_minute)||0,confidence:Math.round((((F=A.machine_learning_insights)==null?void 0:F.model_confidence)||0)*100*100)/100,activeBots:((T=L.models)==null?void 0:T.active_models)||0,winStreak:((z=(I=(V=A.performance_analytics)==null?void 0:V.sport_breakdown)==null?void 0:I.NBA)==null?void 0:z.volume)||0}),l(!1)}catch(J){console.error("Failed to fetch real-time data:",J),l(!1)}};d();const h=setInterval(d,3e4);return()=>clearInterval(h)},[]);const u=d=>{console.log("Bet placed on:",d)};return i.jsxs(Y.div,{className:"p-8 space-y-8 animate-slide-in-up",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"flex items-center justify-between pb-8 border-b-2 border-gray-800/50",children:[i.jsxs("div",{children:[i.jsx("h1",{className:"holographic text-5xl font-black font-cyber",children:"MASTER DASHBOARD"}),i.jsx("p",{className:"text-xl text-gray-400 font-mono",children:"Your Central Command for Sports Intelligence"})]}),i.jsxs("div",{className:"flex space-x-4",children:[i.jsx(fr,{label:"System Status",icon:i.jsx(Hd,{size:18}),variant:"secondary",onClick:()=>t("monitor")}),i.jsx(fr,{label:"Analytics",icon:i.jsx(os,{size:18}),onClick:()=>t("analytics")})]})]}),i.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6",children:[i.jsx(hr,{label:"Neural Activity",value:`${n.neuralActivity.toFixed(1)}%`,icon:i.jsx(et,{size:28}),variant:"neural",live:!0}),i.jsx(hr,{label:"Quantum Coherence",value:`${n.quantumCoherence.toFixed(2)}%`,icon:i.jsx(qo,{size:28}),variant:"quantum",live:!0}),i.jsx(hr,{label:"Profit",value:`$${(n.profit/1e3).toFixed(1)}k`,icon:i.jsx(Ui,{size:28}),change:"+2.4% DoD",variant:"profit"}),i.jsx(hr,{label:"Win Rate",value:`${n.accuracy.toFixed(1)}%`,icon:i.jsx(Bi,{size:28}),change:"+0.2% WoW"}),i.jsx(hr,{label:"Active Bots",value:n.activeBots,icon:i.jsx(l2,{size:28}),change:"Stable",trend:"stable"}),i.jsx(hr,{label:"Live Predictions",value:n.predictions.toLocaleString(),icon:i.jsx(En,{size:28}),change:"+12% DoD"})]}),i.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-3 gap-8",children:[i.jsxs("div",{className:"lg:col-span-2 space-y-8",children:[i.jsx(bo,{title:"Live Betting Opportunities",variant:"glass",glowing:!0,children:i.jsx(OT,{onBetPlaced:u})}),i.jsx(bo,{title:"Market Intelligence",variant:"default",children:i.jsx("div",{className:"h-96 bg-gray-900/50 rounded-2xl flex items-center justify-center",children:i.jsx("p",{className:"text-gray-500",children:"Market Intelligence Chart Placeholder"})})})]}),i.jsxs("div",{className:"space-y-8",children:[i.jsx(bo,{title:"Quick Actions",variant:"neural",children:i.jsxs("div",{className:"grid grid-cols-2 gap-4",children:[i.jsx(fr,{label:"PrizePicks Pro",onClick:()=>t("prizepicks"),variant:"ghost",icon:i.jsx(Bi,{size:16})}),i.jsx(fr,{label:"Money Maker",onClick:()=>t("moneymaker"),variant:"ghost",icon:i.jsx(Ui,{size:16})}),i.jsx(fr,{label:"Prop Ollama",onClick:()=>t("propollama"),variant:"ghost",icon:i.jsx(et,{size:16})}),i.jsx(fr,{label:"Lineups",onClick:()=>t("lineups"),variant:"ghost",icon:i.jsx(Y2,{size:16})})]})}),i.jsxs(bo,{title:"Performance Analytics",variant:"default",children:[i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-400",children:"Daily ROI"}),i.jsx("span",{className:"text-green-400 font-bold",children:"+1.8%"})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2.5",children:i.jsx("div",{className:"bg-green-500 h-2.5 rounded-full",style:{width:"75%"}})})]}),i.jsxs("div",{className:"space-y-4 mt-4",children:[i.jsxs("div",{className:"flex justify-between items-center",children:[i.jsx("span",{className:"text-gray-400",children:"Weekly Sharpe Ratio"}),i.jsx("span",{className:"text-blue-400 font-bold",children:"1.42"})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2.5",children:i.jsx("div",{className:"bg-blue-500 h-2.5 rounded-full",style:{width:"85%"}})})]})]})]})]})]})},DT=()=>{const[t,n]=E.useState({token:localStorage.getItem("token"),user:null,loading:!0});return E.useEffect(()=>{localStorage.getItem("token")?setTimeout(()=>{n(d=>({...d,user:{id:"1",name:"Quantum User",email:"user@quantum.ai",tier:"NEURAL",level:47,accuracy:87.3,profit:24750},loading:!1}))},1e3):n(d=>({...d,loading:!1}))},[]),{...t,login:async(u,d)=>{n(h=>({...h,loading:!0}));try{await new Promise(g=>setTimeout(g,1500));const h="mock_jwt_token_"+Date.now(),p={id:"1",name:"Quantum User",email:u,tier:"NEURAL",level:47,accuracy:87.3,profit:24750};localStorage.setItem("token",h),n({token:h,user:p,loading:!1})}catch(h){throw n(p=>({...p,loading:!1})),h}},logout:()=>{localStorage.removeItem("token"),n({token:null,user:null,loading:!1})},register:async u=>{n(d=>({...d,loading:!0}));try{await new Promise(p=>setTimeout(p,2e3));const d="mock_jwt_token_"+Date.now(),h={id:"1",name:u.name,email:u.email,tier:"STARTER",level:1,accuracy:0,profit:0};localStorage.setItem("token",d),n({token:d,user:h,loading:!1})}catch(d){throw n(h=>({...h,loading:!1})),d}}}},B0=t=>{let n;const r=new Set,a=(g,x)=>{const y=typeof g=="function"?g(n):g;if(!Object.is(y,n)){const b=n;n=x??(typeof y!="object"||y===null)?y:Object.assign({},n,y),r.forEach(N=>N(n,b))}},l=()=>n,h={setState:a,getState:l,getInitialState:()=>p,subscribe:g=>(r.add(g),()=>r.delete(g))},p=n=t(a,l,h);return h},_T=t=>t?B0(t):B0,FT=t=>t;function IT(t,n=FT){const r=dn.useSyncExternalStore(t.subscribe,()=>n(t.getState()),()=>n(t.getInitialState()));return dn.useDebugValue(r),r}const $0=t=>{const n=_T(t),r=a=>IT(n,a);return Object.assign(r,n),r},UT=t=>t?$0(t):$0,Ny=UT(t=>({toasts:[],addToast:(n,r)=>{const a=Math.random().toString(36).substr(2,9);t(l=>({toasts:[...l.toasts,{id:a,type:n,message:r}]}))},removeToast:n=>{t(r=>({toasts:r.toasts.filter(a=>a.id!==n)}))}}));class VT{constructor(){Ve(this,"listeners",{})}on(n,r){this.listeners[n]=this.listeners[n]||[],this.listeners[n].push(r)}off(n,r){this.listeners[n]&&(this.listeners[n]=this.listeners[n].filter(a=>a!==r))}emit(n,...r){(this.listeners[n]||[]).forEach(a=>a(...r))}}const Cs=class Cs extends VT{constructor(){super();Ve(this,"connections");Ve(this,"defaultConfig");this.connections=new Map,this.defaultConfig={url:"",reconnectInterval:1e3,maxRetries:5}}static getInstance(){return Cs.instance||(Cs.instance=new Cs),Cs.instance}connect(r={}){if(!fullConfig.url||fullConfig.url===""||fullConfig.url==="wss://api.betproai.com/ws"||fullConfig.url.includes("api.betproai.com")||(userId||`${Math.random().toString(36).substring(2,10)}`,this.connections.has(wsUrl)))return;const a={socket:new WebSocket(wsUrl),messageQueue:[],isConnected:!1,reconnectAttempts:0};this.setupSocketHandlers(a,fullConfig),this.connections.set(wsUrl,a)}setupSocketHandlers(r,a){const{socket:l}=r;l.onopen=()=>{r.isConnected=!0,r.reconnectAttempts=0,this.processMessageQueue(r),this.setupHeartbeat(r,a),this.emit("connected",a.url)},l.onclose=()=>{r.isConnected=!1,this.clearHeartbeat(r),this.emit("disconnected",a.url),this.handleReconnect(r,a)},l.onerror=u=>{this.emit("error",{url:a.url,error:u})},l.onmessage=u=>{try{this.emit("message",{url:a.url,message})}catch{this.emit("error",{url:a.url,error:new Error("Failed to parse WebSocket message")})}}}setupHeartbeat(r,a){r.heartbeatTimer=setInterval(()=>{r.isConnected&&this.send(a.url,{type:"ping",data:{},timestamp:Date.now()})},a.reconnectInterval)}clearHeartbeat(r){r.heartbeatTimer&&(clearInterval(r.heartbeatTimer),r.heartbeatTimer=void 0)}handleReconnect(r,a){r.reconnectAttempts<a.maxRetries?(r.reconnectAttempts++,setTimeout(()=>{this.connect(a)},a.reconnectInterval*Math.pow(2,r.reconnectAttempts-1))):this.emit("reconnect_failed",a.url)}processMessageQueue(r){for(;r.messageQueue.length>0;)message&&r.socket.send(JSON.stringify(message))}send(r,a){if(!connection)throw new Error(`No WebSocket connection found for URL: ${r}`);connection.isConnected?connection.socket.send(JSON.stringify(a)):connection.messageQueue.push(a)}disconnect(r){connection&&(this.clearHeartbeat(connection),connection.socket.close(),this.connections.delete(r))}isConnected(r){var a;return((a=this.connections.get(r))==null?void 0:a.isConnected)??!1}getConnectionStatus(){const r={};return Array.from(this.connections.entries()).forEach(([a,l])=>{r[a]=l.isConnected}),r}};Ve(Cs,"instance");let nd=Cs;const z0=nd.getInstance(),BT=({sport:t,propType:n,autoRefresh:r=!0,refreshInterval:a=3e4,minOddsChange:l=.1,onNewOpportunity:u}={})=>{const[d,h]=E.useState([]),[p,g]=E.useState([]),[x,y]=E.useState([]),[b,N]=E.useState(!0),[w,j]=E.useState(!1),[S,C]=E.useState(null),{addToast:F}=Ny(),T=E.useCallback(async()=>{try{h(propsData),y(opportunitiesData),C(null)}catch(z){C(z instanceof Error?z:new Error("Failed to fetch data")),F("error","Failed to fetch betting data")}finally{N(!1)}},[t,n,F]),V=E.useCallback(z=>{if(typeof z!="object"||z===null)return;const J=z;switch(J.type){case"prop_update":{const L=J.data;if(!L)return;h(A=>{const B=[...A],X=B.findIndex(re=>re.id===L.id);return X===-1?[...A,L]:(B[X]=L,B)});break}case"odds_update":{const L=J.data;if(!L||t&&L.sport!==t||n&&L.propType!==n)return;const A=L.oldOdds||L.odds,B=L.newOdds||L.odds,X=Math.abs(B-A);if(X<l)return;g(re=>[L,...re].slice(0,50)),X>=.5&&F("info",`Odds updated for ${L.propName||L.propId} from ${A} to ${B}`);break}case"arbitrage_alert":{const L=J.data;if(!L)return;y(A=>[L,...A].slice(0,50)),u&&u(L),F("success",`New arbitrage opportunity: ${L.description||L.id}`);break}}},[t,n,l,F,u]);return E.useEffect(()=>(z0.on("message",V),()=>{try{z0.off("message",V)}catch{}}),[V]),E.useEffect(()=>{if(T(),r){const z=setInterval(()=>{T()},a);return()=>clearInterval(z)}},[T,r,a]),{props:d,oddsUpdates:p,opportunities:x,isLoading:b,isConnected:w,error:S,refresh:()=>{N(!0),T()},notifications:[{id:"1",message:"New arbitrage opportunity detected: Lakers vs Warriors",time:"2 minutes ago",type:"opportunity"},{id:"2",message:"Neural network accuracy improved to 94.2%",time:"5 minutes ago",type:"system"}]}},Jn=class Jn{constructor(){Ve(this,"cache",null);Ve(this,"lastFetchTime",0);Ve(this,"CACHE_DURATION",5e3);Ve(this,"BASE_URL","http://localhost:8000")}static getInstance(){return Jn.instance||(Jn.instance=new Jn),Jn.instance}async fetchRealTimeData(){var r,a,l,u,d,h,p,g,x,y,b,N,w,j,S,C,F,T,V,I,z,J,L,A,B,X,re,oe,we,Ae,ge;const n=Date.now();if(this.cache&&n-this.lastFetchTime<this.CACHE_DURATION)return this.cache;try{const fe=[this.BASE_URL,"",window.location.origin.replace(/:\d+/,":8000")];let Q=null,ee=null;for(const R of fe)try{console.log(`🔄 RealTime: Trying backend: ${R}`);const[q,me]=await Promise.all([fetch(`${R}/api/health/all`),fetch(`${R}/api/analytics/advanced`)]);if(q.ok&&me.ok){Q=await q.json(),ee=await me.json(),console.log(`✅ RealTime: Connected to ${R}`);break}}catch(q){console.log(`❌ RealTime: Failed ${R}:`,q.message);continue}if(!Q||!ee)throw new Error("All backend URLs failed");const Z={liveGames:((r=Q.models)==null?void 0:r.active_models)||0,predictions:((a=Q.models)==null?void 0:a.predictions_today)||0,accuracy:((l=Q.models)==null?void 0:l.model_accuracy)||0,profit:Math.round((((h=(d=(u=ee.performance_analytics)==null?void 0:u.model_performance)==null?void 0:d.roi_trend)==null?void 0:h.slice(-1)[0])||0)*1e5),neuralActivity:((p=Q.performance)==null?void 0:p.cpu_usage)||0,quantumCoherence:Math.round((((g=Q.api_metrics)==null?void 0:g.cache_hit_rate)||0)*100*100)/100,dataPoints:((x=ee.machine_learning_insights)==null?void 0:x.data_points_processed)||0,processingSpeed:((y=Q.api_metrics)==null?void 0:y.requests_per_minute)||0,confidence:Math.round((((b=ee.machine_learning_insights)==null?void 0:b.model_confidence)||0)*100*100)/100,activeBots:((N=Q.models)==null?void 0:N.active_models)||0,winStreak:((S=(j=(w=ee.performance_analytics)==null?void 0:w.sport_breakdown)==null?void 0:j.NBA)==null?void 0:S.volume)||0,marketAnalysis:((C=ee.market_analysis)==null?void 0:C.market_sentiment)||"Active",sportBreakdown:((F=ee.performance_analytics)==null?void 0:F.sport_breakdown)||{NBA:{accuracy:0,roi:0,volume:0},NFL:{accuracy:0,roi:0,volume:0},NHL:{accuracy:0,roi:0,volume:0},MLB:{accuracy:0,roi:0,volume:0},Soccer:{accuracy:0,roi:0,volume:0}},upcomingOpportunities:((T=ee.predictive_insights)==null?void 0:T.upcoming_opportunities)||[],systemMetrics:{uptime:Q.uptime||0,errorRate:((V=Q.api_metrics)==null?void 0:V.error_rate)||0,responseTime:((I=Q.api_metrics)==null?void 0:I.average_response_time)||0,totalUsers:Math.round((((z=ee.machine_learning_insights)==null?void 0:z.data_points_processed)||0)/100),totalPredictionsToday:((J=Q.models)==null?void 0:J.predictions_today)||0,avgWinRate:((L=Q.models)==null?void 0:L.model_accuracy)||0,systemHealth:Q.status||"unknown"},marketData:{efficiency:((A=ee.market_analysis)==null?void 0:A.market_efficiency)||0,arbitrageOpportunities:((B=ee.market_analysis)==null?void 0:B.arbitrage_opportunities)||0,valueBets:((X=ee.market_analysis)==null?void 0:X.value_bets_identified)||0,sentiment:((re=ee.market_analysis)==null?void 0:re.market_sentiment)||"neutral",totalVolume24h:((we=(oe=ee.market_analysis)==null?void 0:oe.volume_analysis)==null?void 0:we.total_volume_24h)||0,largeBets24h:((ge=(Ae=ee.market_analysis)==null?void 0:Ae.volume_analysis)==null?void 0:ge.large_bets_24h)||0}};return this.cache=Z,this.lastFetchTime=n,Z}catch(fe){return console.error("Failed to fetch real-time data:",fe),{liveGames:0,predictions:0,accuracy:0,profit:0,neuralActivity:0,quantumCoherence:0,dataPoints:0,processingSpeed:0,confidence:0,activeBots:0,winStreak:0,marketAnalysis:"Error",sportBreakdown:{NBA:{accuracy:0,roi:0,volume:0},NFL:{accuracy:0,roi:0,volume:0},NHL:{accuracy:0,roi:0,volume:0},MLB:{accuracy:0,roi:0,volume:0},Soccer:{accuracy:0,roi:0,volume:0}},upcomingOpportunities:[],systemMetrics:{uptime:0,errorRate:0,responseTime:0,totalUsers:0,totalPredictionsToday:0,avgWinRate:0,systemHealth:"error"},marketData:{efficiency:0,arbitrageOpportunities:0,valueBets:0,sentiment:"error",totalVolume24h:0,largeBets24h:0}}}}static useRealTimeData(){const[n,r]=dn.useState(null),[a,l]=dn.useState(!0),[u,d]=dn.useState(null),h=Jn.getInstance(),p=async()=>{try{l(!0),d(null);const g=await h.fetchRealTimeData();r(g)}catch(g){d(g instanceof Error?g.message:"Unknown error")}finally{l(!1)}};return dn.useEffect(()=>{p();const g=setInterval(p,3e4);return()=>clearInterval(g)},[]),{data:n,loading:a,error:u,refetch:p}}};Ve(Jn,"instance");let _o=Jn;_o.getInstance();const $T=()=>{const[t,n]=E.useState(null),[r,a]=E.useState(!0),[l,u]=E.useState(null);return E.useEffect(()=>{const d=_o.getInstance(),h=async()=>{try{a(!0),u(null);const g=await d.fetchRealTimeData();n(g)}catch(g){u(g instanceof Error?g.message:"Unknown error"),console.error("Failed to fetch real-time data:",g)}finally{a(!1)}};h();const p=setInterval(h,3e4);return()=>clearInterval(p)},[]),{data:t,loading:r,error:l}},q0=(t,n)=>{E.useEffect(()=>{const r=a=>{t.current&&!t.current.contains(a.target)&&n()};return document.addEventListener("mousedown",r),()=>{document.removeEventListener("mousedown",r)}},[t,n])},zT=()=>{const{realTimeData:t}=E.useContext(ea),[n,r]=E.useState(3),[a,l]=E.useState(67);return E.useEffect(()=>{const u=setInterval(()=>{l(d=>Math.max(20,Math.min(95,d+(Math.random()-.5)*10))),Math.random()<.1&&r(d=>d+1)},2e3);return()=>clearInterval(u)},[]),i.jsxs(Y.div,{className:"space-y-8 animate-slide-in-up p-8",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},children:[i.jsxs("div",{className:"text-center",children:[i.jsxs("div",{className:"relative mb-6",children:[i.jsx("div",{className:"absolute inset-0 bg-orange-400/20 blur-3xl rounded-full"}),i.jsx("div",{className:"relative text-6xl text-orange-400 float-element",children:"👁️"})]}),i.jsx("h1",{className:"holographic text-5xl font-black mb-4 font-cyber",children:"REAL-TIME MONITOR"}),i.jsx("p",{className:"text-xl text-gray-400 font-mono",children:"Live Data Intelligence & System Monitoring"})]}),i.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 gap-6",children:[i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl text-center hover:shadow-neon transition-all",children:[i.jsx("div",{className:"text-green-400 text-3xl font-bold font-cyber",children:(t==null?void 0:t.liveGames)||23}),i.jsx("div",{className:"text-gray-300 text-sm font-mono uppercase tracking-wider",children:"Live Games"}),i.jsxs("div",{className:"flex items-center justify-center mt-2",children:[i.jsx("div",{className:"w-2 h-2 bg-green-400 rounded-full animate-pulse mr-2"}),i.jsx("span",{className:"text-green-400 text-xs font-mono",children:"STREAMING"})]})]}),i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl text-center hover:shadow-neon transition-all",children:[i.jsx("div",{className:"text-electric-400 text-3xl font-bold font-cyber",children:((t==null?void 0:t.predictions)||1247).toLocaleString()}),i.jsx("div",{className:"text-gray-300 text-sm font-mono uppercase tracking-wider",children:"Predictions"}),i.jsxs("div",{className:"flex items-center justify-center mt-2",children:[i.jsx("div",{className:"w-2 h-2 bg-electric-400 rounded-full animate-pulse mr-2"}),i.jsx("span",{className:"text-electric-400 text-xs font-mono",children:"GENERATING"})]})]}),i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl text-center hover:shadow-neon transition-all",children:[i.jsx("div",{className:"text-cyan-400 text-3xl font-bold font-cyber",children:(t==null?void 0:t.activeBots)||47}),i.jsx("div",{className:"text-gray-300 text-sm font-mono uppercase tracking-wider",children:"Neural Bots"}),i.jsxs("div",{className:"flex items-center justify-center mt-2",children:[i.jsx("div",{className:"w-2 h-2 bg-cyan-400 rounded-full animate-pulse mr-2"}),i.jsx("span",{className:"text-cyan-400 text-xs font-mono",children:"ACTIVE"})]})]}),i.jsxs(Y.div,{className:"quantum-card p-6 rounded-2xl text-center hover:shadow-neon transition-all",children:[i.jsxs("div",{className:"text-purple-400 text-3xl font-bold font-cyber",children:[(t==null?void 0:t.processingSpeed)||12,"ms"]}),i.jsx("div",{className:"text-gray-300 text-sm font-mono uppercase tracking-wider",children:"Response"}),i.jsxs("div",{className:"flex items-center justify-center mt-2",children:[i.jsx("div",{className:"w-2 h-2 bg-purple-400 rounded-full animate-pulse mr-2"}),i.jsx("span",{className:"text-purple-400 text-xs font-mono",children:"OPTIMAL"})]})]})]}),i.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-3 gap-8",children:[i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-green-500/20",children:[i.jsxs("h3",{className:"text-xl font-bold text-green-400 font-cyber mb-6 flex items-center",children:[i.jsx(zo,{className:"w-6 h-6 mr-2 animate-pulse"}),"SYSTEM STATUS"]}),i.jsx("div",{className:"space-y-4",children:[{name:"Neural Networks",status:"OPTIMAL",color:"green-400"},{name:"Data Pipeline",status:"STREAMING",color:"electric-400"},{name:"API Gateway",status:"ACTIVE",color:"green-400"},{name:"ML Models",status:"TRAINING",color:"yellow-400"},{name:"Quantum Core",status:"COHERENT",color:"cyan-400"},{name:"Alert System",status:"MONITORING",color:"orange-400"}].map((u,d)=>i.jsxs("div",{className:"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:u.name}),i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx("div",{className:`w-3 h-3 bg-${u.color} rounded-full animate-pulse`}),i.jsx("span",{className:`text-${u.color} font-bold font-mono text-sm`,children:u.status})]})]},d))})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-electric-500/20",children:[i.jsxs("h3",{className:"text-xl font-bold text-electric-400 font-cyber mb-6 flex items-center",children:[i.jsx(os,{className:"w-6 h-6 mr-2"}),"PERFORMANCE"]}),i.jsxs("div",{className:"space-y-4",children:[i.jsxs("div",{children:[i.jsxs("div",{className:"flex justify-between items-center mb-2",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:"System Load"}),i.jsxs("span",{className:"text-electric-400 font-bold font-mono",children:[a,"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-gradient-to-r from-electric-400 to-cyan-400 h-2 rounded-full transition-all duration-500",style:{width:`${a}%`}})})]}),i.jsxs("div",{children:[i.jsxs("div",{className:"flex justify-between items-center mb-2",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:"Model Accuracy"}),i.jsxs("span",{className:"text-green-400 font-bold font-mono",children:[((t==null?void 0:t.accuracy)||87.3).toFixed(1),"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-gradient-to-r from-green-400 to-emerald-400 h-2 rounded-full",style:{width:`${(t==null?void 0:t.accuracy)||87.3}%`}})})]}),i.jsxs("div",{children:[i.jsxs("div",{className:"flex justify-between items-center mb-2",children:[i.jsx("span",{className:"text-gray-300 font-mono",children:"Confidence Score"}),i.jsxs("span",{className:"text-cyan-400 font-bold font-mono",children:[((t==null?void 0:t.confidence)||91.5).toFixed(1),"%"]})]}),i.jsx("div",{className:"w-full bg-gray-700 rounded-full h-2",children:i.jsx("div",{className:"bg-gradient-to-r from-cyan-400 to-blue-400 h-2 rounded-full",style:{width:`${(t==null?void 0:t.confidence)||91.5}%`}})})]}),i.jsxs("div",{className:"grid grid-cols-2 gap-4 mt-6",children:[i.jsxs("div",{className:"text-center p-3 bg-gray-800/50 rounded-lg",children:[i.jsx("div",{className:"text-purple-400 font-bold font-mono",children:((t==null?void 0:t.dataPoints)||2847592).toLocaleString()}),i.jsx("div",{className:"text-gray-400 text-xs font-mono",children:"Data Points"})]}),i.jsxs("div",{className:"text-center p-3 bg-gray-800/50 rounded-lg",children:[i.jsxs("div",{className:"text-yellow-400 font-bold font-mono",children:[((t==null?void 0:t.quantumCoherence)||99.97).toFixed(2),"%"]}),i.jsx("div",{className:"text-gray-400 text-xs font-mono",children:"Coherence"})]})]})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl border border-orange-500/20",children:[i.jsxs("h3",{className:"text-xl font-bold text-orange-400 font-cyber mb-6 flex items-center",children:[i.jsx(Ig,{className:"w-6 h-6 mr-2"}),"LIVE ALERTS (",n,")"]}),i.jsx("div",{className:"space-y-3 max-h-80 overflow-y-auto",children:[{time:"2m ago",type:"HIGH",message:"NBA model accuracy spike: 94.7%",color:"green"},{time:"5m ago",type:"INFO",message:"New data feed: NFL injury reports",color:"blue"},{time:"8m ago",type:"WARN",message:"API rate limit approaching",color:"yellow"},{time:"12m ago",type:"HIGH",message:"Arbitrage opportunity detected",color:"purple"},{time:"15m ago",type:"INFO",message:"Model retrained: XGBoost v2.1",color:"green"},{time:"18m ago",type:"CRIT",message:"Quantum coherence > 99.9%",color:"cyan"}].map((u,d)=>i.jsxs(Y.div,{className:"p-3 bg-gray-800/40 rounded-lg border-l-4 border-l-green-400",initial:{opacity:0,x:20},animate:{opacity:1,x:0},transition:{delay:d*.1},children:[i.jsxs("div",{className:"flex items-center justify-between mb-1",children:[i.jsx("span",{className:`text-${u.color}-400 font-bold font-mono text-xs`,children:u.type}),i.jsx("span",{className:"text-gray-500 font-mono text-xs",children:u.time})]}),i.jsx("div",{className:"text-gray-300 text-sm font-mono",children:u.message})]},d))})]})]}),i.jsxs("div",{className:"quantum-card p-6 rounded-2xl",children:[i.jsx("h3",{className:"text-xl font-bold text-white font-cyber mb-6",children:"DATA SOURCES STATUS"}),i.jsx("div",{className:"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4",children:[{name:"ESPN API",status:"online",latency:"45ms"},{name:"PrizePicks",status:"online",latency:"23ms"},{name:"SportsRadar",status:"online",latency:"67ms"},{name:"TheOdds",status:"warning",latency:"156ms"},{name:"Neural Feed",status:"online",latency:"12ms"},{name:"Quantum Core",status:"optimal",latency:"8ms"}].map((u,d)=>i.jsxs("div",{className:"p-4 bg-gray-800/30 rounded-xl text-center border border-gray-600/30",children:[i.jsx("div",{className:"text-sm font-bold text-white font-mono mb-2",children:u.name}),i.jsx("div",{className:`w-3 h-3 rounded-full mx-auto mb-2 ${u.status==="online"?"bg-green-400 animate-pulse":u.status==="optimal"?"bg-cyan-400 animate-pulse":"bg-yellow-400 animate-pulse"}`}),i.jsx("div",{className:"text-xs text-gray-400 font-mono",children:u.latency})]},d))})]})]})},ea=E.createContext(null),qT=()=>{const[t,n]=E.useState("dashboard"),[r,a]=E.useState(!1),[l,u]=E.useState("quantum-dark"),{user:d}=DT(),{data:h}=$T(),{notifications:p}=BT();E.useEffect(()=>{const b=setInterval(()=>{const N=document.getElementById("particles");if(!N)return;const w=document.createElement("div");w.className="particle",w.style.left=Math.random()*100+"vw",w.style.animationDelay=Math.random()*8+"s",w.style.animationDuration=8+Math.random()*4+"s",N.appendChild(w),setTimeout(()=>{w.parentNode&&w.remove()},12e3)},2e3);return()=>{clearInterval(b)}},[]);const g=()=>{const y=["quantum-dark","neural-purple","cyber-blue","quantum-light"],b=y.indexOf(l),N=y[(b+1)%y.length];u(N),document.body.className=document.body.className.replace(/theme-\w+/g,""),document.body.classList.add(`theme-${N}`),N==="quantum-light"?(document.documentElement.classList.remove("dark"),document.body.style.background="linear-gradient(135deg, #f8fafc 0%, #e2e8f0 25%, #cbd5e1 50%, #94a3b8 75%, #64748b 100%)"):(document.documentElement.classList.add("dark"),document.body.style.background="")};E.useEffect(()=>{document.body.classList.add("theme-quantum-dark"),document.documentElement.classList.add("dark")},[]),Ny();const x={currentPage:t,setCurrentPage:n,sidebarCollapsed:r,setSidebarCollapsed:a,user:d||{name:"Quantum User",tier:"NEURAL",level:(h==null?void 0:h.activeBots)||0,accuracy:(h==null?void 0:h.accuracy)||0,profit:(h==null?void 0:h.profit)||0},realTimeData:h||{liveGames:0,predictions:0,accuracy:0,profit:0,neuralActivity:0,quantumCoherence:0,dataPoints:0,processingSpeed:0,confidence:0,activeBots:0,winStreak:0,marketAnalysis:"Loading..."},notifications:p||[],theme:l,setTheme:u,toggleTheme:g};return i.jsx(ea.Provider,{value:x,children:i.jsxs("div",{className:"quantum-bg text-white font-sans min-h-screen overflow-x-hidden",children:[i.jsx("div",{id:"particles",className:"fixed inset-0 pointer-events-none z-0"}),i.jsxs("div",{className:"flex min-h-screen",children:[i.jsx(WT,{}),i.jsxs("div",{className:"flex-1 flex flex-col transition-all duration-500",children:[i.jsx(HT,{}),i.jsx("main",{className:"flex-1 p-10",children:i.jsx(QT,{})}),i.jsx("footer",{className:"ultra-glass border-t border-white/10 py-8",children:i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"holographic font-bold mb-2 text-lg font-cyber",children:"A1BETTING ULTIMATE QUANTUM INTELLIGENCE"}),i.jsx("div",{className:"text-sm text-gray-400 font-mono",children:"© 2024 Neural Sports Intelligence Platform • 47 AI Agents • 1024 Qubits • Quantum Enhanced • 🧠 Brain Status: OPTIMAL"})]})})]})]})]})})},HT=()=>{const t=E.useContext(ea);if(!t)return null;const{sidebarCollapsed:n,setSidebarCollapsed:r,user:a,notifications:l,toggleTheme:u}=t,[d,h]=E.useState(!1),[p,g]=E.useState(!1),x=E.useRef(null),y=E.useRef(null);return q0(x,()=>g(!1)),q0(y,()=>h(!1)),i.jsxs("header",{className:"ultra-glass border-b border-white/10 h-24 flex items-center px-10 justify-between sticky top-0 z-30",children:[i.jsxs("div",{className:"flex items-center space-x-6",children:[i.jsx("button",{onClick:()=>r(!n),className:"p-2 rounded-full hover:bg-white/10 transition-colors",children:n?i.jsx(b2,{}):i.jsx(zg,{})}),i.jsx("div",{className:"holographic text-3xl font-bold font-cyber tracking-widest",children:"A1-ULTIMATE"})]}),i.jsxs("div",{className:"flex items-center space-x-6",children:[i.jsxs("div",{className:"relative hidden md:block",children:[i.jsx("input",{type:"text",placeholder:"Search players, games, stats...",className:"w-72 bg-gray-800/50 border border-white/10 rounded-full py-2 px-4 focus:outline-none focus:ring-2 focus:ring-cyan-400 transition-all font-mono"}),i.jsx(En,{className:"absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5"})]}),i.jsx("button",{onClick:u,className:"p-3 rounded-full hover:bg-white/10 transition-colors",children:i.jsx(qo,{className:"w-6 h-6"})}),i.jsxs("div",{className:"relative",ref:x,children:[i.jsxs("button",{onClick:()=>g(!p),className:"p-3 rounded-full hover:bg-white/10 transition-colors",children:[i.jsx(Ig,{className:"w-6 h-6"}),l.length>0&&i.jsx("span",{className:"absolute top-0 right-0 w-3 h-3 bg-red-500 rounded-full border-2 border-gray-800 animate-pulse"})]}),p&&i.jsxs("div",{className:"absolute right-0 mt-4 w-80 ultra-glass border border-white/10 rounded-xl shadow-lg p-4 z-40",children:[i.jsx("h4",{className:"font-bold text-lg mb-2",children:"Notifications"}),i.jsx("div",{className:"space-y-2",children:l.slice(0,5).map((b,N)=>i.jsx("div",{className:"p-2 bg-gray-800/50 rounded-lg text-sm",children:b.message},N))})]})]}),i.jsxs("div",{className:"relative",ref:y,children:[i.jsxs("button",{onClick:()=>h(!d),className:"flex items-center space-x-3",children:[i.jsx("div",{className:"w-10 h-10 rounded-full bg-gradient-to-br from-cyan-400 to-purple-500 flex items-center justify-center font-bold",children:a.name.charAt(0)}),i.jsxs("div",{className:"text-left hidden md:block",children:[i.jsx("div",{className:"font-bold",children:a.name}),i.jsxs("div",{className:"text-xs text-cyan-400 font-mono",children:[a.tier," TIER"]})]})]}),d&&i.jsxs("div",{className:"absolute right-0 mt-4 w-64 ultra-glass border border-white/10 rounded-xl shadow-lg p-4 z-40",children:[i.jsxs("div",{className:"text-center mb-4",children:[i.jsx("div",{className:"w-16 h-16 mx-auto rounded-full bg-gradient-to-br from-cyan-400 to-purple-500 flex items-center justify-center font-bold text-2xl mb-2",children:a.name.charAt(0)}),i.jsx("h3",{className:"font-bold text-xl",children:a.name}),i.jsxs("p",{className:"text-cyan-400 font-mono",children:[a.tier," TIER"]})]}),i.jsxs("div",{className:"space-y-2",children:[i.jsxs("div",{className:"flex justify-between p-2 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{children:"Level:"}),i.jsx("span",{className:"font-bold",children:a.level})]}),i.jsxs("div",{className:"flex justify-between p-2 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{children:"Accuracy:"}),i.jsxs("span",{className:"font-bold text-green-400",children:[a.accuracy,"%"]})]}),i.jsxs("div",{className:"flex justify-between p-2 bg-gray-800/50 rounded-lg",children:[i.jsx("span",{children:"Profit:"}),i.jsxs("span",{className:"font-bold text-green-400",children:["$",a.profit.toLocaleString()]})]})]}),i.jsx("button",{className:"w-full mt-4 py-2 bg-red-500/80 hover:bg-red-500 rounded-lg transition-colors",children:"Logout"})]})]})]})]})},WT=()=>{const t=E.useContext(ea);if(!t)return null;const{currentPage:n,setCurrentPage:r,sidebarCollapsed:a}=t,l=[{id:"dashboard",label:"Dashboard",icon:y2},{id:"prop-ollama",label:"Prop Ollama",icon:et},{id:"moneymaker-pro",label:"MoneyMaker Pro",icon:Ui},{id:"prizepicks-pro",label:"PrizePicks Pro",icon:Bi},{id:"analytics",label:"Analytics",icon:os},{id:"saved-lineups",label:"Saved Lineups",icon:Hd},{id:"real-time",label:"Real-Time Monitor",icon:$d},{id:"market-intelligence",label:"Market Intel",icon:En},{id:"ml-dashboard",label:"ML Dashboard",icon:qo},{id:"admin",label:"Admin Panel",icon:Yi}];return i.jsxs("aside",{className:`ultra-glass border-r border-white/10 transition-all duration-500 flex flex-col ${a?"w-24":"w-72"}`,children:[i.jsx("div",{className:"h-24 flex items-center justify-center",children:i.jsx("div",{className:"w-12 h-12 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-full flex items-center justify-center",children:i.jsx(et,{className:"w-8 h-8 text-white"})})}),i.jsx("nav",{className:"flex-1 px-4 py-6 space-y-2",children:l.map(u=>i.jsxs("button",{onClick:()=>r(u.id),className:`w-full flex items-center p-3 rounded-lg transition-all duration-200 ${n===u.id?"bg-cyan-400/20 text-cyan-300 shadow-lg":"text-gray-400 hover:bg-white/5 hover:text-white"} ${a?"justify-center":""}`,children:[i.jsx(u.icon,{className:"w-6 h-6"}),!a&&i.jsx("span",{className:"ml-4 font-semibold",children:u.label})]},u.id))}),i.jsx("div",{className:"p-4 border-t border-white/10",children:i.jsxs("div",{className:`p-4 rounded-lg bg-gradient-to-br from-gray-700/50 to-gray-800/50 ${a?"text-center":""}`,children:[!a&&i.jsx("h4",{className:"font-bold text-white mb-2",children:"Quantum Status"}),i.jsxs("div",{className:"flex items-center space-x-2",children:[i.jsx("div",{className:"w-3 h-3 bg-green-400 rounded-full animate-pulse"}),i.jsx("span",{className:`text-green-400 font-mono text-sm ${a?"hidden":""}`,children:"ALL SYSTEMS OPTIMAL"})]})]})})]})},QT=()=>{const{currentPage:t,setCurrentPage:n}=E.useContext(ea);switch(t){case"dashboard":return i.jsx(V0,{onNavigate:n});case"prop-ollama":return i.jsx(GS,{});case"moneymaker-pro":return i.jsx(QS,{});case"prizepicks-pro":return i.jsx(KS,{});case"analytics":return i.jsx(eS,{});case"saved-lineups":return i.jsx(rS,{});case"real-time":return i.jsx(zT,{});case"market-intelligence":return i.jsx(YS,{});case"ml-dashboard":return i.jsx(aS,{});case"admin":return i.jsx(Z2,{});case"settings":return i.jsx(oS,{});default:return i.jsx(V0,{onNavigate:n})}},KT=new e1({defaultOptions:{queries:{retry:2,staleTime:5*60*1e3,refetchOnWindowFocus:!1,refetchOnMount:!1},mutations:{retry:1}}}),GT=()=>i.jsx(ax,{children:i.jsx(n1,{client:KT,children:i.jsx(i1,{defaultTheme:"dark",children:i.jsx(E.Suspense,{fallback:i.jsx("div",{className:"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center",children:i.jsxs("div",{className:"text-center",children:[i.jsx("div",{className:"w-20 h-20 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin mx-auto mb-6"}),i.jsx("h2",{className:"text-3xl font-bold text-yellow-400 mb-2",children:"A1 Betting Platform"}),i.jsx("p",{className:"text-xl text-gray-400 mb-4",children:"Enterprise Sports Intelligence"}),i.jsxs("div",{className:"flex items-center justify-center space-x-4 text-sm text-gray-500",children:[i.jsx("span",{children:"• 73.8% Win Rate"}),i.jsx("span",{children:"• 47+ ML Models"}),i.jsx("span",{children:"• Real-time APIs"})]})]})}),children:i.jsx(qT,{})})})})});class YT{constructor(){Ve(this,"logLevel");Ve(this,"logs",[]);Ve(this,"maxLogs",1e3);this.logLevel=1}shouldLog(n){return n<=this.logLevel}addLog(n,r,a,l){if(!this.shouldLog(n))return;const u={level:n,message:r,data:a,timestamp:new Date,source:l};this.logs.push(u),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs))}error(n,r,a){this.addLog(0,n,r,a)}warn(n,r,a){this.addLog(1,n,r,a)}info(n,r,a){this.addLog(2,n,r,a)}debug(n,r,a){this.addLog(3,n,r,a)}getRecentLogs(n=50){return this.logs.slice(-n)}getLogsByLevel(n){return this.logs.filter(r=>r.level===n)}clearLogs(){this.logs=[]}setLogLevel(n){this.logLevel=n}}const zi=new YT;zi.info("🚀 A1Betting Platform Loading - Production Mode",{environment:"production",timestamp:new Date().toISOString(),userAgent:navigator.userAgent},"Bootstrap");window.addEventListener("error",t=>{var n,r,a,l;if((r=(n=t.error)==null?void 0:n.message)!=null&&r.includes("Cannot read properties of undefined (reading 'frame')")){zi.warn("Vite error overlay issue suppressed",t.error,"Bootstrap"),t.preventDefault();return}zi.error("Global error caught",{message:(a=t.error)==null?void 0:a.message,filename:t.filename,lineno:t.lineno,colno:t.colno,stack:(l=t.error)==null?void 0:l.stack},"Global")});window.addEventListener("unhandledrejection",t=>{var r,a,l,u,d,h,p,g,x,y;if((a=(r=t.reason)==null?void 0:r.message)!=null&&a.includes("WebSocket closed without opened")||(u=(l=t.reason)==null?void 0:l.message)!=null&&u.includes("WebSocket connection")||t.reason instanceof Error&&t.reason.message.includes("WebSocket")){zi.warn("Vite WebSocket error suppressed",{message:(d=t.reason)==null?void 0:d.message},"Bootstrap"),t.preventDefault();return}const n={reasonType:typeof t.reason,reasonString:String(t.reason),message:((h=t.reason)==null?void 0:h.message)||"No message",stack:((p=t.reason)==null?void 0:p.stack)||"No stack trace",name:((g=t.reason)==null?void 0:g.name)||"Unknown error",code:(x=t.reason)==null?void 0:x.code,cause:(y=t.reason)==null?void 0:y.cause};t.reason instanceof Error&&(n.message=t.reason.message,n.stack=t.reason.stack||"No stack trace",n.name=t.reason.name),zi.error("Unhandled promise rejection detected",n,"Global"),t.preventDefault()});const jy=document.getElementById("root");if(!jy)throw new Error("Failed to find the root element");const XT=Mb.createRoot(jy);XT.render(i.jsx(dn.StrictMode,{children:i.jsx(ax,{children:i.jsx(GT,{})})}));
frontend\dist\sw.js:337:  // Mock data for different endpoints;
frontend\public\sw.js:337:  // Mock data for different endpoints;
frontend\src\adapters\poe\PoeToApiAdapter.d.ts:5: * This is a placeholder for future implementation. All integration logic should be added here.
frontend\src\adapters\poe\PoeToApiAdapter.d.ts:9:     * Placeholder for fetching and transforming Poe data.
frontend\src\adapters\poe\PoeToApiAdapter.ts:6: * This is a placeholder for future implementation. All integration logic should be added here.
frontend\src\adapters\poe\PoeToApiAdapter.ts:12:   * Placeholder for fetching and transforming Poe data.
frontend\src\adapters\poe\PoeToApiAdapter.ts:16:    // TODO: Implement actual integration logic;
frontend\src\adapters\DailyFantasyAdapter.ts:2:import { EventBus } from '@/unified/EventBus.js'; // TODO: ensure correct implementation after QA;
frontend\src\adapters\DailyFantasyAdapter.ts:3:import { PerformanceMonitor } from '@/unified/PerformanceMonitor.js'; // TODO: ensure correct implementation after QA;
frontend\src\adapters\DailyFantasyAdapter.ts:154:// TODO: Update EventMap in ../types/core.js to include 'daily-fantasy:data-updated' and 'social-sentiment-updated' event types for type safety.
frontend\src\adapters\poeToApiAdapter.ts:68:    const mockPoeApiResponse: PoeApiResponse = {
frontend\src\adapters\poeToApiAdapter.ts:86:          metadata: { source: 'PoeMockService' },
frontend\src\adapters\poeToApiAdapter.ts:101:          metadata: { source: 'PoeMockService' },
frontend\src\adapters\poeToApiAdapter.ts:107:          content: { articles: [] }, // Placeholder, not transformed by this method;
frontend\src\adapters\poeToApiAdapter.ts:108:          metadata: { source: 'PoeMockService' },
frontend\src\adapters\poeToApiAdapter.ts:113:    return this.transformPoeDataToPrizePicksProps(mockPoeApiResponse.dataBlocks || []);
frontend\src\analytics\FeatureSelector.ts:7:  // Minimal stub for build success;
frontend\src\analytics\FeatureSelector.ts:8:  // TODO: Replace 'unknown[]' with a more specific type if possible;
frontend\src\components\admin\AdminPanel.tsx:43:  // Mock real-time data - would come from actual services
frontend\src\components\admin\AdminSettings.tsx:492:                  placeholder="Enter API key"
frontend\src\components\admin\AdminSettings.tsx:507:                  placeholder="Enter API key"
frontend\src\components\admin\AdminSettings.tsx:522:                  placeholder="Enter API key"
frontend\src\components\admin\AdminSettings.tsx:535:                  placeholder="Enter API key"
frontend\src\components\advanced\WhatIfSimulator.tsx:119:      const baselinePrediction = 0.65; // Mock baseline;
frontend\src\components\analytics\__tests__\RiskAssessmentMatrix.test.tsx:6:jest.mock('../../../stores/predictionStore');
frontend\src\components\analytics\__tests__\RiskAssessmentMatrix.test.tsx:7:(usePredictionStore as jest.Mock).mockReturnValue({
frontend\src\components\analytics\__tests__\ShapExplanation.test.tsx:6:jest.mock('../../../stores/predictionStore');
frontend\src\components\analytics\__tests__\ShapExplanation.test.tsx:8:const mockShap = {
frontend\src\components\analytics\__tests__\ShapExplanation.test.tsx:15:(usePredictionStore as jest.Mock).mockReturnValue({
frontend\src\components\analytics\__tests__\ShapExplanation.test.tsx:16:  predictionsByEvent: { 'event1': { analytics: { shap: mockShap } } },
frontend\src\components\analytics\AdvancedAnalytics.tsx:55:  // THEME: Replace theme.palette.* with hardcoded values for now;
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:197:      const mockMetrics: PerformanceMetrics = {
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:216:      const mockPredictions: PredictionPerformance[] = [
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:259:      const mockTimeSeriesData: TimeSeriesData[] = [];
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:274:        mockTimeSeriesData.push({
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:284:            Math.max(...mockTimeSeriesData.map((d) => d.cumulativeProfit), 0),
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:289:      const mockCategoryPerformance: CategoryPerformance[] = [
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:328:      setMetrics(mockMetrics);
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:329:      setPredictions(mockPredictions);
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:330:      setTimeSeriesData(mockTimeSeriesData);
frontend\src\components\analytics\PerformanceAnalyticsDashboard.tsx:331:      setCategoryPerformance(mockCategoryPerformance);
frontend\src\components\analytics\UserStats.tsx:4:// TODO: Restore dynamic functionality once store subscription issues are resolved;
frontend\src\components\analytics\UserStats.tsx:6:  // Static mock data to prevent store subscription issues;
frontend\src\components\analytics\UserStats.tsx:7:  const mockStats = {
frontend\src\components\analytics\UserStats.tsx:19:          {mockStats.totalBets}
frontend\src\components\analytics\UserStats.tsx:25:          {mockStats.winRate}%
frontend\src\components\analytics\UserStats.tsx:33:          className={`text-2xl font-extrabold ${mockStats.totalProfitLoss  key={939552}>= 0 ? "text-green-600" : "text-red-600"}`}
frontend\src\components\analytics\UserStats.tsx:35:          ${mockStats.totalProfitLoss.toFixed(2)}
frontend\src\components\analytics\UserStats.tsx:41:          {mockStats.roi}%
frontend\src\components\auth\LoginForm.tsx:51:            placeholder="you@example.com"
frontend\src\components\auth\LoginForm.tsx:69:            placeholder="••••••••"
frontend\src\components\auth\RegisterForm.tsx:79:            placeholder="johndoe"
frontend\src\components\auth\RegisterForm.tsx:98:            placeholder="you@example.com"
frontend\src\components\auth\RegisterForm.tsx:117:            placeholder="••••••••"
frontend\src\components\auth\RegisterForm.tsx:136:            placeholder="••••••••"
frontend\src\components\auth\UnifiedAuth.tsx:328:            placeholder="Enter your email"
frontend\src\components\base\Select.d.ts:14:    placeholder?: string;
frontend\src\components\base\Select.tsx:18:  placeholder?: string;
frontend\src\components\base\Select.tsx:30:  placeholder = 'Select an option',
frontend\src\components\base\Select.tsx:80:                {selectedOption ? selectedOption.label : placeholder}
frontend\src\components\betting\ConfigurationMatrix.tsx:1:// Placeholder for ConfigurationMatrix component;
frontend\src\components\betting\EnsembleResults.tsx:1:// Placeholder for EnsembleResults component;
frontend\src\components\betting\PrizePicksInterface.tsx:85:    // For demonstration, leave loadInitialData as a placeholder for future refactor.
frontend\src\components\betting\PrizePicksInterface.tsx:87:        // TODO: Refactor to use hooks and context for data fetching.
frontend\src\components\betting\UnifiedBettingHistory.tsx:326:                  placeholder="Search bets..."
frontend\src\components\betting\UnifiedBettingInterface.tsx:76:        // Mock live games data - in real app, this would come from data pipeline;
frontend\src\components\betting\UnifiedBettingInterface.tsx:77:        const mockGames: LiveGame[] = [
frontend\src\components\betting\UnifiedBettingInterface.tsx:175:        setLiveGames(mockGames);
frontend\src\components\betting\UnifiedBettingInterface.tsx:419:              placeholder="Search markets..."
frontend\src\components\charts\PerformanceChart.tsx:15:    // Placeholder data removed;
frontend\src\components\charts\PerformanceChart.tsx:16:    // const placeholderData = {
frontend\src\components\controls\SmartControlsBar.test.tsx:15:    // Mock store logic if needed;
frontend\src\components\cyber\CyberAnalyticsHub.tsx:530:                  Interactive visualization placeholder;
frontend\src\components\cyber\CyberUltimateMoneyMaker.tsx:79:  // Generate mock opportunities with cyber enhancement;
frontend\src\components\cyber\CyberUltimateMoneyMaker.tsx:86:    const mockOpportunities: BettingOpportunity[] = [
frontend\src\components\cyber\CyberUltimateMoneyMaker.tsx:137:    return mockOpportunities;
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:33:// MOCK DATA;
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:36:const mockMetrics = [
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:71:const mockOpportunities = [
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:101:const mockRecentActivity = [
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:136:  metric: (typeof mockMetrics)[0];
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:268:  opportunity: (typeof mockOpportunities)[0];
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:316:const ActivityItem: React.FC<{ activity: (typeof mockRecentActivity)[0] }> = ({
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:411:          {mockMetrics.map((metric, index) => (
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:446:              {mockOpportunities.map((opportunity) => (
frontend\src\components\dashboard\ConsolidatedUniversalDashboard.tsx:498:                {mockRecentActivity.map((activity) => (
frontend\src\components\dashboard\DataSourcesPanel.tsx:21:  // Mock data sources - in a real app, this would come from your data service;
frontend\src\components\dashboard\LiveGamesDisplay.tsx:27:  // Mock data for when no games are provided;
frontend\src\components\dashboard\LiveOpportunities.tsx:39:const mockOpportunities: LiveOpportunity[] = [
frontend\src\components\dashboard\LiveOpportunities.tsx:178:    useState<LiveOpportunity[] key={741573}>(mockOpportunities);
frontend\src\components\dashboard\PremiumDashboard.tsx:174:// Mock dashboard metrics with proper typing;
frontend\src\components\dashboard\PremiumDashboard.tsx:175:const mockMetrics: DashboardMetrics = {
frontend\src\components\dashboard\PremiumDashboard.tsx:360:                value={mockMetrics.totalProfit}
frontend\src\components\dashboard\PremiumDashboard.tsx:361:                change={mockMetrics.profitChange}
frontend\src\components\dashboard\PremiumDashboard.tsx:368:                value={mockMetrics.winRate}
frontend\src\components\dashboard\PremiumDashboard.tsx:369:                change={mockMetrics.winRateChange}
frontend\src\components\dashboard\PremiumDashboard.tsx:376:                value={mockMetrics.totalBets}
frontend\src\components\dashboard\PremiumDashboard.tsx:377:                change={mockMetrics.betsChange}
frontend\src\components\dashboard\PremiumDashboard.tsx:383:                value={mockMetrics.avgOdds}
frontend\src\components\dashboard\PremiumDashboard.tsx:384:                change={mockMetrics.oddsChange}
frontend\src\components\dashboard\RealTimePredictions.tsx:33:  // Mock data setup;
frontend\src\components\dashboard\RealTimePredictions.tsx:37:      // Simulate loading and then set mock data;
frontend\src\components\dashboard\UniversalDashboard.tsx:174:  // Mock data to prevent fetch errors;
frontend\src\components\dashboard\UniversalDashboard.tsx:175:  const mockPredictions = Array.from({ length: 5 }, (_, i) => ({
frontend\src\components\dashboard\UniversalDashboard.tsx:184:  const mockMetrics = {
frontend\src\components\dashboard\UniversalDashboard.tsx:191:  // Data fetching with React Query (using mock data)
frontend\src\components\dashboard\UniversalDashboard.tsx:194:    queryFn: async () => mockPredictions,
frontend\src\components\dashboard\UniversalDashboard.tsx:201:    queryFn: async () => mockMetrics,
frontend\src\components\enhanced\EnhancedPrizePicks.tsx:636:// Mock implementations for missing imports;
frontend\src\components\enhanced\EnhancedPrizePicks.tsx:676:      placeholder="Entry Amount"
frontend\src\components\enhanced\EnhancedPrizePicks.tsx:719:// Mock implementations for missing hooks and utils;
frontend\src\components\events\UnifiedEventDetails.tsx:766:              <Input min="0" placeholder="Enter stake amount" step="0.01" type="number" / key={263117}>
frontend\src\components\features\analytics\MLInsights.tsx:37:  // Placeholder content removed;
frontend\src\components\features\analytics\MLInsights.tsx:38:  // const placeholderInsights = [
frontend\src\components\features\analytics\PerformanceChart.tsx:15:    // Placeholder data removed;
frontend\src\components\features\analytics\PerformanceChart.tsx:16:    // const placeholderData = {
frontend\src\components\features\betting\Arbitrage.tsx:18:    const mockOpportunities: ArbitrageOpportunity[] = [
frontend\src\components\features\betting\Arbitrage.tsx:48:      // Add more mock opportunities;
frontend\src\components\features\betting\Arbitrage.tsx:51:    setOpportunities(mockOpportunities);
frontend\src\components\features\betting\Arbitrage.tsx:88:              placeholder="-110"
frontend\src\components\features\betting\Arbitrage.tsx:97:              placeholder="+100"
frontend\src\components\features\betting\Arbitrage.tsx:106:              placeholder="1000"
frontend\src\components\features\betting\BetBuilder.tsx:39:  // Bonus and enhancement (placeholder logic)
frontend\src\components\features\betting\BetBuilder.tsx:99:  // For demonstration, use placeholders or simple logic if not already defined;
frontend\src\components\features\betting\PropCard.tsx:107:        {/* Placeholder for links to ESPN/News - this would need actual data or a search link */}
frontend\src\components\features\betting\PropCards.tsx:89:              placeholder="Search props, players..."
frontend\src\components\features\betting\PropCards.tsx:185:            {/* Placeholder for advanced details */}
frontend\src\components\features\user\UserProfile.tsx:116:      // TODO: Implement profile update API call;
frontend\src\components\features\user\UserStats.tsx:12:  // Placeholder data removed;
frontend\src\components\insights\MLInsights.tsx:36:  // Placeholder content removed;
frontend\src\components\insights\MLInsights.tsx:37:  // const placeholderInsights = [
frontend\src\components\intelligence\AdvancedIntelligenceHub.tsx:495:            document.querySelector('input[placeholder*="Search"]')?.focus();
frontend\src\components\intelligence\AdvancedIntelligenceHub.tsx:776:                  placeholder="Search modules... (Ctrl+F)"
frontend\src\components\layout\Layout.tsx:10:  // TODO: Replace with real data/context hooks;
frontend\src\components\layout\Layout.tsx:13:  // Mocked data for demo; replace with real hooks/context;
frontend\src\components\lineups\SavedLineups.tsx:305:              placeholder='Search lineups...'
frontend\src\components\lineups\SavedLineups.tsx:308:              className='w-full pl-10 pr-4 py-2 bg-gray-800/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-electric-400 focus:outline-none'
frontend\src\components\market\MarketIntelligence.tsx:70:  // Mock data initialization
frontend\src\components\market\MarketIntelligence.tsx:72:    const mockTrends: MarketTrend[] = [
frontend\src\components\market\MarketIntelligence.tsx:129:    const mockOpportunities: OpportunityAlert[] = [
frontend\src\components\market\MarketIntelligence.tsx:172:    const mockSentiment: SentimentData[] = [
frontend\src\components\market\MarketIntelligence.tsx:187:    setMarketTrends(mockTrends);
frontend\src\components\market\MarketIntelligence.tsx:188:    setOpportunities(mockOpportunities);
frontend\src\components\market\MarketIntelligence.tsx:189:    setSentimentData(mockSentiment);
frontend\src\components\mega\MegaAdminPanel.tsx:228:        placeholder="Search users by name or email..."
frontend\src\components\mega\MegaAnalytics.tsx:225:        {/* Performance Chart Placeholder */}
frontend\src\components\mega\MegaApp.tsx:186:        // Fallback for any remaining placeholder pages;
frontend\src\components\mega\MegaLayout.tsx:1043:              placeholder="Search anything..."
frontend\src\components\mega\MegaPrizePicks.tsx:63:  // Mock player props data (in real app, this would come from API)
frontend\src\components\mega\MegaUI.tsx:460:  placeholder?: string;
frontend\src\components\mega\MegaUI.tsx:472:  placeholder,
frontend\src\components\mega\MegaUI.tsx:515:          placeholder={placeholder}
frontend\src\components\mobile\MobileOptimizedInterface.tsx:388:  // Mock Data;
frontend\src\components\mobile\MobileOptimizedInterface.tsx:503:    const mockNotifications = [
frontend\src\components\mobile\MobileOptimizedInterface.tsx:519:    setNotifications(mockNotifications);
frontend\src\components\modern\EntryTracking.tsx:84:            // TODO: add batch update to context if needed in future;
frontend\src\components\modern\Header.tsx:10:// TODO: Integrate real trending games from state or API;
frontend\src\components\modern\Header.tsx:21:  // Placeholder trending games;
frontend\src\components\modern\Header.tsx:22:  const trendingGames: TrendingGame[] = useMemo(() => [], []); // TODO: Replace with real data;
frontend\src\components\modern\PropCard.tsx:83:          {/* Placeholder for live win rate if available from an AI engine */}
frontend\src\components\modern\PropCard.tsx:109:        {/* Placeholder for links to ESPN/News - this would need actual data or a search link */}
frontend\src\components\modern\PropCards.tsx:102:        {/* Detail Modal (stub) */}
frontend\src\components\modern\StateProvider.tsx:60:          sentiment: undefined, // TODO: integrate real sentiment if available;
frontend\src\components\modern\StateProvider.tsx:70:  const findOptimalLineup = (entryAmount: number) => null; // TODO: implement with real logic;
frontend\src\components\money-maker\UnifiedMoneyMaker.tsx:132:    // TODO: Implement details modal;
frontend\src\components\money-maker\UnifiedMoneyMaker.tsx:137:    // TODO: Implement bet placement;
frontend\src\components\MoneyMaker\AdvancedMLDashboard.tsx:23:const mockPerformanceHistory: ModelPerformanceHistory[] = [
frontend\src\components\MoneyMaker\AdvancedMLDashboard.tsx:146:        modelPerformanceHistory={mockPerformanceHistory}
frontend\src\components\MoneyMaker\CleanMoneyMaker.tsx:331:                  placeholder='85'
frontend\src\components\MoneyMaker\CleanMoneyMaker.tsx:340:                  placeholder='1.85'
frontend\src\components\MoneyMaker\CleanMoneyMaker.tsx:348:                  placeholder='10000'
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:6:// TODO: Skipped all tests in this file due to unstable BetRecommendationCard logic or outdated mocks. Fix and re-enable.
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:8:  const mockRecommendation: BetRecommendation = {
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:29:  // TODO: Fix test logic or component rendering for expected value color. Skipped for stabilization.
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:31:    render(<BetRecommendationCard recommendation={mockRecommendation} / key={19140}>);
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:42:  // TODO: Fix test logic or component event for info button. Skipped for stabilization.
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:45:      <BetRecommendationCard recommendation={mockRecommendation} onViewDetails={onViewDetails} / key={58259}>
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:53:    const { rerender } = render(<BetRecommendationCard recommendation={mockRecommendation} / key={19140}>);
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:60:      <BetRecommendationCard recommendation={{ ...mockRecommendation, riskLevel: 'medium' }} / key={230416}>
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:66:      <BetRecommendationCard recommendation={{ ...mockRecommendation, riskLevel: 'high' }} / key={51155}>
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:72:    const { rerender } = render(<BetRecommendationCard recommendation={mockRecommendation} / key={19140}>);
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:79:      <BetRecommendationCard recommendation={{ ...mockRecommendation, expectedValue: -50 }} / key={428627}>
frontend\src\components\prediction\__tests__\BetRecommendationCard.test.tsx:85:    render(<BetRecommendationCard recommendation={mockRecommendation} / key={19140}>);
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:6:// TODO: Skipped all tests in this file due to unstable BetRecommendationList logic or outdated mocks. Fix and re-enable.
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:8:  const mockRecommendations: BetRecommendation[] = [
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:85:  // TODO: Fix component or test for rendering recommendations. Skipped for stabilization.
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:86:    render(<BetRecommendationList loading={false} recommendations={mockRecommendations} / key={444985}>);
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:94:  // TODO: Fix component or test for filtering recommendations. Skipped for stabilization.
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:96:    render(<BetRecommendationList loading={false} recommendations={mockRecommendations} / key={444985}>);
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:108:    render(<BetRecommendationList loading={false} recommendations={mockRecommendations} / key={444985}>);
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:120:    render(<BetRecommendationList loading={false} recommendations={mockRecommendations} / key={444985}>);
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:132:    render(<BetRecommendationList loading={false} recommendations={mockRecommendations} / key={444985}>);
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:144:  // TODO: Fix component or test for sorting recommendations. Skipped for stabilization.
frontend\src\components\prediction\__tests__\BetRecommendationList.test.tsx:146:    render(<BetRecommendationList loading={false} recommendations={mockRecommendations} / key={444985}>);
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:6:// TODO: Skipped all tests in this file due to unstable PredictionExplanationModal logic or outdated mocks. Fix and re-enable.
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:8:  const mockPrediction: PredictionWithExplanation = {
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:39:      <PredictionExplanationModal open={true} prediction={mockPrediction} onClose={() = key={429667}> {}} />
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:49:      <PredictionExplanationModal open={true} prediction={mockPrediction} onClose={() = key={429667}> {}} />
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:58:      <PredictionExplanationModal open={true} prediction={mockPrediction} onClose={() = key={429667}> {}} />
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:71:      <PredictionExplanationModal open={true} prediction={mockPrediction} onClose={() = key={429667}> {}} />
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:84:      <PredictionExplanationModal open={true} prediction={mockPrediction} onClose={onClose} / key={861524}>
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:95:      <PredictionExplanationModal open={true} prediction={mockPrediction} onClose={onClose} / key={861524}>
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:105:      <PredictionExplanationModal open={false} prediction={mockPrediction} onClose={() = key={551402}> {}} />
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:113:      <PredictionExplanationModal open={true} prediction={mockPrediction} onClose={() = key={429667}> {}} />
frontend\src\components\prediction\__tests__\PredictionExplanationModal.test.tsx:123:      ...mockPrediction,
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:6:// TODO: Skipped all tests in this file due to unstable ShapExplanation logic or outdated mocks. Fix and re-enable.
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:8:  const mockExplanation: ModelExplanation = {
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:21:  // TODO: Fix component or test for model name/confidence rendering. Skipped for stabilization.
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:23:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:30:  // TODO: Fix component or test for visualization tabs. Skipped for stabilization.
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:32:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:40:  // TODO: Fix component or test for tab switching. Skipped for stabilization.
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:42:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:57:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:65:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:75:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:85:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:95:    render(<ShapExplanation explanation={mockExplanation} / key={199846}>);
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:106:      ...mockExplanation,
frontend\src\components\prediction\__tests__\ShapExplanation.test.tsx:108:        ...mockExplanation.shapExplanation,
frontend\src\components\prediction\QuantumPredictionsInterface.tsx:111:    // Generate mock prediction result
frontend\src\components\prediction\QuantumPredictionsInterface.tsx:211:                placeholder='Enter event identifier'
frontend\src\components\prediction\UltraAccuracyDashboard.tsx:60:            const mockPrediction: UltraAccuratePrediction = {
frontend\src\components\prediction\UltraAccuracyDashboard.tsx:114:            setPrediction(mockPrediction);
frontend\src\components\prediction\UltraAccuracyDashboard.tsx:115:            onPredictionGenerated?.(mockPrediction);
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:7:// Mock the hooks;
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:8:jest.mock('../../../hooks/useLogger');
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:9:jest.mock('../../../hooks/useMetrics');
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:11:const mockLogger = {
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:19:const mockMetrics = {
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:27:// TODO: Skipped all tests in this file due to incomplete or broken DailyFantasyIntegration logic or outdated mocks. Fix and re-enable.
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:32:    (useLogger as jest.Mock).mockReturnValue(mockLogger);
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:33:    (useMetrics as jest.Mock).mockReturnValue(mockMetrics);
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:34:    global.fetch = mockFetch;
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:35:    mockFetch.mockClear();
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:36:    mockOnDataUpdate.mockClear();
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:37:    mockLogger.info.mockClear();
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:38:    mockLogger.error.mockClear();
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:39:    mockMetrics.track.mockClear();
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:40:    mockMetrics.increment.mockClear();
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:43:  const mockFantasyData = [
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:66:      <DailyFantasyIntegration date="2024-01-01" sport="nfl" onDataUpdate={mockOnDataUpdate} / key={650139}>
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:75:    mockFetch.mockResolvedValueOnce({
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:77:      json: () => Promise.resolve(mockFantasyData),
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:81:      <DailyFantasyIntegration date="2024-01-01" sport="nfl" onDataUpdate={mockOnDataUpdate} / key={650139}>
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:87:      expect(mockFetch).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:103:    expect(mockOnDataUpdate).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:118:    mockFetch.mockRejectedValueOnce(new Error('API Error'));
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:121:      <DailyFantasyIntegration date="2024-01-01" sport="nfl" onDataUpdate={mockOnDataUpdate} / key={650139}>
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:130:    expect(mockLogger.error).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:134:    expect(mockMetrics.increment).toHaveBeenCalledWith('dailyfantasy_fetch_error');
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:138:    mockFetch.mockResolvedValueOnce({
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:140:      json: () => Promise.resolve(mockFantasyData),
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:144:      <DailyFantasyIntegration date="2024-01-01" sport="nfl" onDataUpdate={mockOnDataUpdate} / key={650139}>
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:153:      expect(mockFetch).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:167:    mockFetch.mockResolvedValueOnce({
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:169:      json: () => Promise.resolve(mockFantasyData),
frontend\src\components\predictions\__tests__\DailyFantasyIntegration.test.tsx:173:      <DailyFantasyIntegration date="2024-01-01" sport="nfl" onDataUpdate={mockOnDataUpdate} / key={650139}>
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:7:// Mock the hooks;
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:8:jest.mock('../../../hooks/useLogger');
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:9:jest.mock('../../../hooks/useMetrics');
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:11:const mockLogger = {
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:19:const mockMetrics = {
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:27:// TODO: Skipped all tests in this file due to incomplete or broken FantasyPredictionEnhancer logic or outdated mocks. Fix and re-enable.
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:29:  const mockFantasyData = [
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:52:  const mockPredictions = [
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:68:    (useLogger as jest.Mock).mockReturnValue(mockLogger);
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:69:    (useMetrics as jest.Mock).mockReturnValue(mockMetrics);
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:70:    mockOnEnhancedPredictions.mockClear();
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:71:    mockLogger.info.mockClear();
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:72:    mockLogger.error.mockClear();
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:73:    mockMetrics.track.mockClear();
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:74:    mockMetrics.increment.mockClear();
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:80:        fantasyData={mockFantasyData}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:81:        predictions={mockPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:82:        onEnhancedPredictions={mockOnEnhancedPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:92:        fantasyData={mockFantasyData}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:93:        predictions={mockPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:94:        onEnhancedPredictions={mockOnEnhancedPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:99:      expect(mockOnEnhancedPredictions).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:121:    expect(mockLogger.info).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:125:    expect(mockMetrics.track).toHaveBeenCalledWith('predictions_enhanced', 1, expect.any(Object));
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:130:      ...mockPredictions,
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:141:        fantasyData={mockFantasyData}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:143:        onEnhancedPredictions={mockOnEnhancedPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:148:      expect(mockOnEnhancedPredictions).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:163:    expect(mockOnEnhancedPredictions).not.toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:176:        fantasyData={mockFantasyData}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:177:        predictions={mockPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:178:        onEnhancedPredictions={mockOnEnhancedPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:187:    mockOnEnhancedPredictions.mockRejectedValueOnce(error);
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:191:        fantasyData={mockFantasyData}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:192:        predictions={mockPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:193:        onEnhancedPredictions={mockOnEnhancedPredictions}
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:201:    expect(mockLogger.error).toHaveBeenCalledWith(
frontend\src\components\predictions\__tests__\FantasyPredictionEnhancer.test.tsx:205:    expect(mockMetrics.increment).toHaveBeenCalledWith('prediction_enhancement_error');
frontend\src\components\predictions\UniversalPredictions.tsx:202:  // Mock data for demonstration;
frontend\src\components\predictions\UniversalPredictions.tsx:520:            placeholder="Search teams, leagues, markets..."
frontend\src\components\profile\ProfilePage.tsx:162:                  placeholder="Tell us about yourself..."
frontend\src\components\realtime\RealTimeDataStream.tsx:105:            type: mockData.type,
frontend\src\components\realtime\RealTimeDataStream.tsx:106:            source: mockData.source,
frontend\src\components\realtime\RealTimeDataStream.tsx:107:            data: mockData.data,
frontend\src\components\realtime\RealTimeDataStream.tsx:108:            impact: mockData.impact,
frontend\src\components\realtime\RealTimeDataStream.tsx:130:  const generateMockStreamData = () => {
frontend\src\components\realtime\RealTimeDataStream.tsx:150:    const mockDataMap = {
frontend\src\components\realtime\RealTimeDataStream.tsx:191:      data: mockDataMap[type as keyof typeof mockDataMap] || {
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:164:      // Mock mathematical foundations data - replace with actual API call when backend is available;
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:165:      const mockFoundations = {
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:206:      setMathematicalFoundations(mockFoundations);
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:207:      logger.info("Mathematical foundations loaded (using mock data)");
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:210:      // Don't show error toast for mock data - just log it;
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:228:      // Mock mathematical analysis data;
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:229:      const mockAnalysis = {
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:274:      setMathematicalAnalysis(mockAnalysis);
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:275:      logger.info("Real-time mathematical analysis updated (using mock data)");
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:327:      // Mock enhanced prediction result;
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:328:      const mockResult = {
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:369:      setPredictionResult(mockResult);
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:371:      // Mock mathematical analysis;
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:372:      const mockAnalysis = {
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:376:          convergence_rate: mockResult.convergence_rate,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:386:          parameter_sensitivity: mockResult.feature_importance,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:397:          pac_bound: mockResult.prediction_confidence,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:401:            mockResult.prediction_confidence - 0.06,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:402:            mockResult.prediction_confidence + 0.06,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:413:      setMathematicalAnalysis(mockAnalysis);
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:416:        "Enhanced revolutionary prediction completed successfully (mock)",
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:419:          finalPrediction: mockResult.final_prediction,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:420:          confidence: mockResult.prediction_confidence,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:421:          processingTime: mockResult.total_processing_time,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:423:            mockResult.mathematical_guarantees,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:429:        `Enhanced prediction completed! Confidence: ${(mockResult.prediction_confidence * 100).toFixed(1)}%`,
frontend\src\components\revolutionary\EnhancedRevolutionaryInterface.tsx:669:                    placeholder="Enter event identifier"
frontend\src\components\revolutionary\RevolutionaryAccuracyInterface.tsx:534:                    placeholder="Enter event identifier"
frontend\src\components\ui\__tests__\BankrollTracker.test.tsx:8:    jest.spyOn(bankrollStore, 'useBankrollStore').mockImplementation((selector) =>
frontend\src\components\ui\__tests__\BankrollTracker.test.tsx:27:    jest.restoreAllMocks();
frontend\src\components\ui\__tests__\ConfidenceBandChart.test.tsx:5:// TODO: Skipped all tests in this file due to unstable UI rendering or broken confidence band logic. Fix and re-enable.
frontend\src\components\ui\betting\BettingFilters.tsx:127:            placeholder="Preset name"
frontend\src\components\ui\betting\BettingOpportunityCard.tsx:72:            placeholder="Enter bet amount"
frontend\src\components\ui\ConfidenceBands.tsx:2:// TODO: Add tests and real data binding;
frontend\src\components\ui\ConfidenceBands.tsx:15:    {/* TODO: Add chart visualization */}
frontend\src\components\ui\design-system.tsx:175:          "bg-white/90 backdrop-blur-lg border border-gray-200 text-gray-900 placeholder-gray-500 focus:bg-white focus:border-brand-500 focus:ring-4 focus:ring-brand-500/20",
frontend\src\components\ui\design-system.tsx:177:          "bg-white/10 backdrop-blur-lg border border-white/20 text-white placeholder-white/60 focus:border-white/40 focus:bg-white/20",
frontend\src\components\ui\EmptyState.tsx:47:        <span key={595076}>No mock or placeholder data is shown</span>
frontend\src\components\ui\ModernCommandPalette.tsx:171:                placeholder="Search commands..."
frontend\src\components\ui\ModernCommandPalette.tsx:174:                className="flex-1 bg-transparent text-white placeholder-gray-400 outline-none text-sm"
frontend\src\components\ui\PredictionSummaryCard.test.tsx:21:  // TODO: Test skipped due to unstable UI rendering or multiple elements with role 'button'. Fix component or test logic.
frontend\src\components\ui\PredictionSummaryCard.test.tsx:32:  // TODO: Test skipped due to multiple elements with role 'button' and incomplete event logic. Fix event handler or test.
frontend\src\components\ui\PredictionSummaryCard.test.tsx:40:  // TODO: Snapshot test skipped due to unstable output. Fix rendering or snapshot logic.
frontend\src\components\ui\RiskHeatMap.tsx:2:// TODO: Add tests and real data binding;
frontend\src\components\ui\SearchModal.tsx:65:              placeholder="Search games, players, predictions..."
frontend\src\components\ui\SearchModal.tsx:68:              className="flex-1 bg-transparent text-white placeholder-slate-400 outline-none text-lg"
frontend\src\components\ui\select.tsx:13:      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
frontend\src\components\ui\SourceHealthBar.tsx:2:// TODO: Add tests and real-time status polling;
frontend\src\components\ui\UnifiedUI.d.ts:25:    placeholder?: string;
frontend\src\components\ui\UnifiedUI.tsx:107:  placeholder?: string;
frontend\src\components\ui\UnifiedUI.tsx:119:  placeholder,
frontend\src\components\ui\UnifiedUI.tsx:163:          placeholder={placeholder}
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:13:// Mock components that might not be available in test environment;
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:14:jest.mock("../MoneyMakerPro", () => {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:15:  return function MockMoneyMakerPro() {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:20:jest.mock("../PrizePicksPro", () => {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:21:  return function MockPrizePicksPro() {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:26:jest.mock("../PropOllama", () => {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:27:  return function MockPropOllama() {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:32:jest.mock("../UserFriendlyDashboard", () => {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:33:  return function MockUserFriendlyDashboard({
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:49:jest.mock("../../ml/UltraAdvancedMLDashboard", () => {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:50:  return function MockUltraAdvancedMLDashboard() {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:59:jest.mock("../../prediction/UltraAccuracyDashboard", () => {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:60:  return function MockUltraAccuracyDashboard() {
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:90:    // Mock console.log to avoid cluttering test output;
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:91:    jest.spyOn(console, "log").mockImplementation(() => {});
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:95:    jest.restoreAllMocks();
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:200:      // Click the test navigation button in the mock dashboard;
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:273:      // Mock mobile viewport;
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:334:      // In a real test, you might want to mock timers;
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:395:      // Mock console.error to prevent error output in tests;
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:396:      jest.spyOn(console, "error").mockImplementation(() => {});
frontend\src\components\user-friendly\__tests__\UserFriendlyApp.test.tsx:407:      jest.restoreAllMocks();
frontend\src\components\user-friendly\ArbitrageHunter.tsx:58:  // Mock arbitrage opportunities;
frontend\src\components\user-friendly\ArbitrageHunter.tsx:59:  const mockOpportunities: ArbitrageOpportunity[] = useMemo(() => [
frontend\src\components\user-friendly\ArbitrageHunter.tsx:119:        setOpportunities(mockOpportunities);
frontend\src\components\user-friendly\ArbitrageHunter.tsx:121:          total_opportunities: mockOpportunities.length,
frontend\src\components\user-friendly\ArbitrageHunter.tsx:122:          avg_profit_margin: mockOpportunities.reduce((acc, opp) => acc + opp.profit_percentage, 0) / mockOpportunities.length,
frontend\src\components\user-friendly\ArbitrageHunter.tsx:123:          total_guaranteed_profit: mockOpportunities.reduce((acc, opp) => acc + opp.guaranteed_profit, 0),
frontend\src\components\user-friendly\ArbitrageHunter.tsx:135:  }, [mockOpportunities]);
frontend\src\components\user-friendly\ArbitrageHunter.tsx:179:      setOpportunities([...mockOpportunities]);
frontend\src\components\user-friendly\ConsolidatedUserProfile.tsx:114:  // Mock user profile data - in real app this would come from API;
frontend\src\components\user-friendly\ConsolidatedUserProfile.tsx:395:                placeholder="Tell us about yourself..."
frontend\src\components\user-friendly\EsportsMoneyMaker.tsx:74:  // Mock esports betting opportunities;
frontend\src\components\user-friendly\EsportsMoneyMaker.tsx:75:  const mockBets: EsportsBet[] = useMemo(() => [
frontend\src\components\user-friendly\EsportsMoneyMaker.tsx:193:        setBets(mockBets);
frontend\src\components\user-friendly\EsportsMoneyMaker.tsx:196:          active_bets: mockBets.length,
frontend\src\components\user-friendly\EsportsMoneyMaker.tsx:199:          avg_odds: mockBets.reduce((acc, bet) => acc + bet.odds, 0) / mockBets.length,
frontend\src\components\user-friendly\EsportsMoneyMaker.tsx:210:  }, [mockBets]);
frontend\src\components\user-friendly\MoneyMakerPro.tsx:635:                  placeholder='Enter lineup name...'
frontend\src\components\user-friendly\MoneyMakerPro.tsx:636:                  className='w-full p-3 rounded-lg bg-gray-800/50 border border-gray-600 text-white placeholder-gray-400 focus:border-electric-400 focus:outline-none'
frontend\src\components\user-friendly\PrizePicksPro.tsx:233:    // TODO: Fix lineup tracker interface compatibility
frontend\src\components\user-friendly\PrizePicksPro.tsx:491:                placeholder='Enter lineup name...'
frontend\src\components\user-friendly\PrizePicksProClean.tsx:424:      // Mock submission - in real app would call API;
frontend\src\components\user-friendly\PrizePicksProNew.tsx:467:                    placeholder="Search players, teams, or stats..."
frontend\src\components\user-friendly\PropOllama.tsx:405:              placeholder='Ask about props, strategies, or market analysis...'
frontend\src\components\user-friendly\PropOllama.tsx:406:              className='flex-1 p-4 rounded-2xl bg-gray-800/50 border border-gray-600 focus:border-electric-500 focus:outline-none text-white placeholder-gray-400'
frontend\src\components\user-friendly\PropOllama.tsx:462:                  placeholder='Enter analysis name...'
frontend\src\components\user-friendly\PropOllama.tsx:463:                  className='w-full p-3 rounded-lg bg-gray-800/50 border border-gray-600 text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none'
frontend\src\components\user-friendly\RiskEngineInterface.tsx:103:                placeholder="500"
frontend\src\components\user-friendly\RiskEngineInterface.tsx:112:                placeholder="5"
frontend\src\components\user-friendly\RiskEngineInterface.tsx:159:              placeholder="10000"
frontend\src\components\user-friendly\RiskEngineInterface.tsx:167:              placeholder="65"
frontend\src\components\user-friendly\RiskEngineInterface.tsx:175:              placeholder="2.5"
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:62:  // Mock data for demonstration;
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:63:  const mockOpportunities: Opportunity[] = useMemo(() => [
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:129:        setOpportunities(mockOpportunities);
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:132:          foundOpportunities: mockOpportunities.length,
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:133:          avgExpectedValue: mockOpportunities.reduce((acc, opp) => acc + opp.expectedValue, 0) / mockOpportunities.length,
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:144:  }, [mockOpportunities]);
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:152:      // Add some variation to mock new opportunities;
frontend\src\components\user-friendly\UltimateOpportunityScanner.tsx:339:            placeholder="Min Expected Value"
frontend\src\components\user-friendly\UserFriendlyApp.tsx:248:      component: SimpleBetting, // Placeholder
frontend\src\components\user-friendly\UserProfile.tsx:355:                  placeholder="Tell us about yourself..."
frontend\src\components\A1BettingQuantumPlatform.tsx:16: * Connected to real backend APIs instead of mock data
frontend\src\components\A1BettingQuantumPlatform.tsx:563:                        {/* Placeholder for notification content */}
frontend\src\components\AllFeatures.test.tsx:23:// Mock react-query;
frontend\src\components\AllFeatures.test.tsx:24:jest.mock('@tanstack/react-query', () => ({
frontend\src\components\AllFeatures.test.tsx:267:    // TODO: Add checks for all components/pages;
frontend\src\components\Analytics.tsx:18:  // Mock analytics data - would come from real services
frontend\src\components\AnalyticsPage.tsx:77:              Chart Placeholder;
frontend\src\components\AnalyticsPage.tsx:83:              Chart Placeholder;
frontend\src\components\ApiDebug.tsx:196:                ? "Yes (Mock Service Active)"
frontend\src\components\Arbitrage.tsx:96:              placeholder="-110"
frontend\src\components\Arbitrage.tsx:105:              placeholder="+100"
frontend\src\components\Arbitrage.tsx:114:              placeholder="1000"
frontend\src\components\ArbitrageOpportunities.tsx:447:setOpportunities(mockOpportunities);
frontend\src\components\ArbitragePage.test.tsx:6:jest.mock('axios');
frontend\src\components\ArbitragePage.test.tsx:10:    mockedAxios.get.mockResolvedValueOnce({
frontend\src\components\ArbitragePage.test.tsx:34:    mockedAxios.get.mockRejectedValueOnce(new Error('API Error'));
frontend\src\components\BankrollPage.test.tsx:6:jest.mock('axios');
frontend\src\components\BankrollPage.test.tsx:10:    mockedAxios.get.mockResolvedValueOnce({
frontend\src\components\BankrollPage.test.tsx:30:    mockedAxios.get.mockRejectedValueOnce(new Error('API Error'));
frontend\src\components\BankrollPage.tsx:144:            {/* Chart Placeholder */}
frontend\src\components\BettingDashboard.tsx:1:// TODO: Implement BettingDashboard component;
frontend\src\components\BettingInterface.tsx:155:                      placeholder='Search teams...'
frontend\src\components\BettingInterface.tsx:156:                      className='w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400'
frontend\src\components\BettingInterface.tsx:326:                      placeholder='Enter stake amount...'
frontend\src\components\BettingInterface.tsx:327:                      className='w-full px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400'
frontend\src\components\BettingInterface.tsx:402:// Default component with mock data
frontend\src\components\BettingInterface.tsx:403:const BettingInterfaceWithMockData: React.FC = () => {
frontend\src\components\BettingInterface.tsx:404:  const mockMatches: Match[] = [
frontend\src\components\BettingInterface.tsx:425:  const mockOdds: Odds[] = [
frontend\src\components\BettingInterface.tsx:445:    // Mock API call
frontend\src\components\BettingInterface.tsx:456:      availableMatches={mockMatches}
frontend\src\components\BettingInterface.tsx:457:      liveOdds={mockOdds}
frontend\src\components\BettingInterface.tsx:464:export default BettingInterfaceWithMockData;
frontend\src\components\ConnectionTest.tsx:17:        apiUrl: "Mock Service (HTTPS Cloud Environment)",
frontend\src\components\ConnectionTest.tsx:18:        mock_accuracy: "96.5%",
frontend\src\components\ConnectionTest.tsx:81:              🎭 Demo Mode: {details.mock_accuracy} Accuracy;
frontend\src\components\DevelopmentGuide.tsx:27:        "Mock betting opportunities and arbitrage data",
frontend\src\components\ESPNHeadlinesTicker.tsx:19:      // TODO: Implement API call to fetch headlines;
frontend\src\components\featureCoverage.test.tsx:7:// Mock API and WebSocket;
frontend\src\components\featureCoverage.test.tsx:8:jest.mock('../hooks/useApiRequest', () => ({ __esModule: true, default: jest.fn() }));
frontend\src\components\featureCoverage.test.tsx:9:jest.mock('../hooks/useWebSocket', () => ({ __esModule: true, default: jest.fn() }));
frontend\src\components\featureCoverage.test.tsx:41:    jest.spyOn({ useApiRequest }, 'useApiRequest').mockReturnValue({ data: null, error: 'Network Error', loading: false });
frontend\src\components\featureCoverage.test.tsx:48:    jest.spyOn({ useApiRequest }, 'useApiRequest').mockReturnValue({ data: null, error: null, loading: true });
frontend\src\components\featureCoverage.test.tsx:76:    'mocks',
frontend\src\components\featureCoverage.test.tsx:80:      // Placeholder: implement file system check or require test for each file;
frontend\src\components\Header.tsx:10:// TODO: Integrate real trending games from state or API;
frontend\src\components\Header.tsx:21:  // Placeholder trending games;
frontend\src\components\Header.tsx:22:  const trendingGames: TrendingGame[] = useMemo(() => [], []); // TODO: Replace with real data;
frontend\src\components\index.tsx:8:  import('./mocks/browser').then(({ worker }) => {
frontend\src\components\LoginForm.tsx:51:            placeholder="you@example.com"
frontend\src\components\LoginForm.tsx:69:            placeholder="••••••••"
frontend\src\components\MLPredictions.tsx:81:              placeholder="Enter Event ID"
frontend\src\components\PayoutPreview.tsx:131:    // TODO: Implement bet placement logic;
frontend\src\components\PerformanceAnalytics.tsx:22:    trend: 'neutral' as const, // TODO: Add trend logic;
frontend\src\components\PerformanceAnalytics.tsx:24:    change: 0, // TODO: Add change logic;
frontend\src\components\PredictionDisplay.tsx:348:// Default component with mock data
frontend\src\components\PredictionDisplay.tsx:349:const PredictionDisplayWithMockData: React.FC = () => {
frontend\src\components\PredictionDisplay.tsx:350:  const mockPredictions: Prediction[] = [
frontend\src\components\PredictionDisplay.tsx:409:      predictions={mockPredictions}
frontend\src\components\PredictionDisplay.tsx:418:export default PredictionDisplayWithMockData;
frontend\src\components\PropGPT.tsx:158:            placeholder='Ask about props, odds, strategies, or market analysis...'
frontend\src\components\QuantumSportsPlatform.tsx:528:            placeholder='Search players, games, stats...'
frontend\src\components\RegisterForm.tsx:79:            placeholder="johndoe"
frontend\src\components\RegisterForm.tsx:98:            placeholder="you@example.com"
frontend\src\components\RegisterForm.tsx:117:            placeholder="••••••••"
frontend\src\components\RegisterForm.tsx:136:            placeholder="••••••••"
frontend\src\components\RiskManagerPage.test.tsx:5:import MockAdapter from 'axios-mock-adapter.ts';
frontend\src\components\RiskManagerPage.test.tsx:9:    mock.reset();
frontend\src\components\RiskManagerPage.test.tsx:13:    mock.onGet('/api/risk-profiles').reply(200, [
frontend\src\components\RiskManagerPage.test.tsx:25:    mock.onGet('/api/active-bets').reply(200, [
frontend\src\components\RiskManagerPage.test.tsx:46:    mock.onGet('/api/risk-profiles').reply(500);
frontend\src\components\RiskManagerPage.test.tsx:47:    mock.onGet('/api/active-bets').reply(500);
frontend\src\components\RiskManagerPage.tsx:288:        <input name="name" value={form.name} onChange={handleChange} className="modern-input w-full" required placeholder="Profile Name" title="Profile Name" / key={333434}>
frontend\src\components\RiskManagerPage.tsx:293:          <input name="maxStake" type="number" value={form.maxStake} onChange={handleChange} className="modern-input w-full" min={0} required placeholder="Max Stake" title="Max Stake" / key={616111}>
frontend\src\components\RiskManagerPage.tsx:297:          <input name="maxExposure" type="number" value={form.maxExposure} onChange={handleChange} className="modern-input w-full" min={0} required placeholder="Max Exposure" title="Max Exposure" / key={718024}>
frontend\src\components\RiskManagerPage.tsx:301:          <input name="stopLoss" type="number" value={form.stopLoss} onChange={handleChange} className="modern-input w-full" min={0} required placeholder="Stop Loss" title="Stop Loss" / key={274070}>
frontend\src\components\RiskManagerPage.tsx:305:          <input name="takeProfit" type="number" value={form.takeProfit} onChange={handleChange} className="modern-input w-full" min={0} required placeholder="Take Profit" title="Take Profit" / key={747806}>
frontend\src\components\RiskManagerPage.tsx:309:          <input name="kellyFraction" type="number" value={form.kellyFraction} onChange={handleChange} className="modern-input w-full" min={0.01} step={0.01} required placeholder="Kelly Fraction" title="Kelly Fraction" / key={3152}>
frontend\src\components\RiskProfileManager.tsx:37:              <SelectValue placeholder="Select risk level" / key={346891}>
frontend\src\components\Select.d.ts:14:    placeholder?: string;
frontend\src\components\Select.tsx:18:  placeholder?: string;
frontend\src\components\Select.tsx:30:  placeholder = 'Select an option',
frontend\src\components\Select.tsx:80:                {selectedOption ? selectedOption.label : placeholder}
frontend\src\components\Settings.tsx:184:              placeholder='Enter your SportsRadar API key'
frontend\src\components\Settings.tsx:195:              placeholder='Enter your The Odds API key'
frontend\src\components\ThemeDemo.tsx:188:                placeholder="Sample input..."
frontend\src\components\UserProfile.tsx:213:                        className='w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50'
frontend\src\components\UserProfile.tsx:227:                        className='w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50'
frontend\src\components\UserProfile.tsx:241:                        className='w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50'
frontend\src\components\UserProfile.tsx:255:                        className='w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50'
frontend\src\components\UserProfile.tsx:269:                        className='w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50'
frontend\src\components\UserProfile.tsx:370:                      placeholder='Enter new password'
frontend\src\components\UserProfile.tsx:371:                      className='w-full pl-10 pr-12 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400'
frontend\src\components\UserProfile.tsx:401:// Default component with mock data
frontend\src\components\UserProfile.tsx:402:const UserProfileWithMockData: React.FC = () => {
frontend\src\components\UserProfile.tsx:403:  const mockUser: User = {
frontend\src\components\UserProfile.tsx:420:    // Mock API call
frontend\src\components\UserProfile.tsx:426:  return <UserProfile user={mockUser} onUpdateProfile={handleUpdateProfile} />;
frontend\src\components\UserProfile.tsx:429:export default UserProfileWithMockData;
frontend\src\components\WebSocketSecurityDashboard.tsx:27:    // Mock connection data;
frontend\src\components\WebSocketSecurityDashboard.tsx:28:    const mockConnections: ConnectionStatus[] = [
frontend\src\components\WebSocketSecurityDashboard.tsx:55:    setConnections(mockConnections);
frontend\src\components\WorkingDashboard.tsx:365:              <p className='text-gray-500'>Market Intelligence Chart Placeholder</p>
frontend\src\config\builder.ts:8:  // Mock all builder methods to prevent errors;
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:8:  let mockLogger: jest.Mocked<UnifiedLogger>;
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:9:  let mockMetrics: jest.Mocked<UnifiedMetrics>;
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:11:  const mockPrediction: ModelOutput = {
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:18:  const mockRecommendation: BetRecommendation = {
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:20:    prediction: mockPrediction,
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:34:    mockLogger = {
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:42:    mockMetrics = {
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:50:    tracker = new ModelPerformanceTracker(mockLogger, mockMetrics);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:55:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:64:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:65:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:74:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:84:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:96:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:107:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:116:      tracker.trackPrediction('model1', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:117:      tracker.trackPrediction('model2', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:129:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:137:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\analytics\__tests__\ModelPerformanceTracker.test.ts:145:      tracker.trackPrediction('test-model', mockPrediction, mockRecommendation);
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:4:// Mock logger and metrics;
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:5:const mockLogger = {
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:13:const mockMetrics = {
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:23:  let mockPredictions: ModelOutput[];
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:24:  let mockRiskProfile: RiskProfile;
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:27:    selector = new BestBetSelector(mockLogger, mockMetrics);
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:28:    mockPredictions = [
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:42:    mockRiskProfile = {
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:54:    jest.clearAllMocks();
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:72:        mockPredictions,
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:73:        mockRiskProfile,
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:78:        expect(recommendation.stake).toBeLessThanOrEqual(mockRiskProfile.maxStake);
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:85:        mockPredictions,
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:86:        mockRiskProfile,
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:98:      await selector.selectBestBets(mockPredictions, mockRiskProfile, 10000);
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:100:      expect(mockMetrics.track).toHaveBeenCalledWith(
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:150:        mockPredictions,
frontend\src\core\BestBetSelector\__tests__\BestBetSelector.test.ts:151:        mockRiskProfile,
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:12:  const mockLogger = {
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:19:  const mockMetrics = {
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:26:  const mockConfig = {
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:59:      logger: mockLogger,
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:60:      metrics: mockMetrics,
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:61:      config: mockConfig,
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:67:    jest.clearAllMocks();
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:71:    const mockModelOutputs: ModelOutput[] = [
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:102:    const mockRiskProfile: RiskProfile = {
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:125:      expect(mockLogger.info).toHaveBeenCalled();
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:126:      expect(mockMetrics.track).toHaveBeenCalled();
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:130:      await expect(engine.generatePrediction([], mockRiskProfile)).rejects.toThrow();
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:140:      await expect(engine.generatePrediction(mockModelOutputs, invalidProfile)).rejects.toThrow();
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:154:      expect(mockConfig.set).toHaveBeenCalledWith('modelWeights', newWeights);
frontend\src\core\FinalPredictionEngine\__tests__\FinalPredictionEngine.test.ts:174:      expect(mockConfig.set).toHaveBeenCalledWith('riskProfiles', newProfiles);
frontend\src\core\models\ModelEvaluator.ts:62:    // This is a placeholder that should be implemented based on your model types;
frontend\src\core\models\ModelEvaluator.ts:204:    // These are placeholder implementations;
frontend\src\core\models\ModelEvaluator.ts:218:    // This is a placeholder that should be implemented based on your model types;
frontend\src\core\AdvancedAnalysisEngine.ts:399:    return 0.85; // Placeholder;
frontend\src\core\AdvancedAnalysisEngine.ts:452:    // Check market liquidity (placeholder)
frontend\src\core\AdvancedAnalysisEngine.ts:455:    // Check price convergence (placeholder)
frontend\src\core\DataIntegrationHub.ts:271:        correlations: [], // Placeholder, to be updated later if correlation analysis is run on this source;
frontend\src\core\DataIntegrationHub.ts:299:  // Placeholder for a more sophisticated correlation analysis if needed;
frontend\src\core\PredictionEngine.ts:475:    const error = 0; // TODO: Replace with correct calculation if predicted value is available;
frontend\src\core\PredictionEngine.ts:487:    const error = 0; // TODO: Replace with correct calculation if predicted value is available;
frontend\src\core\PredictionEngine.ts:534:    return 1.0; // Placeholder;
frontend\src\core\PredictionEngine.ts:548:    return 'predicted-id'; // Placeholder;
frontend\src\core\PredictionEngine.ts:574:    return 0.7; // Placeholder;
frontend\src\core\PredictionEngine.ts:579:    return 0.6; // Placeholder;
frontend\src\core\PredictionEngine.ts:588:    return 0.5; // Placeholder;
frontend\src\core\PredictionEngine.ts:597:    return 0.4; // Placeholder;
frontend\src\core\PredictionEngine.ts:602:    return 0.7; // Placeholder;
frontend\src\core\StrategyEngine.ts:17:// Remove or comment out all imports and usages of missing modules (AnalysisEngine, SentimentEngine). If needed, replace with stubs or fallback logic to ensure the file compiles and runs.
frontend\src\core\StrategyEngine.ts:342:        historicalTrends: [], // Placeholder;
frontend\src\core\StrategyEngine.ts:343:        marketSignals: [], // Placeholder;
frontend\src\core\StrategyEngine.ts:344:        riskFactors: [], // Placeholder;
frontend\src\core\StrategyEngine.ts:640:    return baseRecommendation; // Placeholder;
frontend\src\core\StrategyEngine.ts:646:    return "stable"; // Placeholder;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:447:      unifiedPrediction: true, // TODO: Add actual health checks;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:477:        avgProcessingTime: 0, // TODO: Calculate from metrics;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:572:    // TODO: Implement model optimization strategies;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:584:    // TODO: Run comprehensive integration tests;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:595:    // TODO: Implement comprehensive feature engineering;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:623:      // TODO: Integrate other frontend engines;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:624:      Promise.resolve(features.sport_encoded * 0.8), // Placeholder;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:625:      Promise.resolve(features.market_features * 1.2), // Placeholder;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:629:      ), // Placeholder;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:660:      // TODO: Implement actual backend API calls;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:695:    // TODO: Implement advanced analysis;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:731:      accuracy: 0.85, // TODO: Calculate from historical data;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:789:    return Promise.resolve(0.05); // TODO: Implement real momentum calculation;
frontend\src\core\UltimateBrainCentralNervousSystem.ts:795:    return Promise.resolve(0.75); // TODO: Implement market efficiency assessment;
frontend\src\core\UnifiedAnalytics.ts:161:    // This is a placeholder for actual analytics processing;
frontend\src\core\UnifiedAnalytics.ts:167:    await Promise.resolve(); // Placeholder for actual processing;
frontend\src\core\UnifiedBettingSystem.ts:287:    // TODO: Replace with actual strategyConfig if/when available;
frontend\src\core\UnifiedBettingSystem.ts:415:    // TODO: Refactor or re-implement event listeners to match available EventBus API;
frontend\src\core\UnifiedBettingSystem.ts:430:    // TODO: Implement with available APIs;
frontend\src\core\UnifiedBettingSystem.ts:440:    // TODO: Implement with available APIs;
frontend\src\core\UnifiedBettingSystem.ts:452:    // TODO: Implement with available APIs;
frontend\src\core\UnifiedBettingSystem.ts:462:      // TODO: Implement error logging if/when monitor is available;
frontend\src\core\UnifiedBettingSystem.ts:1001:    // TODO: Add event emit if/when eventBus is available;
frontend\src\core\UnifiedMetrics.ts:49:    // TODO: Handle tags when metrics system is enhanced;
frontend\src\core\UnifiedMetrics.ts:55:    // TODO: Handle tags when metrics system is enhanced;
frontend\src\core\UnifiedMetrics.ts:60:    // TODO: Handle tags when metrics system is enhanced;
frontend\src\core\UnifiedMetrics.ts:65:    // TODO: Handle tags when metrics system is enhanced;
frontend\src\core\UnifiedMetrics.ts:70:    // TODO: Handle tags when metrics system is enhanced;
frontend\src\data\dataIntegrationService.ts:1:// Minimal stub for dataIntegrationService;
frontend\src\data\dataIntegrationService.ts:3:  // Minimal stub for build success;
frontend\src\hooks\UniversalHooks.ts:22:  // Mock data to prevent fetch errors;
frontend\src\hooks\UniversalHooks.ts:23:  const mockPredictions = Array.from({ length: limit }, (_, i) => ({
frontend\src\hooks\UniversalHooks.ts:36:    queryFn: async () => ({ data: mockPredictions }), // Return mock data;
frontend\src\hooks\UniversalHooks.ts:42:    predictions: query.data?.data || mockPredictions,
frontend\src\hooks\UniversalHooks.ts:43:    isLoading: false, // Set to false since we have mock data;
frontend\src\hooks\UniversalHooks.ts:53:  // Mock engine metrics to prevent fetch errors;
frontend\src\hooks\UniversalHooks.ts:54:  const mockMetrics = {
frontend\src\hooks\UniversalHooks.ts:65:    queryFn: async () => ({ data: mockMetrics }),
frontend\src\hooks\UniversalHooks.ts:86:  // Mock betting opportunities to prevent fetch errors;
frontend\src\hooks\UniversalHooks.ts:87:  const mockOpportunities = Array.from({ length: limit }, (_, i) => ({
frontend\src\hooks\UniversalHooks.ts:100:    queryFn: async () => ({ data: mockOpportunities }),
frontend\src\hooks\UniversalHooks.ts:106:    opportunities: query.data?.data || mockOpportunities,
frontend\src\hooks\useApi.ts:43:    // For now, it's a placeholder that doesn't fetch on mount.
frontend\src\hooks\useAuth.ts:63:      const mockToken = 'mock_jwt_token_' + Date.now();
frontend\src\hooks\useAuth.ts:64:      const mockUser: User = {
frontend\src\hooks\useAuth.ts:74:      localStorage.setItem('token', mockToken);
frontend\src\hooks\useAuth.ts:76:        token: mockToken,
frontend\src\hooks\useAuth.ts:77:        user: mockUser,
frontend\src\hooks\useAuth.ts:102:      const mockToken = 'mock_jwt_token_' + Date.now();
frontend\src\hooks\useAuth.ts:103:      const mockUser: User = {
frontend\src\hooks\useAuth.ts:113:      localStorage.setItem('token', mockToken);
frontend\src\hooks\useAuth.ts:115:        token: mockToken,
frontend\src\hooks\useAuth.ts:116:        user: mockUser,
frontend\src\hooks\useBetting.ts:229:    }) => Promise.reject(new Error("Bet placement not implemented yet")), // TODO: Implement placeBet in integration service;
frontend\src\hooks\useBetting.ts:321:    const mockHistory = [
frontend\src\hooks\useBetting.ts:332:      // Add more mock data as needed;
frontend\src\hooks\useBetting.ts:334:    setBetHistory(mockHistory);
frontend\src\hooks\useConfigFlags.ts:10:    mockMode: boolean;
frontend\src\hooks\useConfigFlags.ts:22:        mockMode: false,
frontend\src\hooks\useEnhancedBettingEngine.ts:796:// Mock implementations for missing services;
frontend\src\hooks\useLineupAPI.ts:20:// Placeholder API functions;
frontend\src\hooks\useLineupAPI.ts:22:  // Mock data - replace with actual API call when backend is ready;
frontend\src\hooks\useLineupAPI.ts:57:  // Mock submission - replace with actual API call when backend is ready;
frontend\src\hooks\useMetrics.tsx:45:            // Mock data - replace with actual API call;
frontend\src\hooks\useMetrics.tsx:46:            const mockMetrics: ModelPerformanceMetrics = {
frontend\src\hooks\useMetrics.tsx:67:            setPerformance(mockMetrics);
frontend\src\hooks\useModelPerformance.ts:58:            // Placeholder for API call;
frontend\src\hooks\useModelPerformance.ts:59:            const mockModels: ModelInfo[] = [
frontend\src\hooks\useModelPerformance.ts:64:            setModels(mockModels);
frontend\src\hooks\useModelPerformance.ts:65:            if (!selectedModel && mockModels.length > 0) {
frontend\src\hooks\useModelPerformance.ts:66:                setSelectedModel(mockModels[0].name);
frontend\src\hooks\useModelPerformance.ts:80:            // Placeholder for API call;
frontend\src\hooks\useModelPerformance.ts:81:            const mockMetrics: ModelPerformanceMetrics = {
frontend\src\hooks\useModelPerformance.ts:103:            setMetrics(mockMetrics);
frontend\src\hooks\useModelPerformance.ts:105:            // Mock history data;
frontend\src\hooks\useModelPerformance.ts:106:            const mockHistory = Array.from({ length: 30 }, (_, i) => ({
frontend\src\hooks\useModelPerformance.ts:115:            setHistory(mockHistory);
frontend\src\hooks\useNotificationCenter.ts:2:// TODO: Add tests;
frontend\src\hooks\useRiskProfile.ts:45:      // TODO: Add more validation rules based on other RiskProfile properties like:
frontend\src\hooks\useSettings.d.ts:3:    useMocks: boolean;
frontend\src\hooks\useSettings.ts:5:  useMocks: boolean;
frontend\src\hooks\useSettings.ts:11:  useMocks: false,
frontend\src\hooks\useStore.ts:77:            // TODO: Replace with actual API call;
frontend\src\hooks\useStore.ts:96:            // TODO: Replace with actual API call;
frontend\src\hooks\useUnifiedAnalytics.ts:220:  // --- Drift Detection (not implemented in service, placeholder) ---
frontend\src\hooks\useUnifiedAnalytics.ts:288:  // --- Realtime Metrics (not implemented in service, placeholder) ---
frontend\src\hooks\useUnifiedAnalytics.ts:400:  // TODO: Add more granular loading/error states if needed;
frontend\src\hooks\useUnifiedAnalytics.ts:401:  // TODO: Add ARIA live region support for analytics-driven UI updates;
frontend\src\hooks\useUnifiedAnalytics.ts:402:  // TODO: Add more comprehensive test coverage for analytics hook;
frontend\src\interfaces\SimpleUserInterface\MainDashboard.tsx:110:    // TODO: Navigate to service component;
frontend\src\mocks\browser.ts:5:const mockPlayers: Player[] = [
frontend\src\mocks\browser.ts:42:const mockEntries: Entry[] = [
frontend\src\mocks\browser.ts:56:const mockLineups: Lineup[] = [
frontend\src\mocks\browser.ts:98:    return HttpResponse.json(mockPlayers);
frontend\src\mocks\browser.ts:102:    return HttpResponse.json(mockEntries);
frontend\src\mocks\browser.ts:106:    return HttpResponse.json(mockLineups);
frontend\src\models\PvPMatchupModel.ts:112:      // Production warning: no mock metrics;
frontend\src\pages\auth\ForgotPasswordPage.tsx:20:      // Placeholder for forgot password functionality;
frontend\src\pages\auth\ForgotPasswordPage.tsx:22:      // await ApiService.forgotPassword(email); // TODO: Implement when backend ready;
frontend\src\pages\auth\ResetPasswordPage.tsx:40:      // Placeholder for reset password functionality;
frontend\src\pages\auth\ResetPasswordPage.tsx:42:      // await ApiService.resetPassword(token, formData.password); // TODO: Implement when backend ready;
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:7:// Mock the betting service;
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:8:jest.mock('@services/bettingService', () => ({
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:32:    jest.clearAllMocks();
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:41:    (getActiveBets as jest.Mock).mockRejectedValue(new Error('API Error'));
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:42:    (getTotalWinnings as jest.Mock).mockRejectedValue(new Error('API Error'));
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:43:    (getWinRate as jest.Mock).mockRejectedValue(new Error('API Error'));
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:53:    (getActiveBets as jest.Mock).mockResolvedValue(5);
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:54:    (getTotalWinnings as jest.Mock).mockResolvedValue(1000);
frontend\src\pages\Dashboard\__tests__\Dashboard.test.tsx:55:    (getWinRate as jest.Mock).mockResolvedValue(75);
frontend\src\pages\AuthPage.tsx:84:              className="w-full px-4 py-2 bg-surface/50 border border-gray-600 rounded-lg text-text focus:ring-primary focus:border-primary placeholder-gray-500 shadow-sm"
frontend\src\pages\AuthPage.tsx:85:              placeholder="you@example.com"
frontend\src\pages\AuthPage.tsx:97:              className="w-full px-4 py-2 bg-surface/50 border border-gray-600 rounded-lg text-text focus:ring-primary focus:border-primary placeholder-gray-500 shadow-sm"
frontend\src\pages\AuthPage.tsx:98:              placeholder="••••••••"
frontend\src\pages\BetsPage.tsx:26:// TODO: Add tests for new widgets;
frontend\src\pages\BetsPage.tsx:37:  // Placeholder: fetch events (replace with real fetch/service logic)
frontend\src\pages\index.tsx:42:  // Mock real-time data;
frontend\src\pages\Predictions.tsx:153:    // TODO: Implement bet actions;
frontend\src\pages\PredictionsDashboard.tsx:33:      // TODO: Handle real-time prediction updates if needed;
frontend\src\pages\PrizePicksPageEnhanced.tsx:39:  // Mock data - in real app, this would come from PrizePicks API;
frontend\src\pages\PrizePicksPageEnhanced.tsx:47:        const mockProjections: PlayerProjection[] = [
frontend\src\pages\PrizePicksPageEnhanced.tsx:115:        setProjections(mockProjections);
frontend\src\pages\PrizePicksPageEnhanced.tsx:116:        setFilteredProjections(mockProjections);
frontend\src\pages\PrizePicksPageEnhanced.tsx:121:          message: `${mockProjections.length} player projections loaded`,
frontend\src\pages\PrizePicksPageEnhanced.tsx:196:                placeholder="Search players..."
frontend\src\pages\Profile.tsx:6:const mockUserData = {
frontend\src\pages\Profile.tsx:24:  const [userData, setUserData] = useState(mockUserData);
frontend\src\pages\Profile.tsx:25:  const [editedData, setEditedData] = useState(mockUserData);
frontend\src\pages\RiskManagerPage.tsx:42:    // Placeholder: implement if BetRecord has a risk property;
frontend\src\pages\RiskManagerPage.tsx:186:              {/* TODO: Implement form fields and validation */}
frontend\src\services\__tests__\advancedPredictionService.test.ts:6:jest.mock('../predictionService');
frontend\src\services\__tests__\advancedPredictionService.test.ts:10:  let mockPredictionService: jest.Mocked<PredictionService>;
frontend\src\services\__tests__\advancedPredictionService.test.ts:13:    jest.clearAllMocks();
frontend\src\services\__tests__\advancedPredictionService.test.ts:15:    mockPredictionService = PredictionService.getInstance() as jest.Mocked<PredictionService>;
frontend\src\services\__tests__\advancedPredictionService.test.ts:19:    const mockOdds: BettingOdds[] = [
frontend\src\services\__tests__\advancedPredictionService.test.ts:30:    const mockMarketContext: MarketContext = {
frontend\src\services\__tests__\advancedPredictionService.test.ts:34:      odds: mockOdds,
frontend\src\services\__tests__\advancedPredictionService.test.ts:39:    const mockBettingContext: BettingContext = {
frontend\src\services\__tests__\advancedPredictionService.test.ts:56:    const mockBasePrediction = {
frontend\src\services\__tests__\advancedPredictionService.test.ts:72:      mockPredictionService.generatePrediction.mockReturnValue(mockBasePrediction);
frontend\src\services\__tests__\advancedPredictionService.test.ts:77:        mockMarketContext,
frontend\src\services\__tests__\advancedPredictionService.test.ts:78:        mockBettingContext;
frontend\src\services\__tests__\advancedPredictionService.test.ts:83:      expect(prediction?.basePrediction).toEqual(mockBasePrediction);
frontend\src\services\__tests__\advancedPredictionService.test.ts:93:      mockPredictionService.generatePrediction.mockReturnValue(null);
frontend\src\services\__tests__\advancedPredictionService.test.ts:96:        mockMarketContext,
frontend\src\services\__tests__\advancedPredictionService.test.ts:97:        mockBettingContext;
frontend\src\services\__tests__\advancedPredictionService.test.ts:104:      await service.generateAdvancedPrediction(mockMarketContext, mockBettingContext);
frontend\src\services\__tests__\advancedPredictionService.test.ts:111:      mockPredictionService.generatePrediction.mockReturnValue({
frontend\src\services\__tests__\advancedPredictionService.test.ts:112:        ...mockBasePrediction,
frontend\src\services\__tests__\advancedPredictionService.test.ts:116:      await service.generateAdvancedPrediction(mockMarketContext, mockBettingContext);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:15:jest.mock('../ArbitrageService');
frontend\src\services\__tests__\bettingOpportunityService.test.ts:16:jest.mock('../lineShoppingService');
frontend\src\services\__tests__\bettingOpportunityService.test.ts:17:jest.mock('../predictionService');
frontend\src\services\__tests__\bettingOpportunityService.test.ts:18:jest.mock('../advancedPredictionService');
frontend\src\services\__tests__\bettingOpportunityService.test.ts:19:jest.mock('../notification/notificationManager');
frontend\src\services\__tests__\bettingOpportunityService.test.ts:23:  let mockArbitrageService: jest.Mocked<ArbitrageService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:24:  let mockLineShoppingService: jest.Mocked<LineShoppingService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:25:  let mockPredictionService: jest.Mocked<PredictionService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:26:  let mockAdvancedPredictionService: jest.Mocked<AdvancedPredictionService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:27:  let mockNotificationManager: jest.Mocked<NotificationManager>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:30:    jest.clearAllMocks();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:32:    mockArbitrageService = ArbitrageService.getInstance() as jest.Mocked<ArbitrageService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:33:    mockLineShoppingService = new LineShoppingService() as jest.Mocked<LineShoppingService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:34:    mockPredictionService = PredictionService.getInstance() as jest.Mocked<PredictionService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:35:    mockAdvancedPredictionService =
frontend\src\services\__tests__\bettingOpportunityService.test.ts:36:      AdvancedPredictionService.getInstance() as jest.Mocked<AdvancedPredictionService>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:37:    mockNotificationManager = new NotificationManager() as jest.Mocked<NotificationManager>;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:43:      expect(mockNotificationManager.notifySystemAlert).toHaveBeenCalledWith(
frontend\src\services\__tests__\bettingOpportunityService.test.ts:56:      expect(mockNotificationManager.notifySystemAlert).toHaveBeenCalledWith(
frontend\src\services\__tests__\bettingOpportunityService.test.ts:67:      const mockOpportunity: ArbitrageOpportunity = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:92:      mockArbitrageService.emit('newOpportunity', mockOpportunity);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:94:      expect(mockNotificationManager.notifyArbitrageOpportunity).toHaveBeenCalledWith(
frontend\src\services\__tests__\bettingOpportunityService.test.ts:95:        mockOpportunity;
frontend\src\services\__tests__\bettingOpportunityService.test.ts:100:      const mockOpportunity: ArbitrageOpportunity = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:124:      mockArbitrageService.emit('newOpportunity', mockOpportunity);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:126:      expect(mockNotificationManager.notifyArbitrageOpportunity).not.toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:131:    const mockOdds: BettingOdds[] = [
frontend\src\services\__tests__\bettingOpportunityService.test.ts:144:      mockLineShoppingService.emit('oddsUpdated', { bookmakerId: 'bookie1', odds: mockOdds });
frontend\src\services\__tests__\bettingOpportunityService.test.ts:146:      expect(mockArbitrageService.monitorOpportunities).toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:147:      expect(mockLineShoppingService.findBestOdds).toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:148:      expect(mockPredictionService.generatePrediction).toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:149:      expect(mockAdvancedPredictionService.generateAdvancedPrediction).toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:153:      mockLineShoppingService.emit('oddsUpdated', { bookmakerId: 'bookie1', odds: mockOdds });
frontend\src\services\__tests__\bettingOpportunityService.test.ts:155:      expect(mockArbitrageService.monitorOpportunities).not.toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:156:      expect(mockLineShoppingService.findBestOdds).not.toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:157:      expect(mockPredictionService.generatePrediction).not.toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:158:      expect(mockAdvancedPredictionService.generateAdvancedPrediction).not.toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:164:      const mockPrediction = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:170:      mockPredictionService.emit('newPrediction', mockPrediction);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:172:      expect(mockNotificationManager.notifyModelUpdate).toHaveBeenCalledWith(
frontend\src\services\__tests__\bettingOpportunityService.test.ts:173:        `New prediction for ${mockPrediction.propId}`,
frontend\src\services\__tests__\bettingOpportunityService.test.ts:174:        `Confidence: ${(mockPrediction.confidence * 100).toFixed(1)}%`
frontend\src\services\__tests__\bettingOpportunityService.test.ts:179:      const mockPrediction = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:184:      mockPredictionService.emit('newPrediction', mockPrediction);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:186:      expect(mockNotificationManager.notifyModelUpdate).not.toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:192:      const mockAdvancedPrediction = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:202:      mockAdvancedPredictionService.emit('newAdvancedPrediction', mockAdvancedPrediction);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:205:        `Advanced prediction for ${mockAdvancedPrediction.basePrediction.propId}`,
frontend\src\services\__tests__\bettingOpportunityService.test.ts:206:        `Confidence: ${(mockAdvancedPrediction.confidence * 100).toFixed(1)}%`,
frontend\src\services\__tests__\bettingOpportunityService.test.ts:207:        `Expected Value: ${(mockAdvancedPrediction.expectedValue * 100).toFixed(1)}%`,
frontend\src\services\__tests__\bettingOpportunityService.test.ts:208:        `Risk Score: ${(mockAdvancedPrediction.riskAdjustedScore * 100).toFixed(1)}%`,
frontend\src\services\__tests__\bettingOpportunityService.test.ts:211:      expect(mockNotificationManager.notifyModelUpdate).toHaveBeenCalledWith(
frontend\src\services\__tests__\bettingOpportunityService.test.ts:218:      const mockAdvancedPrediction = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:227:      mockAdvancedPredictionService.emit('newAdvancedPrediction', mockAdvancedPrediction);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:229:      expect(mockNotificationManager.notifyModelUpdate).not.toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:235:      const mockSportsbook: Sportsbook = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:245:      service.registerSportsbook(mockSportsbook);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:247:      expect(mockLineShoppingService.registerSportsbook).toHaveBeenCalledWith(mockSportsbook);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:253:      const mockPreferences = {
frontend\src\services\__tests__\bettingOpportunityService.test.ts:258:      service.updateNotificationPreferences(mockPreferences);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:260:      expect(mockNotificationManager.updatePreferences).toHaveBeenCalledWith(mockPreferences);
frontend\src\services\__tests__\bettingOpportunityService.test.ts:268:      expect(mockArbitrageService.clearExpiredOpportunities).toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:269:      expect(mockLineShoppingService.clearExpiredOdds).toHaveBeenCalled();
frontend\src\services\__tests__\bettingOpportunityService.test.ts:270:      expect(mockPredictionService.clearPredictions).toHaveBeenCalled();
frontend\src\services\__tests__\marketAnalysisService.test.ts:7:  const mockOdds: BettingOdds[] = [
frontend\src\services\__tests__\marketAnalysisService.test.ts:10:      eventId: mockEventId,
frontend\src\services\__tests__\marketAnalysisService.test.ts:20:      eventId: mockEventId,
frontend\src\services\__tests__\marketAnalysisService.test.ts:36:      service.updateMarketMetrics(mockEventId, mockOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:44:      service.updateMarketMetrics(mockEventId, mockOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:57:      service.updateMarketMetrics(mockEventId, mockOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:62:          ...mockOdds[0],
frontend\src\services\__tests__\marketAnalysisService.test.ts:66:          ...mockOdds[1],
frontend\src\services\__tests__\marketAnalysisService.test.ts:71:      service.updateMarketMetrics(mockEventId, highVolumeOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:81:      service.updateMarketMetrics(mockEventId, mockOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:91:      service.updateMarketMetrics(mockEventId, mockOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:102:      service.updateMarketMetrics(mockEventId, mockOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:107:          ...mockOdds[0],
frontend\src\services\__tests__\marketAnalysisService.test.ts:111:          ...mockOdds[1],
frontend\src\services\__tests__\marketAnalysisService.test.ts:116:      service.updateMarketMetrics(mockEventId, increasedVolumeOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:125:      service.updateMarketMetrics(mockEventId, mockOdds);
frontend\src\services\__tests__\marketAnalysisService.test.ts:130:          ...mockOdds[0],
frontend\src\services\__tests__\marketAnalysisService.test.ts:134:          ...mockOdds[1],
frontend\src\services\__tests__\marketAnalysisService.test.ts:139:      service.updateMarketMetrics(mockEventId, differentVolumeOdds);
frontend\src\services\__tests__\predictionService.test.ts:5:jest.mock('../predictionService');
frontend\src\services\__tests__\predictionService.test.ts:9:  let mockService: jest.Mocked<PredictionService>;
frontend\src\services\__tests__\predictionService.test.ts:12:    jest.clearAllMocks();
frontend\src\services\__tests__\predictionService.test.ts:14:    mockService = service as jest.Mocked<PredictionService>;
frontend\src\services\__tests__\predictionService.test.ts:18:    const mockOdds: BettingOdds[] = [
frontend\src\services\__tests__\predictionService.test.ts:29:    const mockMarketContext: MarketContext = {
frontend\src\services\__tests__\predictionService.test.ts:33:      odds: mockOdds,
frontend\src\services\__tests__\predictionService.test.ts:38:    const mockHistoricalData: BettingOdds[] = [
frontend\src\services\__tests__\predictionService.test.ts:64:        ...mockMarketContext,
frontend\src\services\__tests__\predictionService.test.ts:73:      service.generatePrediction(mockMarketContext, mockHistoricalData);
frontend\src\services\__tests__\predictionService.test.ts:80:      const mockPrediction = {
frontend\src\services\__tests__\predictionService.test.ts:95:      mockService.getPrediction.mockReturnValue(mockPrediction);
frontend\src\services\__tests__\predictionService.test.ts:97:      expect(prediction).toEqual(mockPrediction);
frontend\src\services\__tests__\predictionService.test.ts:101:      mockService.getPrediction.mockReturnValue(undefined);
frontend\src\services\__tests__\predictionService.test.ts:110:      expect(mockService.clearPredictions).toHaveBeenCalled();
frontend\src\services\__tests__\predictionService.test.ts:116:      const mockHistoricalData: BettingOdds[] = [
frontend\src\services\__tests__\predictionService.test.ts:132:      const mockHistoricalData: BettingOdds[] = [
frontend\src\services\__tests__\predictionService.test.ts:150:      const mockFactors = [
frontend\src\services\__tests__\predictionService.test.ts:170:      const mockFactors = [
frontend\src\services\__tests__\prizePicksService.test.ts:11:// Mock apiClient;
frontend\src\services\__tests__\prizePicksService.test.ts:12:jest.mock('../api/client', () => ({
frontend\src\services\__tests__\prizePicksService.test.ts:18:// Mock unifiedMonitor;
frontend\src\services\__tests__\prizePicksService.test.ts:19:jest.mock('../../core/UnifiedMonitor', () => ({
frontend\src\services\__tests__\prizePicksService.test.ts:29:    jest.clearAllMocks();
frontend\src\services\__tests__\prizePicksService.test.ts:33:    const mockResponse = {
frontend\src\services\__tests__\prizePicksService.test.ts:76:      (apiClient.get as jest.Mock).mockResolvedValueOnce({
frontend\src\services\__tests__\prizePicksService.test.ts:78:        data: mockResponse,
frontend\src\services\__tests__\prizePicksService.test.ts:95:      (apiClient.get as jest.Mock).mockRejectedValueOnce(new Error('API Error'));
frontend\src\services\__tests__\prizePicksService.test.ts:102:      (apiClient.get as jest.Mock).mockResolvedValueOnce({
frontend\src\services\__tests__\prizePicksService.test.ts:112:      (apiClient.get as jest.Mock).mockResolvedValueOnce({
frontend\src\services\__tests__\prizePicksService.test.ts:114:        data: mockResponse,
frontend\src\services\__tests__\prizePicksService.test.ts:132:    const mockPlayerResponse = {
frontend\src\services\__tests__\prizePicksService.test.ts:147:      (apiClient.get as jest.Mock).mockResolvedValueOnce({
frontend\src\services\__tests__\prizePicksService.test.ts:149:        data: mockPlayerResponse,
frontend\src\services\__tests__\prizePicksService.test.ts:162:      (apiClient.get as jest.Mock).mockResolvedValueOnce({
frontend\src\services\__tests__\prizePicksService.test.ts:173:    const mockProps = [
frontend\src\services\__tests__\prizePicksService.test.ts:186:    const mockConfig = {
frontend\src\services\__tests__\prizePicksService.test.ts:210:          ...mockProps[0],
frontend\src\services\__tests__\prizePicksService.test.ts:228:      expect(result.props.length).toBeLessThanOrEqual(mockConfig.portfolioSize);
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:7:  let mockMarketContext: MarketContext;
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:8:  let mockBettingContext: BettingContext;
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:17:    mockMarketContext = {
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:48:    mockBettingContext = {
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:90:        { ...mockMarketContext, odds: [] },
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:91:        mockBettingContext;
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:99:      const prediction = await service.generatePrediction(mockMarketContext, {
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:100:        ...mockBettingContext,
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:110:        { ...mockMarketContext, lineMovements: [] },
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:111:        mockBettingContext;
frontend\src\services\__tests__\UnifiedPredictionService.test.ts:149:      await service.generatePrediction(mockMarketContext, mockBettingContext);
frontend\src\services\analytics\BacktestingService.ts:399:    return Math.random(); // Placeholder implementation;
frontend\src\services\analytics\BacktestingService.ts:463:    // This is a placeholder implementation;
frontend\src\services\analytics\BacktestingService.ts:527:    // This is a placeholder implementation;
frontend\src\services\analytics\BacktestingService.ts:533:    // This is a placeholder implementation;
frontend\src\services\analytics\BacktestingService.ts:539:    // This is a placeholder implementation;
frontend\src\services\analytics\BacktestingService.ts:566:    // This is a placeholder implementation;
frontend\src\services\analytics\BacktestingService.ts:572:    // This is a placeholder implementation;
frontend\src\services\analytics\featureCache.ts:154:      hitCount: 0, // TODO: Implement hit/miss counting;
frontend\src\services\analytics\featureEngineeringService.ts:410:    return 0; // Placeholder;
frontend\src\services\analytics\featureEngineeringService.ts:419:    return 0; // Placeholder;
frontend\src\services\analytics\featureLogging.ts:128:    // This is a placeholder implementation;
frontend\src\services\analytics\featureValidation.ts:408:    // This is a placeholder implementation;
frontend\src\services\analytics\ModelPerformanceTracker.ts:25:    // Placeholder: Replace with real stats calculation;
frontend\src\services\analytics\PatternRecognitionService.ts:8:      // Placeholder: Replace with real pattern recognition logic;
frontend\src\services\analytics\RiskAssessmentService.ts:8:      // Placeholder: Replace with real risk assessment logic;
frontend\src\services\analytics\ShapExplainerService.ts:8:      // Placeholder: Replace with actual SHAP logic or API call;
frontend\src\services\analytics\userPersonalizationService.ts:482:// TODO: Inject userPersonalizationService overlays into DashboardPage, BetsPage, AnalyticsPage and prediction overlays.
frontend\src\services\api\EnhancedApiService.ts:406:            // Production error handling - no mock data fallbacks;
frontend\src\services\api\EnhancedApiService.ts:418:            // Production error handling - no mock data fallbacks;
frontend\src\services\enhanced\DailyFantasyService.ts:178:      // Return realistic mock data;
frontend\src\services\enhanced\DailyFantasyService.ts:219:      // Return realistic mock players;
frontend\src\services\enhanced\DailyFantasyService.ts:325:      // Return mock optimal lineup;
frontend\src\services\enhanced\DailyFantasyService.ts:392:          contests: contests.status === "fulfilled" ? "DraftKings" : "Mock",
frontend\src\services\enhanced\DailyFantasyService.ts:401:          optimization: optimalLineup ? "FairPlay" : "Mock",
frontend\src\services\enhanced\DailyFantasyService.ts:411:   * Get real-time player ownership data (mock implementation)
frontend\src\services\enhanced\DailyFantasyService.ts:428:        ownership: Math.random() * 30, // Mock current ownership;
frontend\src\services\enhanced\ProductionValidationService.ts:144:          `API key not configured - some features will use mock data`,
frontend\src\services\enhanced\SportsbookDataService.ts:193:    // For now, we'll use mock data that represents the structure;
frontend\src\services\enhanced\SportsbookDataService.ts:195:    for (const sportsbook of mockSportsbooks) {
frontend\src\services\enhanced\SportsbookDataService.ts:221:    // For now, return mock data that represents the expected structure;
frontend\src\services\enhanced\SportsbookDataService.ts:444:      // Return mock line movement data;
frontend\src\services\enhanced\TheOddsService.ts:544:    // For now, return mock indicators based on line movements;
frontend\src\services\enhanced\TheOddsService.ts:551:        line_movement: (Math.random() - 0.5) * 10, // Mock line movement;
frontend\src\services\enhanced\UnifiedDataIntegrationService.ts:341:            best_sportsbook: "Mock Data",
frontend\src\services\enhanced\UnifiedDataIntegrationService.ts:522:          ownership_projection: Math.random() * 30, // Mock ownership;
frontend\src\services\integrations\apiBase.ts:33:    // TODO: Append to /logs/liveData.log if running in Node;
frontend\src\services\ml\ensemble\EnsemblePredictor.ts:895:    return 0.5; // Placeholder, replace with actual logic;
frontend\src\services\ml\ensemble\EnsemblePredictor.ts:951:    // TODO: Implement meta-model selection and instantiation;
frontend\src\services\ml\evaluation\ModelEvaluator.ts:225:    return 0.85; // Placeholder;
frontend\src\services\ml\models\EnsembleMLService.ts:300:    return 0.85; // Placeholder;
frontend\src\services\ml\models\EnsembleMLService.ts:305:    return 0.1; // Placeholder;
frontend\src\services\ml\models\LSTMModel.ts:76:        // Placeholder prediction logic;
frontend\src\services\ml\models\LSTMModel.ts:87:        // Placeholder training logic;
frontend\src\services\ml\models\LSTMModel.ts:92:        // Placeholder save logic;
frontend\src\services\ml\models\LSTMModel.ts:97:        // Placeholder load logic;
frontend\src\services\ml\models\MetaModel.ts:223:    // This is a placeholder;
frontend\src\services\ml\models\MetaModel.ts:229:    // This is a placeholder;
frontend\src\services\ml\models\TransformerModel.ts:131:        // Placeholder transformer prediction with attention simulation;
frontend\src\services\ml\models\TransformerModel.ts:165:        // Placeholder transformer training;
frontend\src\services\ml\models\XGBoostModel.ts:72:        // Placeholder gradient boosting prediction;
frontend\src\services\ml\models\XGBoostModel.ts:92:        // Placeholder boosting training;
frontend\src\services\ml\models\XGBoostModel.ts:97:        // Placeholder save logic;
frontend\src\services\ml\models\XGBoostModel.ts:102:        // Placeholder load logic;
frontend\src\services\ml\UnifiedMLEngine.ts:316:    // Mock feature importances - in real implementation, these would come from trained models;
frontend\src\services\ml\UnifiedMLEngine.ts:742:    const impliedMarketProb = 0.5; // Mock market probability;
frontend\src\services\ml\UnifiedMLEngine.ts:752:    const odds = 2.0; // Mock odds;
frontend\src\services\partner\__tests__\AffiliateService.test.ts:9:    jest.clearAllMocks();
frontend\src\services\partner\__tests__\AffiliateService.test.ts:13:    const mockLinks: AffiliateLink[] = [
frontend\src\services\partner\__tests__\AffiliateService.test.ts:17:    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => mockLinks });
frontend\src\services\partner\__tests__\AffiliateService.test.ts:19:    expect(links).toEqual(mockLinks);
frontend\src\services\partner\__tests__\AffiliateService.test.ts:24:    (fetch as jest.Mock).mockResolvedValue({ ok: false, statusText: 'Not Found' });
frontend\src\services\partner\__tests__\AffiliateService.test.ts:29:    (fetch as jest.Mock).mockResolvedValue({ ok: true });
frontend\src\services\partner\__tests__\AffiliateService.test.ts:35:    (fetch as jest.Mock).mockResolvedValue({ ok: false, statusText: 'Bad Request' });
frontend\src\services\partner\__tests__\AffiliateService.test.ts:40:    const mockOffers: AffiliateOffer[] = [
frontend\src\services\partner\__tests__\AffiliateService.test.ts:43:    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => mockOffers });
frontend\src\services\partner\__tests__\AffiliateService.test.ts:45:    expect(offers).toEqual(mockOffers);
frontend\src\services\partner\__tests__\AffiliateService.test.ts:50:    (fetch as jest.Mock).mockResolvedValue({ ok: false, statusText: 'Server Error' });
frontend\src\services\prediction\DailyFantasyService.ts:96:    // This is a placeholder implementation;
frontend\src\services\prediction\EnvironmentalService.ts:21:    // For now, return mock data;
frontend\src\services\prediction\MarketIntelligenceService.ts:20:    // For now, return mock data;
frontend\src\services\prediction\PerformanceAnalyticsService.ts:20:    // For now, return mock data;
frontend\src\services\prediction\PredictionIntegrationService.ts:265:    // Create a mock request for the private method;
frontend\src\services\prediction\PredictionIntegrationService.ts:282:      prediction: { value: 0, confidence: 0 }, // Placeholder values;
frontend\src\services\prediction\PsychologicalAnalyticsService.ts:22:    // For now, return mock data;
frontend\src\services\prediction\SocialDynamicsService.ts:23:    // For now, return mock data;
frontend\src\services\prediction\TechnologicalAnalyticsService.ts:20:    // For now, return mock data;
frontend\src\services\referee\__tests__\RefereeService.test.ts:9:    jest.clearAllMocks();
frontend\src\services\referee\__tests__\RefereeService.test.ts:13:    const mockStats: RefereeStats = { id: refereeId, name: 'John Doe', foulRate: 3.2 };
frontend\src\services\referee\__tests__\RefereeService.test.ts:14:    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => mockStats });
frontend\src\services\referee\__tests__\RefereeService.test.ts:16:    expect(stats).toEqual(mockStats);
frontend\src\services\referee\__tests__\RefereeService.test.ts:21:    (fetch as jest.Mock).mockResolvedValue({ ok: false, statusText: 'Not Found' });
frontend\src\services\referee\__tests__\RefereeService.test.ts:26:    const mockStats: RefereeStats[] = [
frontend\src\services\referee\__tests__\RefereeService.test.ts:30:    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => mockStats });
frontend\src\services\referee\__tests__\RefereeService.test.ts:32:    expect(stats).toEqual(mockStats);
frontend\src\services\referee\__tests__\RefereeService.test.ts:37:    (fetch as jest.Mock).mockResolvedValue({ ok: false, statusText: 'Server Error' });
frontend\src\services\referee\__tests__\RefereeService.test.ts:42:    const mockStats: RefereeStats[] = [
frontend\src\services\referee\__tests__\RefereeService.test.ts:45:    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => mockStats });
frontend\src\services\referee\__tests__\RefereeService.test.ts:47:    expect(stats).toEqual(mockStats);
frontend\src\services\referee\__tests__\RefereeService.test.ts:52:    (fetch as jest.Mock).mockResolvedValue({ ok: false, statusText: 'Bad Request' });
frontend\src\services\referee\__tests__\RefereeService.test.ts:58:    (fetch as jest.Mock).mockResolvedValue({ ok: true, json: async () => mockModeling });
frontend\src\services\referee\__tests__\RefereeService.test.ts:60:    expect(modeling).toEqual(mockModeling);
frontend\src\services\referee\__tests__\RefereeService.test.ts:65:    (fetch as jest.Mock).mockResolvedValue({ ok: false, statusText: 'Not Found' });
frontend\src\services\unified\UnifiedBettingAnalytics.ts:127:      // Placeholder: risk_reasoning should be sourced from model/strategy or risk assessment;
frontend\src\services\ApiErrorHandler.ts:2: * API Error Handler - Graceful error handling for production without mock data;
frontend\src\services\authService.ts:41:// The backend /auth/logout is a placeholder but can be called for completeness.
frontend\src\services\cloudMockService.ts:2: * Cloud Mock Service;
frontend\src\services\cloudMockService.ts:6:export class CloudMockService {
frontend\src\services\cloudMockService.ts:332:export const cloudMockService = new CloudMockService();
frontend\src\services\dataScrapingService.d.ts:4: * The backend /api/data-scraping/daily-fantasy-projections endpoint is currently mocked.
frontend\src\services\dataScrapingService.d.ts:22: * The backend /api/data-scraping/trigger-job endpoint is currently mocked.
frontend\src\services\dataScrapingService.ts:12: * The backend /api/data-scraping/daily-fantasy-projections endpoint is currently mocked.
frontend\src\services\dataScrapingService.ts:75: * The backend /api/data-scraping/trigger-job endpoint is currently mocked.
frontend\src\services\dataScrapingService.ts:102:    // Note: Backend uses POST but takes params in URL for this mock. Adjust if backend changes to use request body.
frontend\src\services\dataScrapingService.ts:105:    // Backend endpoint is POST, but parameters are query parameters for the mock.
frontend\src\services\dataScrapingService.ts:160:    // opponent: undefined, // Backend mock doesn't provide opponent;
frontend\src\services\enhancedDataSources.ts:128:        return { message: "Mock data", timestamp: new Date() };
frontend\src\services\enhancedIntegrationBridge.ts:182:   * Get Ultra Accuracy predictions (placeholder for real implementation)
frontend\src\services\enhancedIntegrationBridge.ts:253:   * Calculate time remaining (placeholder)
frontend\src\services\frontendProductionBridge.ts:6: * the backend APIs instead of mock data.
frontend\src\services\injuryService.ts:84:// TODO: Add comprehensive unit and integration tests for all fallback and error-handling logic.
frontend\src\services\IntelligenceOrchestrator.ts:250:          prediction: this.generateMockPrediction(),
frontend\src\services\IntelligenceOrchestrator.ts:317:      prediction: this.generateMockPredictionText(market),
frontend\src\services\IntelligenceOrchestrator.ts:380:  private generateMockPrediction(): any {
frontend\src\services\IntelligenceOrchestrator.ts:381:    // Mock prediction data;
frontend\src\services\IntelligenceOrchestrator.ts:388:  private generateMockPredictionText(market: string): string {
frontend\src\services\LiveAPIIntegrationService.ts:342:    // This is a placeholder - real arbitrage detection would be more complex;
frontend\src\services\marketAnalysisService.ts:398:    // Mock implementation - replace with actual API call;
frontend\src\services\marketAnalysisService.ts:443:    // Mock sentiment data - replace with actual sentiment analysis;
frontend\src\services\marketAnalysisService.ts:459:    // Mock arbitrage opportunities - replace with actual detection;
frontend\src\services\marketAnalysisService.ts:503:      spread: 0.02, // Mock spread;
frontend\src\services\MLSimulationService.ts:261:        actual: p.prediction, // Placeholder: replace with actual outcome if available;
frontend\src\services\MLSimulationService.ts:262:        won: true, // Placeholder;
frontend\src\services\MLSimulationService.ts:263:        payout: 0, // Placeholder;
frontend\src\services\newsService.d.ts:4: * No mocks, simulation, or fallback logic. Strict typing, ESM imports, UnifiedConfig, EventBus, real API only.
frontend\src\services\newsService.ts:7: * No mocks, simulation, or fallback logic. Strict typing, ESM imports, UnifiedConfig, EventBus, real API only.
frontend\src\services\newsService.ts:101:// TODO: Add comprehensive unit and integration tests for all fallback and error-handling logic.
frontend\src\services\predictionService.ts:207:        // TODO: Implement actual model performance retrieval;
frontend\src\services\predictionService.ts:218:        // TODO: Implement cache clearing;
frontend\src\services\PrizePicksAPI.d.ts:54:    private getMockProjections;
frontend\src\services\PrizePicksAPI.d.ts:57:    private getMockPlayer;
frontend\src\services\PrizePicksAPI.d.ts:58:    private getMockGame;
frontend\src\services\PrizePicksAPI.ts:110:      // In development mode, return mock data to prevent API spam;
frontend\src\services\PrizePicksAPI.ts:113:        import.meta.env.VITE_USE_MOCK_DATA === "true"
frontend\src\services\PrizePicksAPI.ts:116:        return this.getMockProjections(params);
frontend\src\services\PrizePicksAPI.ts:128:      return this.getMockProjections(params);
frontend\src\services\PrizePicksAPI.ts:132:  private getMockProjections(params: any): Projection[] {
frontend\src\services\PrizePicksAPI.ts:133:    // Return mock data for development;
frontend\src\services\PrizePicksAPI.ts:136:        id: "mock-1",
frontend\src\services\PrizePicksAPI.ts:162:        id: "mock-2",
frontend\src\services\PrizePicksAPI.ts:204:        import.meta.env.VITE_USE_MOCK_DATA === "true"
frontend\src\services\PrizePicksAPI.ts:206:        return this.getMockPlayer(playerId);
frontend\src\services\PrizePicksAPI.ts:214:      return this.getMockPlayer(playerId);
frontend\src\services\PrizePicksAPI.ts:222:        import.meta.env.VITE_USE_MOCK_DATA === "true"
frontend\src\services\PrizePicksAPI.ts:224:        return this.getMockGame(gameId);
frontend\src\services\PrizePicksAPI.ts:232:      return this.getMockGame(gameId);
frontend\src\services\PrizePicksAPI.ts:236:  private getMockPlayer(playerId: string): Player {
frontend\src\services\PrizePicksAPI.ts:239:      name: "Mock Player",
frontend\src\services\PrizePicksAPI.ts:240:      team: "MOCK",
frontend\src\services\PrizePicksAPI.ts:247:  private getMockGame(gameId: string): Game {
frontend\src\services\PrizePicksAPI.ts:250:      homeTeam: "MOCK1",
frontend\src\services\PrizePicksAPI.ts:251:      awayTeam: "MOCK2",
frontend\src\services\PrizePicksAPI.ts:302:    // This is a placeholder - you would typically use a proper rate limiting library;
frontend\src\services\prizePicksService.d.ts:9: * For now, this will be a placeholder or rely on data within already fetched props.
frontend\src\services\prizePicksService.ts:109: * For now, this will be a placeholder or rely on data within already fetched props.
frontend\src\services\prizePicksService.ts:144:    // Do not throw AppError here, allow undefined to be returned as per original mock;
frontend\src\services\prizePicksService.ts:198:    // TODO: The backend /api/prizepicks/prop/{propId} endpoint should ideally perform robust odds parsing;
frontend\src\services\prizePicksService.ts:217:    // Do not throw AppError here, allow null to be returned as per original mock;
frontend\src\services\productionApiService.ts:5: * replacing all hardcoded URLs and mock data with real API calls.
frontend\src\services\productionApiServiceNew.ts:5: * replacing all hardcoded URLs and mock data with real API calls.
frontend\src\services\proxyService.ts:3:// Placeholder for ProxyService;
frontend\src\services\quantumPredictionsService.ts:249:  // All mock data generation methods removed - now using real API data only
frontend\src\services\realApiService.ts:3: * Replaces cloudMockService with actual backend integration
frontend\src\services\RealDataManager.ts:3: * Provides comprehensive real data integration to replace all mock/static data;
frontend\src\services\realTimeDataAggregator.ts:647:// Mock implementation for missing service;
frontend\src\services\realTimeUpdates.ts:525:// TODO: Add comprehensive unit and integration tests for all fallback and error-handling logic.
frontend\src\services\sentimentService.d.ts:4: * The backend /api/sentiment/{topic} endpoint is currently mocked.
frontend\src\services\sentimentService.ts:22: * The backend /api/sentiment/{topic} endpoint is currently mocked.
frontend\src\services\sentimentService.ts:62:      // Positive/negative/neutral mentions are not directly provided by the mock backend endpoint.
frontend\src\services\UltraAccuracyIntegrationService.ts:210:        const mockRecommendations = {
frontend\src\services\UltraAccuracyIntegrationService.ts:217:            mockRecommendations,
frontend\src\services\UltraAccuracyIntegrationService.ts:234:        const mockProps = [
frontend\src\services\UltraAccuracyIntegrationService.ts:244:            mockProps,
frontend\src\services\UltraAccuracyIntegrationService.ts:261:        const mockPredictions = [
frontend\src\services\UltraAccuracyIntegrationService.ts:270:            mockPredictions,
frontend\src\services\UltraAccuracyService.ts:87:            // Always return mock ultra-accurate prediction if API fails;
frontend\src\services\UltraAccuracyService.ts:88:            return this.generateMockUltraAccuratePrediction(request);
frontend\src\services\UltraAccuracyService.ts:191:     * Generate mock ultra-accurate prediction for development;
frontend\src\services\UltraAccuracyService.ts:193:    private generateMockUltraAccuratePrediction(
frontend\src\services\UltraAccuracyService.ts:319:            hitRate: 0.85 // Mock hit rate;
frontend\src\services\UniversalServiceLayer.ts:26:  enableMocking?: boolean;
frontend\src\services\UniversalServiceLayer.ts:99:      enableMocking: import.meta.env.DEV,
frontend\src\services\UniversalServiceLayer.ts:195:    if (this.config.enableMocking) {
frontend\src\services\UniversalServiceLayer.ts:196:      return this.getMockPredictions(limit);
frontend\src\services\UniversalServiceLayer.ts:205:    if (this.config.enableMocking) {
frontend\src\services\UniversalServiceLayer.ts:206:      return this.getMockMetrics();
frontend\src\services\UniversalServiceLayer.ts:237:  private async getMockPredictions(
frontend\src\services\UniversalServiceLayer.ts:242:    const mockPredictions: Prediction[] = Array.from(
frontend\src\services\UniversalServiceLayer.ts:262:      data: mockPredictions,
frontend\src\services\UniversalServiceLayer.ts:268:  private async getMockMetrics(): Promise<APIResponse<EngineMetrics>> {
frontend\src\services\UniversalServiceLayer.ts:291:    if (this.config.enableMocking) {
frontend\src\services\UniversalServiceLayer.ts:292:      return this.getMockOpportunities();
frontend\src\services\UniversalServiceLayer.ts:317:  private async getMockOpportunities(): Promise<APIResponse<BetOpportunity[]>> {
frontend\src\services\UniversalServiceLayer.ts:320:    const mockOpportunities: BetOpportunity[] = Array.from(
frontend\src\services\UniversalServiceLayer.ts:342:      data: mockOpportunities,
frontend\src\services\UniversalServiceLayer.ts:355:    if (this.config.enableMocking) {
frontend\src\services\UniversalServiceLayer.ts:356:      return this.getMockProfile();
frontend\src\services\UniversalServiceLayer.ts:384:  private async getMockProfile(): Promise<APIResponse<UserProfile>> {
frontend\src\stories\PredictionSummaryCard.stories.tsx:11:  tags: ['autodocs'],
frontend\src\strategies\bettingStrategy.d.ts:7: * Calls the backend's /api/betting/calculate-strategy endpoint (currently mocked).
frontend\src\strategies\bettingStrategy.d.ts:18: * Expected backend mock response is a list of BackendStrategyBet (defined in this file), which gets mapped to BettingOpportunity[].
frontend\src\strategies\bettingStrategy.d.ts:33: * Calls the backend's /api/betting/place-bet endpoint (currently mocked).
frontend\src\strategies\bettingStrategy.d.ts:35: * Expected backend mock response is a list of BackendBetPlacementResult (defined in this file), mapped to BetPlacementResponse[].
frontend\src\strategies\bettingStrategy.ts:46: * Calls the backend's /api/betting/calculate-strategy endpoint (currently mocked).
frontend\src\strategies\bettingStrategy.ts:57: * Expected backend mock response is a list of BackendStrategyBet (defined in this file), which gets mapped to BettingOpportunity[].
frontend\src\strategies\bettingStrategy.ts:102:        confidence: 0.75, // Mock confidence, backend doesn't provide this for now;
frontend\src\strategies\bettingStrategy.ts:148: * Calls the backend's /api/betting/place-bet endpoint (currently mocked).
frontend\src\strategies\bettingStrategy.ts:150: * Expected backend mock response is a list of BackendBetPlacementResult (defined in this file), mapped to BetPlacementResponse[].
frontend\src\test\a11y\authPageA11y.test.tsx:10:// Mock UnifiedConfig to always provide a config object;
frontend\src\test\a11y\authPageA11y.test.tsx:11:jest.mock('../../core/UnifiedConfig', () => {
frontend\src\test\a11y\authPageA11y.test.tsx:44:  jest.spyOn(realAuthServiceModule.authService, 'login').mockResolvedValue({
frontend\src\test\a11y\authPageA11y.test.tsx:46:    token: 'mock-token',
frontend\src\test\a11y\authPageA11y.test.tsx:48:  jest.spyOn(realAuthServiceModule.authService, 'logout').mockResolvedValue(undefined);
frontend\src\test\a11y\dashboardPageA11y.test.tsx:12:// Mock UnifiedConfig to always provide a config object;
frontend\src\test\a11y\dashboardPageA11y.test.tsx:13:jest.mock('../../core/UnifiedConfig', () => {
frontend\src\test\a11y\dashboardPageA11y.test.tsx:42:// Mock necessary services or stores if DashboardPage relies on them heavily for rendering initial structure;
frontend\src\test\a11y\dashboardPageA11y.test.tsx:44:jest.mock('../../store/useAppStore', () => {
frontend\src\test\a11y\dashboardPageA11y.test.tsx:45:  // Zustand store hybrid mock;
frontend\src\test\a11y\dashboardPageA11y.test.tsx:126:// Mock Chart.js used by PerformanceChart;
frontend\src\test\a11y\dashboardPageA11y.test.tsx:129:// Mock ResizeObserver, often problematic in Jest;
frontend\src\test\a11y\dashboardPageA11y.test.tsx:130:globalThis.ResizeObserver = jest.fn().mockImplementation(() => ({
frontend\src\test\a11y\dashboardPageA11y.test.tsx:136:// Mock matchMedia;
frontend\src\test\a11y\dashboardPageA11y.test.tsx:147:jest.mock('../../components/modern/ESPNHeadlinesTicker', () => ({
frontend\src\test\api\APIEndpoints.test.ts:1:// TODO: Skipped all tests in this file due to missing '../../services/api' module. Restore or stub module to re-enable tests.
frontend\src\test\api\prizePicksApiService.test.ts:5:// Mock UnifiedConfig to always provide a config object;
frontend\src\test\api\prizePicksApiService.test.ts:6:jest.mock('../../core/UnifiedConfig', () => {
frontend\src\test\api\prizePicksApiService.test.ts:35:// Mocking fetch globally for API tests;
frontend\src\test\api\prizePicksApiService.test.ts:42:    (fetch as jest.Mock).mockClear();
frontend\src\test\api\prizePicksApiService.test.ts:44:      baseUrl: mockBaseUrl,
frontend\src\test\api\prizePicksApiService.test.ts:52:      const mockData = { data: [], included: [] }; // Provide a valid mock response structure;
frontend\src\test\api\prizePicksApiService.test.ts:53:      (fetch as jest.Mock).mockResolvedValueOnce({
frontend\src\test\api\prizePicksApiService.test.ts:55:        json: async () => mockData,
frontend\src\test\api\prizePicksApiService.test.ts:62:        `${mockBaseUrl}/projections?single_stat=true&league_id=NBA`,
frontend\src\test\api\prizePicksApiService.test.ts:65:      expect(data).toEqual(mockData);
frontend\src\test\api\prizePicksApiService.test.ts:70:      (fetch as jest.Mock).mockResolvedValueOnce({
frontend\src\test\api\prizePicksApiService.test.ts:72:        json: async () => mockData,
frontend\src\test\api\prizePicksApiService.test.ts:79:        `${mockBaseUrl}/projections?single_stat=true&league_id=NFL`,
frontend\src\test\api\prizePicksApiService.test.ts:85:      (fetch as jest.Mock).mockResolvedValueOnce({
frontend\src\test\api\prizePicksApiService.test.ts:100:        baseUrl: mockBaseUrl,
frontend\src\test\api\prizePicksApiService.test.ts:105:      (fetch as jest.Mock).mockResolvedValueOnce({
frontend\src\test\api\prizePicksApiService.test.ts:107:        json: async () => mockData,
frontend\src\test\api\prizePicksApiService.test.ts:114:        `${mockBaseUrl}/projections?single_stat=true&league_id=NBA`,
frontend\src\test\integration\AllFeatures.test.tsx:20:// Mock react-query;
frontend\src\test\integration\AllFeatures.test.tsx:21:jest.mock('@tanstack/react-query', () => ({
frontend\src\test\integration\AllFeatures.test.tsx:266:    // TODO: Add checks for all components/pages;
frontend\src\test\integration\authFlow.test.tsx:8:jest.mock('../../services/authService', () => ({
frontend\src\test\integration\authFlow.test.tsx:10:    login: jest.fn().mockImplementation(credentials => {
frontend\src\test\integration\authFlow.test.tsx:16:        token: 'mock-token',
frontend\src\test\integration\authFlow.test.tsx:19:    logout: jest.fn().mockResolvedValue(undefined),
frontend\src\test\integration\authFlow.test.tsx:20:    fetchCurrentUser: jest.fn().mockResolvedValue(null),
frontend\src\test\integration\authFlow.test.tsx:24:// Mock any other services that might be called on initial load, e.g., from Dashboard;
frontend\src\test\integration\authFlow.test.tsx:25:jest.mock('../../services/prizePicksService', () => ({
frontend\src\test\integration\authFlow.test.tsx:27:    fetchPrizePicksProps: jest.fn().mockResolvedValue([
frontend\src\test\integration\authFlow.test.tsx:51:    // Add other mocked methods as needed by components loaded after auth;
frontend\src\test\integration\authFlow.test.tsx:55:jest.mock('../../services/userService', () => ({
frontend\src\test\integration\authFlow.test.tsx:57:    fetchUserEntries: jest.fn().mockResolvedValue([
frontend\src\test\integration\authFlow.test.tsx:82:jest.mock('../../services/newsService', () => ({
frontend\src\test\integration\authFlow.test.tsx:84:    fetchHeadlines: jest.fn().mockResolvedValue([
frontend\src\test\integration\authFlow.test.tsx:99:// Explicitly mock webSocketService to ensure it uses the manual mock;
frontend\src\test\integration\authFlow.test.tsx:100:jest.mock('../../services/unified/WebSocketManager');
frontend\src\test\integration\authFlow.test.tsx:102:// Mock UnifiedConfig to always provide a config object;
frontend\src\test\integration\authFlow.test.tsx:103:jest.mock('../../core/UnifiedConfig', () => {
frontend\src\test\integration\authFlow.test.tsx:132:jest.mock('framer-motion', () => {
frontend\src\test\integration\authFlow.test.tsx:169:    jest.resetAllMocks();
frontend\src\test\integration\authFlow.test.tsx:228:    expect(token).toBe('mock-token');
frontend\src\test\integration\authFlow.test.tsx:234:    authService.login.mockRejectedValueOnce(new Error('Invalid credentials'));
frontend\src\test\integration\CompleteIntegrationTest.d.ts:5:declare const mockPredictionRequest: {
frontend\src\test\integration\CompleteIntegrationTest.d.ts:35:declare const mockPredictionResponse: {
frontend\src\test\integration\CompleteIntegrationTest.d.ts:159:declare const mockSystemHealth: {
frontend\src\test\integration\CompleteIntegrationTest.d.ts:182:declare const mockModelMetrics: {
frontend\src\test\integration\CompleteIntegrationTest.d.ts:202:export { mockPredictionRequest, mockPredictionResponse, mockSystemHealth, mockModelMetrics, };
frontend\src\test\integration\CompleteIntegrationTest.tsx:19:// Mock data for testing;
frontend\src\test\integration\CompleteIntegrationTest.tsx:20:const mockPredictionRequest = {
frontend\src\test\integration\CompleteIntegrationTest.tsx:51:const mockPredictionResponse = {
frontend\src\test\integration\CompleteIntegrationTest.tsx:162:const mockSystemHealth = {
frontend\src\test\integration\CompleteIntegrationTest.tsx:186:const mockModelMetrics = [
frontend\src\test\integration\CompleteIntegrationTest.tsx:229:// Mock the backend services;
frontend\src\test\integration\CompleteIntegrationTest.tsx:230:jest.mock("../../services/unified/EnhancedBackendApiService");
frontend\src\test\integration\CompleteIntegrationTest.tsx:231:jest.mock("../../services/unified/UnifiedEnhancedPredictionService");
frontend\src\test\integration\CompleteIntegrationTest.tsx:233:const mockBackendService =
frontend\src\test\integration\CompleteIntegrationTest.tsx:234:  EnhancedBackendApiService.getInstance as jest.MockedFunction<
frontend\src\test\integration\CompleteIntegrationTest.tsx:238:const mockPredictionService =
frontend\src\test\integration\CompleteIntegrationTest.tsx:239:  UnifiedEnhancedPredictionService.getInstance as jest.MockedFunction<
frontend\src\test\integration\CompleteIntegrationTest.tsx:244:  let mockBackendInstance: jest.Mocked<EnhancedBackendApiService key={768585}>;
frontend\src\test\integration\CompleteIntegrationTest.tsx:245:  let mockPredictionInstance: jest.Mocked<UnifiedEnhancedPredictionService key={122729}>;
frontend\src\test\integration\CompleteIntegrationTest.tsx:248:    // Mock backend service instance;
frontend\src\test\integration\CompleteIntegrationTest.tsx:249:    mockBackendInstance = {
frontend\src\test\integration\CompleteIntegrationTest.tsx:256:    // Mock prediction service instance;
frontend\src\test\integration\CompleteIntegrationTest.tsx:257:    mockPredictionInstance = {
frontend\src\test\integration\CompleteIntegrationTest.tsx:263:    mockBackendService.mockReturnValue(mockBackendInstance);
frontend\src\test\integration\CompleteIntegrationTest.tsx:264:    mockPredictionService.mockReturnValue(mockPredictionInstance);
frontend\src\test\integration\CompleteIntegrationTest.tsx:266:    // Setup default mock responses;
frontend\src\test\integration\CompleteIntegrationTest.tsx:267:    mockBackendInstance.getEnhancedRevolutionaryPrediction.mockResolvedValue(
frontend\src\test\integration\CompleteIntegrationTest.tsx:268:      mockPredictionResponse,
frontend\src\test\integration\CompleteIntegrationTest.tsx:270:    mockBackendInstance.getMathematicalFoundations.mockResolvedValue({
frontend\src\test\integration\CompleteIntegrationTest.tsx:282:    mockBackendInstance.getMathematicalAnalysis.mockResolvedValue({
frontend\src\test\integration\CompleteIntegrationTest.tsx:294:    mockBackendInstance.healthCheck.mockResolvedValue({
frontend\src\test\integration\CompleteIntegrationTest.tsx:301:    mockPredictionInstance.getModelPerformance.mockResolvedValue(
frontend\src\test\integration\CompleteIntegrationTest.tsx:302:      mockModelMetrics,
frontend\src\test\integration\CompleteIntegrationTest.tsx:304:    mockPredictionInstance.getSystemHealth.mockResolvedValue(mockSystemHealth);
frontend\src\test\integration\CompleteIntegrationTest.tsx:305:    mockPredictionInstance.generatePrediction.mockResolvedValue({
frontend\src\test\integration\CompleteIntegrationTest.tsx:389:    jest.resetAllMocks();
frontend\src\test\integration\CompleteIntegrationTest.tsx:442:            mockBackendInstance.getEnhancedRevolutionaryPrediction,
frontend\src\test\integration\CompleteIntegrationTest.tsx:536:        expect(mockPredictionInstance.getSystemHealth).toHaveBeenCalled();
frontend\src\test\integration\CompleteIntegrationTest.tsx:552:        expect(mockPredictionInstance.getModelPerformance).toHaveBeenCalled();
frontend\src\test\integration\CompleteIntegrationTest.tsx:581:        expect(mockPredictionInstance.generatePrediction).toHaveBeenCalled();
frontend\src\test\integration\CompleteIntegrationTest.tsx:604:        expect(mockPredictionInstance.getSystemHealth).toHaveBeenCalled();
frontend\src\test\integration\CompleteIntegrationTest.tsx:621:      // Mock a service error;
frontend\src\test\integration\CompleteIntegrationTest.tsx:622:      mockBackendInstance.getEnhancedRevolutionaryPrediction.mockRejectedValueOnce(
frontend\src\test\integration\CompleteIntegrationTest.tsx:635:          mockBackendInstance.getEnhancedRevolutionaryPrediction,
frontend\src\test\integration\CompleteIntegrationTest.tsx:650:          mockBackendInstance.getEnhancedRevolutionaryPrediction,
frontend\src\test\integration\CompleteIntegrationTest.tsx:687:        expect(mockPredictionInstance.getSystemHealth).toHaveBeenCalled();
frontend\src\test\integration\CompleteIntegrationTest.tsx:688:        expect(mockPredictionInstance.getModelPerformance).toHaveBeenCalled();
frontend\src\test\integration\CompleteIntegrationTest.tsx:724:          mockBackendInstance.getEnhancedRevolutionaryPrediction,
frontend\src\test\integration\CompleteIntegrationTest.tsx:750:        expect(mockPredictionInstance.generatePrediction).toHaveBeenCalledWith(
frontend\src\test\integration\CompleteIntegrationTest.tsx:761:        mockPredictionInstance.generatePrediction.mock.calls[0][0];
frontend\src\test\integration\CompleteIntegrationTest.tsx:768:  mockPredictionRequest,
frontend\src\test\integration\CompleteIntegrationTest.tsx:769:  mockPredictionResponse,
frontend\src\test\integration\CompleteIntegrationTest.tsx:770:  mockSystemHealth,
frontend\src\test\integration\CompleteIntegrationTest.tsx:771:  mockModelMetrics,
frontend\src\test\integration\MoneyMaker.test.tsx:8:// Mock the hooks and store;
frontend\src\test\integration\MoneyMaker.test.tsx:9:jest.mock('../../hooks/useFilteredPredictions');
frontend\src\test\integration\MoneyMaker.test.tsx:10:jest.mock('../../store/useAppStore');
frontend\src\test\integration\MoneyMaker.test.tsx:12:const mockPredictions = [
frontend\src\test\integration\MoneyMaker.test.tsx:35:    // Reset all mocks;
frontend\src\test\integration\MoneyMaker.test.tsx:36:    jest.clearAllMocks();
frontend\src\test\integration\MoneyMaker.test.tsx:38:    // Mock useFilteredPredictions;
frontend\src\test\integration\MoneyMaker.test.tsx:39:    (useFilteredPredictions as jest.Mock).mockReturnValue({
frontend\src\test\integration\MoneyMaker.test.tsx:40:      predictions: mockPredictions,
frontend\src\test\integration\MoneyMaker.test.tsx:44:      totalPredictions: mockPredictions.length,
frontend\src\test\integration\MoneyMaker.test.tsx:45:      filteredCount: mockPredictions.length,
frontend\src\test\integration\MoneyMaker.test.tsx:48:    // Mock useAppStore;
frontend\src\test\integration\MoneyMaker.test.tsx:49:    (useAppStore as jest.Mock).mockImplementation(selector =>
frontend\src\test\integration\MoneyMaker.test.tsx:51:        props: mockPredictions,
frontend\src\test\integration\MoneyMaker.test.tsx:91:    (useFilteredPredictions as jest.Mock).mockReturnValue({
frontend\src\test\integration\MoneyMaker.test.tsx:111:    (useFilteredPredictions as jest.Mock).mockReturnValue({
frontend\src\test\integration\MoneyMaker.test.tsx:130:    (useFilteredPredictions as jest.Mock).mockReturnValue({
frontend\src\test\performance\dashboardLoad.perf.test.ts:3:// This is a placeholder for performance tests.
frontend\src\test\performance\dashboardLoad.perf.test.ts:7:jest.mock('../../core/UnifiedConfig', () => {
frontend\src\test\performance\dashboardLoad.perf.test.ts:43:// Mocks (similar to accessibility test, ensure Dashboard can render)
frontend\src\test\performance\dashboardLoad.perf.test.ts:44:jest.mock('../../store/useAppStore', () => {
frontend\src\test\performance\dashboardLoad.perf.test.ts:45:  // Zustand store hybrid mock;
frontend\src\test\performance\dashboardLoad.perf.test.ts:128:  .mockImplementation(() => ({ observe: jest.fn(), unobserve: jest.fn(), disconnect: jest.fn() }));
frontend\src\test\performance\dashboardLoad.perf.test.ts:142:jest.mock('../../components/modern/ESPNHeadlinesTicker', () => ({
frontend\src\test\stateSync\storeConsistency.test.ts:3:// This is a placeholder for state synchronization tests.
frontend\src\test\stateSync\storeConsistency.test.ts:8:// Mock Sentry to suppress errors in test;
frontend\src\test\stateSync\storeConsistency.test.ts:9:jest.mock('@sentry/react', () => ({
frontend\src\test\stateSync\storeConsistency.test.ts:18:// Mock UnifiedConfig to always provide a config object;
frontend\src\test\stateSync\storeConsistency.test.ts:19:jest.mock('../../core/UnifiedConfig', () => {
frontend\src\test\stateSync\storeConsistency.test.ts:55:  jest.spyOn(realAuthServiceModule.authService, 'login').mockResolvedValue({
frontend\src\test\stateSync\storeConsistency.test.ts:57:    token: 'mock-token',
frontend\src\test\stateSync\storeConsistency.test.ts:59:  jest.spyOn(realAuthServiceModule.authService, 'logout').mockResolvedValue(undefined);
frontend\src\test\stateSync\storeConsistency.test.ts:62:    .mockResolvedValue([
frontend\src\test\stateSync\storeConsistency.test.ts:64:        id: 'mock-prop',
frontend\src\test\stateSync\storeConsistency.test.ts:73:  jest.spyOn(predictionService, 'fetchGeneralInsights').mockResolvedValue([]);
frontend\src\test\stateSync\storeConsistency.test.ts:128:    // Simulate login (mocked service returns user)
frontend\src\test\stateSync\storeConsistency.test.ts:147:    const mockLeg1 = {
frontend\src\test\stateSync\storeConsistency.test.ts:155:    const mockLeg2 = {
frontend\src\test\stateSync\storeConsistency.test.ts:165:      addLeg(mockLeg1);
frontend\src\test\stateSync\storeConsistency.test.ts:172:      addLeg(mockLeg2);
frontend\src\test\stateSync\storeConsistency.test.ts:179:      addLeg(mockLeg1);
frontend\src\test\stateSync\storeConsistency.test.ts:206:    // Simulate fetchProps (mocked to resolve)
frontend\src\test\stateSync\storeConsistency.test.ts:210:    // After fetch, props should be an array (mocked store returns at least one)
frontend\src\test\unit\StateSync.test.ts:28:      // Placeholder: real test would go here;
frontend\src\test\unit\StateSync.test.ts:35:      // Placeholder: real test would go here;
frontend\src\test\unit\StateSync.test.ts:42:      // Placeholder: real test would go here;
frontend\src\test\unit\StateSync.test.ts:47:      // Placeholder: real test would go here;
frontend\src\test\unit\StateSync.test.ts:54:      // Placeholder: real test would go here;
frontend\src\test\unit\UnifiedPredictionEngine.test.ts:75:      const opportunity: BettingOpportunity = eventHandler.mock.calls[0][0];
frontend\src\test\unit\UnifiedPredictionEngine.test.ts:106:      const opportunity: BettingOpportunity = eventHandler.mock.calls[0][0];
frontend\src\test\unit\useAppStore.test.ts:5:// Mock services that the store might call indirectly via actions;
frontend\src\test\unit\useAppStore.test.ts:6:// We only mock them if an action we test directly calls a service.
frontend\src\test\unit\useAppStore.test.ts:7:// For simple state changes, direct service mocking might not be needed.
frontend\src\test\unit\useAppStore.test.ts:9:// Example: Mock authService if testing login/logout actions that use it;
frontend\src\test\unit\useAppStore.test.ts:10:jest.mock('../../services/authService', () => ({
frontend\src\test\unit\useAppStore.test.ts:17:// Mock UnifiedConfig to always provide a config object;
frontend\src\test\unit\useAppStore.test.ts:18:jest.mock('../../core/UnifiedConfig', () => {
frontend\src\test\unit\useAppStore.test.ts:47:jest.mock('../../store/useAppStore', () => {
frontend\src\test\unit\useAppStore.test.ts:49:  // Zustand store hybrid mock;
frontend\src\test\unit\useAppStore.test.ts:116:    // Clear any mocks if they were called;
frontend\src\test\unit\useAppStore.test.ts:117:    jest.clearAllMocks();
frontend\src\test\unit\useAppStore.test.ts:144:    expect(true).toBe(true); // TODO: Implement real assertion if feature is implemented;
frontend\src\test\unit\useAppStore.test.ts:149:    expect(true).toBe(true); // TODO: Implement real assertion if feature is implemented;
frontend\src\test\unit\useAppStore.test.ts:153:  // - login success/failure (mocking authService.login responses)
frontend\src\test\featureCoverage.test.tsx:7:// Mock API and WebSocket;
frontend\src\test\featureCoverage.test.tsx:8:jest.mock('../hooks/useApiRequest', () => ({ __esModule: true, default: jest.fn() }));
frontend\src\test\featureCoverage.test.tsx:9:jest.mock('../hooks/useWebSocket', () => ({ __esModule: true, default: jest.fn() }));
frontend\src\test\featureCoverage.test.tsx:11:// TODO: Skipped all tests in this file due to incomplete feature coverage logic or missing mocks. Fix and re-enable.
frontend\src\test\featureCoverage.test.tsx:43:    useApiRequest.mockReturnValue({ data: null, error: 'Network Error', loading: false });
frontend\src\test\featureCoverage.test.tsx:50:    useApiRequest.mockReturnValue({ data: null, error: null, loading: true });
frontend\src\test\featureCoverage.test.tsx:78:    'mocks',
frontend\src\test\featureCoverage.test.tsx:82:      // Placeholder: implement file system check or require test for each file;
frontend\src\test\setup.ts:10:// Mock IntersectionObserver;
frontend\src\test\setup.ts:12:mockIntersectionObserver.mockReturnValue({
frontend\src\test\setup.ts:17:window.IntersectionObserver = mockIntersectionObserver;
frontend\src\test\setup.ts:19:// Mock ResizeObserver;
frontend\src\test\setup.ts:21:mockResizeObserver.mockReturnValue({
frontend\src\test\setup.ts:26:window.ResizeObserver = mockResizeObserver;
frontend\src\test\setup.ts:28:// Mock matchMedia;
frontend\src\test\setup.ts:31:  value: vi.fn().mockImplementation(query => ({
frontend\src\test\setup.ts:43:// Mock localStorage;
frontend\src\test\setup.ts:44:const localStorageMock = {
frontend\src\test\setup.ts:51:  value: localStorageMock,
frontend\src\test\setup.ts:54:// Mock WebSocket;
frontend\src\test\setup.ts:55:class MockWebSocket implements WebSocket {
frontend\src\test\setup.ts:88:    // Mock sending data;
frontend\src\test\setup.ts:122:// Replace the global WebSocket with our mock;
frontend\src\test\setup.ts:123:(global as any).WebSocket = MockWebSocket;
frontend\src\test\setup.ts:125:// Mock Notification API;
frontend\src\test\setup.ts:127:  value: vi.fn().mockImplementation(() => ({
frontend\src\test\setup.ts:129:    requestPermission: vi.fn().mockResolvedValue('granted'),
frontend\src\test\setupTests.d.ts:2:import 'jest-canvas-mock';
frontend\src\test\setupTests.ts:12:import 'jest-canvas-mock'; // Added to mock canvas for chart.js;
frontend\src\test\setupTests.ts:14:// Mock import.meta.env for Jest environment;
frontend\src\test\setupTests.ts:15:// Cast global to any to allow dynamic property assignment for the mock;
frontend\src\test\setupTests.ts:21:// Set default mock values for Vite environment variables used in the code;
frontend\src\test\setupTests.ts:33:// You can also mock other globals here if needed, e.g., fetch, localStorage, etc.
frontend\src\test\setupTests.ts:36:// Clear all mocks before each test (if not using clearMocks: true in jest.config.mjs)
frontend\src\test\setupTests.ts:38://   jest.clearAllMocks();
frontend\src\test\setupTests.ts:41:// Mock for window.matchMedia used by ThemeProvider;
frontend\src\test\setupTests.ts:44:  value: jest.fn().mockImplementation(query => ({
frontend\src\test\setupTests.ts:56:// Mock for ResizeObserver (used by Chart.js and potentially other layout-sensitive libraries)
frontend\src\test\setupTests.ts:57:(globalThis as any).ResizeObserver = jest.fn().mockImplementation(() => ({
frontend\src\test\setupTests.ts:63:// Mock for HTMLCanvasElement.getContext (for Chart.js and other canvas-based libs)
frontend\src\test\setupTests.ts:93:// You can also mock other global objects or functions if needed, for example:
frontend\src\test\setupTests.ts:101:jest.mock('chart.js', () => ({
frontend\src\test\setupTests.ts:113:jest.mock('chart.js/auto', () => ({
frontend\src\test\setupTests.ts:127:// Global mock for UnifiedConfig for all tests;
frontend\src\test\setupTests.ts:128:jest.mock('../core/UnifiedConfig', () => {
frontend\src\tests\e2e\prediction.test.ts:5:  const mockRiskProfile: RiskProfile = {
frontend\src\tests\e2e\prediction.test.ts:15:  const mockPredictions: ModelOutput[] = [
frontend\src\tests\e2e\prediction.test.ts:31:    // Mock API responses;
frontend\src\tests\e2e\prediction.test.ts:35:        body: JSON.stringify(mockPredictions),
frontend\src\tests\e2e\prediction.test.ts:42:        body: JSON.stringify(mockRiskProfile),
frontend\src\tests\e2e\prediction.test.ts:136:    // Mock API error;
frontend\src\tests\e2e\prediction.test.ts:158:    // Mock new risk profile;
frontend\src\tests\e2e\prediction.test.ts:160:      ...mockRiskProfile,
frontend\src\tests\example.test.ts:8:  mockUserStats, 
frontend\src\tests\example.test.ts:9:  mockBettingOpportunity, 
frontend\src\tests\example.test.ts:10:  mockPrediction,
frontend\src\tests\example.test.ts:11:  createMockApiResponse,
frontend\src\tests\example.test.ts:12:  createMockApiError,
frontend\src\tests\example.test.ts:15:  MockWebSocket,
frontend\src\tests\example.test.ts:20:  describe('Mock Data Validation', () => {
frontend\src\tests\example.test.ts:21:    it('should provide valid user stats mock data', () => {
frontend\src\tests\example.test.ts:22:      expect(mockUserStats).toBeDefined();
frontend\src\tests\example.test.ts:23:      expect(mockUserStats.balance).toBeGreaterThan(0);
frontend\src\tests\example.test.ts:24:      expect(mockUserStats.winRate).toBeGreaterThanOrEqual(0);
frontend\src\tests\example.test.ts:25:      expect(mockUserStats.winRate).toBeLessThanOrEqual(100);
frontend\src\tests\example.test.ts:28:    it('should provide valid betting opportunity mock data', () => {
frontend\src\tests\example.test.ts:29:      expect(isValidBettingOpportunity(mockBettingOpportunity)).toBe(true);
frontend\src\tests\example.test.ts:30:      expect(mockBettingOpportunity.odds).toBeGreaterThan(0);
frontend\src\tests\example.test.ts:31:      expect(mockBettingOpportunity.probability).toBeGreaterThanOrEqual(0);
frontend\src\tests\example.test.ts:32:      expect(mockBettingOpportunity.probability).toBeLessThanOrEqual(1);
frontend\src\tests\example.test.ts:35:    it('should provide valid prediction mock data', () => {
frontend\src\tests\example.test.ts:36:      expect(isValidPrediction(mockPrediction)).toBe(true);
frontend\src\tests\example.test.ts:37:      expect(mockPrediction.confidence).toBeGreaterThanOrEqual(0);
frontend\src\tests\example.test.ts:38:      expect(mockPrediction.confidence).toBeLessThanOrEqual(1);
frontend\src\tests\example.test.ts:39:      expect(Array.isArray(mockPrediction.factors)).toBe(true);
frontend\src\tests\example.test.ts:43:  describe('API Mocking', () => {
frontend\src\tests\example.test.ts:44:    it('should create successful API response mocks', async () => {
frontend\src\tests\example.test.ts:50:    it('should create API error mocks', async () => {
frontend\src\tests\example.test.ts:54:        await createMockApiError(errorMessage, errorStatus);
frontend\src\tests\example.test.ts:64:  describe('WebSocket Mocking', () => {
frontend\src\tests\example.test.ts:65:    let mockWs: MockWebSocket;
frontend\src\tests\example.test.ts:68:      mockWs = new MockWebSocket('ws://localhost:8000');
frontend\src\tests\example.test.ts:72:      mockWs.close();
frontend\src\tests\example.test.ts:75:    it('should create mock WebSocket with correct URL', () => {
frontend\src\tests\example.test.ts:76:      expect(mockWs.url).toBe('ws://localhost:8000');
frontend\src\tests\example.test.ts:77:      expect(mockWs.readyState).toBe(1); // OPEN;
frontend\src\tests\example.test.ts:80:    it('should handle mock message sending', () => {
frontend\src\tests\example.test.ts:82:      mockWs.send(JSON.stringify(testMessage));
frontend\src\tests\example.test.ts:90:        mockWs.onmessage = (event) => {
frontend\src\tests\example.test.ts:96:        mockWs.simulateMessage(testData);
frontend\src\tests\example.test.ts:103:      const mockRender = () => {
frontend\src\tests\example.test.ts:171:    // Mock API response for placing bet;
frontend\src\tests\example.test.ts:172:    const betResponse = await createMockApiResponse({
frontend\src\tests\optimization.test.ts:70:    const mockQueryClient = {
frontend\src\tests\optimization.test.ts:81:    expect(mockQueryClient.defaultOptions.queries).toBeDefined();
frontend\src\types\core.ts:35:// Example placeholder types (replace with real definitions as needed):
frontend\src\types\shared.ts:104:// TODO: Fix core type exports;
frontend\src\utils\__tests__\cacheUtils.test.ts:4:jest.mock('../../core/EventBus');
frontend\src\utils\__tests__\cacheUtils.test.ts:8:  let mockEventBus: jest.Mocked<EventBus>;
frontend\src\utils\__tests__\cacheUtils.test.ts:12:    jest.clearAllMocks();
frontend\src\utils\__tests__\cacheUtils.test.ts:13:    mockEventBus = {
frontend\src\utils\__tests__\cacheUtils.test.ts:17:    (EventBus.getInstance as jest.Mock).mockReturnValue(mockEventBus);
frontend\src\utils\__tests__\cacheUtils.test.ts:24:    expect(mockEventBus.emit).toHaveBeenCalledWith('cache:set', expect.any(Object));
frontend\src\utils\__tests__\cacheUtils.test.ts:25:    expect(mockEventBus.emit).toHaveBeenCalledWith('cache:hit', expect.any(Object));
frontend\src\utils\__tests__\cacheUtils.test.ts:30:    expect(mockEventBus.emit).toHaveBeenCalledWith('cache:miss', expect.any(Object));
frontend\src\utils\__tests__\cacheUtils.test.ts:37:      expect(mockEventBus.emit).toHaveBeenCalledWith(
frontend\src\utils\__tests__\cacheUtils.test.ts:47:    expect(mockEventBus.emit).toHaveBeenCalledWith('cache:miss', expect.any(Object));
frontend\src\utils\__tests__\cacheUtils.test.ts:54:      expect(mockEventBus.emit).toHaveBeenCalledWith(
frontend\src\utils\__tests__\cacheUtils.test.ts:69:    expect(mockEventBus.emit).toHaveBeenCalledWith(
frontend\src\utils\__tests__\cacheUtils.test.ts:79:    expect(mockEventBus.emit).toHaveBeenCalledWith(
frontend\src\utils\__tests__\cacheUtils.test.ts:90:    expect(mockEventBus.emit).toHaveBeenCalledWith('cache:clear', expect.any(Object));
frontend\src\utils\AdvancedAnalysisEngine.ts:466:    // Check market liquidity (placeholder)
frontend\src\utils\AdvancedAnalysisEngine.ts:469:    // Check price convergence (placeholder)
frontend\src\utils\DataIntegrationHub.ts:268:        correlations: [], // Placeholder, to be updated later if correlation analysis is run on this source;
frontend\src\utils\DataIntegrationHub.ts:292:  // Placeholder for a more sophisticated correlation analysis if needed;
frontend\src\utils\index.ts:9:// TODO: Fix UniversalUtils imports when the module is available;
frontend\src\utils\odds.ts:38: * WARNING: Should not be used for generating mock odds data;
frontend\src\utils\PredictionEngine.ts:490:    const error = 0; // TODO: Replace with correct calculation if predicted value is available;
frontend\src\utils\PredictionEngine.ts:503:    const error = 0; // TODO: Replace with correct calculation if predicted value is available;
frontend\src\utils\PredictionEngine.ts:545:    return 1.0; // Placeholder;
frontend\src\utils\PredictionEngine.ts:559:    return 'predicted-id'; // Placeholder;
frontend\src\utils\PredictionEngine.ts:581:    return 0.7; // Placeholder;
frontend\src\utils\PredictionEngine.ts:586:    return 0.6; // Placeholder;
frontend\src\utils\PredictionEngine.ts:591:    return 0.5; // Placeholder;
frontend\src\utils\PredictionEngine.ts:596:    return 0.4; // Placeholder;
frontend\src\utils\PredictionEngine.ts:601:    return 0.7; // Placeholder;
frontend\src\utils\productionErrorHandler.ts:2: * Production-ready error handler replacing all TODO error implementations;
frontend\src\utils\ProjectionBettingStrategy.ts:1:// Placeholder file to fix TypeScript compilation errors;
frontend\src\utils\SentimentEnhancedAnalyzer.ts:201:    // TODO: Replace 'OddsData' with actual odds type when finalized;
frontend\src\utils\setup.ts:12:// Mock IntersectionObserver;
frontend\src\utils\setup.ts:13:class MockIntersectionObserver implements IntersectionObserver {
frontend\src\utils\setup.ts:22:  mockReturnValue(): void {}
frontend\src\utils\setup.ts:24:window.IntersectionObserver = MockIntersectionObserver as unknown as typeof IntersectionObserver;
frontend\src\utils\setup.ts:26:// Mock ResizeObserver;
frontend\src\utils\setup.ts:27:class MockResizeObserver implements ResizeObserver {
frontend\src\utils\setup.ts:32:  mockReturnValue(): void {}
frontend\src\utils\setup.ts:34:window.ResizeObserver = MockResizeObserver as unknown as typeof ResizeObserver;
frontend\src\utils\setup.ts:36:// Mock matchMedia;
frontend\src\utils\setup.ts:51:// Mock localStorage;
frontend\src\utils\setup.ts:52:const localStorageMock = {
frontend\src\utils\setup.ts:59:  value: localStorageMock,
frontend\src\utils\setup.ts:62:// Mock WebSocket;
frontend\src\utils\setup.ts:63:class MockWebSocket implements WebSocket {
frontend\src\utils\setup.ts:97:    // Mock sending data;
frontend\src\utils\setup.ts:132:// Replace the global WebSocket with our mock;
frontend\src\utils\setup.ts:133:(global as unknown as { WebSocket: unknown }).WebSocket = MockWebSocket;
frontend\src\utils\setup.ts:135:// Mock Notification API;
frontend\src\utils\setupE2ETests.ts:4:// Mock WebSocket;
frontend\src\utils\setupE2ETests.ts:5:class MockWebSocket implements WebSocket {
frontend\src\utils\setupE2ETests.ts:6:  static instances: MockWebSocket[] = [];
frontend\src\utils\setupE2ETests.ts:16:  readyState: number = MockWebSocket.CONNECTING;
frontend\src\utils\setupE2ETests.ts:25:    MockWebSocket.instances.push(this);
frontend\src\utils\setupE2ETests.ts:29:    // Mock send implementation;
frontend\src\utils\setupE2ETests.ts:33:    this.readyState = MockWebSocket.CLOSED;
frontend\src\utils\setupE2ETests.ts:41:    MockWebSocket.instances = [];
frontend\src\utils\setupE2ETests.ts:44:  static getLastInstance(): MockWebSocket {
frontend\src\utils\setupE2ETests.ts:45:    return MockWebSocket.instances[MockWebSocket.instances.length - 1];
frontend\src\utils\setupE2ETests.ts:50:    this.readyState = MockWebSocket.OPEN;
frontend\src\utils\setupE2ETests.ts:89:// Replace global WebSocket with mock;
frontend\src\utils\setupE2ETests.ts:90:global.WebSocket = MockWebSocket as unknown as typeof WebSocket;
frontend\src\utils\setupE2ETests.ts:92:// Mock fetch;
frontend\src\utils\setupE2ETests.ts:93:const mockFetch = jest.fn().mockImplementation((_input: RequestInfo | URL, _init?: RequestInit) => {
frontend\src\utils\setupE2ETests.ts:102:global.fetch = mockFetch as unknown as typeof fetch;
frontend\src\utils\setupE2ETests.ts:104:// Mock IntersectionObserver;
frontend\src\utils\setupE2ETests.ts:105:class MockIntersectionObserver {
frontend\src\utils\setupE2ETests.ts:111:global.IntersectionObserver = MockIntersectionObserver as unknown as typeof IntersectionObserver;
frontend\src\utils\setupE2ETests.ts:113:// Mock ResizeObserver;
frontend\src\utils\setupE2ETests.ts:114:class MockResizeObserver {
frontend\src\utils\setupE2ETests.ts:120:global.ResizeObserver = MockResizeObserver as unknown as typeof ResizeObserver;
frontend\src\utils\setupE2ETests.ts:122:// Mock window.matchMedia;
frontend\src\utils\setupE2ETests.ts:125:  value: jest.fn().mockImplementation((query: unknown) => ({
frontend\src\utils\setupE2ETests.ts:137:// Mock localStorage;
frontend\src\utils\setupE2ETests.ts:138:const localStorageMock = (() => {
frontend\src\utils\setupE2ETests.ts:153:Object.defineProperty(window, 'localStorage', { value: localStorageMock });
frontend\src\utils\setupE2ETests.ts:155:// Mock sessionStorage;
frontend\src\utils\setupE2ETests.ts:156:const sessionStorageMock = (() => {
frontend\src\utils\setupE2ETests.ts:171:Object.defineProperty(window, 'sessionStorage', { value: sessionStorageMock });
frontend\src\utils\setupE2ETests.ts:173:// Mock window.location;
frontend\src\utils\setupE2ETests.ts:192:// Mock window.history;
frontend\src\utils\setupE2ETests.ts:204:// Mock window.navigator;
frontend\src\utils\setupIntegrationTests.ts:4:// Mock WebSocket;
frontend\src\utils\setupIntegrationTests.ts:5:class MockWebSocket implements WebSocket {
frontend\src\utils\setupIntegrationTests.ts:6:  static instances: MockWebSocket[] = [];
frontend\src\utils\setupIntegrationTests.ts:20:    MockWebSocket.instances.push(this);
frontend\src\utils\setupIntegrationTests.ts:24:    // Mock send implementation;
frontend\src\utils\setupIntegrationTests.ts:36:    MockWebSocket.instances = [];
frontend\src\utils\setupIntegrationTests.ts:39:  static getLastInstance(): MockWebSocket {
frontend\src\utils\setupIntegrationTests.ts:40:    return MockWebSocket.instances[MockWebSocket.instances.length - 1];
frontend\src\utils\setupIntegrationTests.ts:84:// Replace global WebSocket with mock;
frontend\src\utils\setupIntegrationTests.ts:85:global.WebSocket = MockWebSocket as unknown as typeof WebSocket;
frontend\src\utils\setupIntegrationTests.ts:87:// Mock fetch;
frontend\src\utils\setupIntegrationTests.ts:88:const mockFetch = jest.fn().mockImplementation((url: string, options?: RequestInit) => {
frontend\src\utils\setupIntegrationTests.ts:97:global.fetch = mockFetch as unknown as typeof fetch;
frontend\src\utils\setupIntegrationTests.ts:99:// Mock IntersectionObserver;
frontend\src\utils\setupIntegrationTests.ts:100:class MockIntersectionObserver {
frontend\src\utils\setupIntegrationTests.ts:106:global.IntersectionObserver = MockIntersectionObserver as unknown as typeof IntersectionObserver;
frontend\src\utils\setupIntegrationTests.ts:108:// Mock ResizeObserver;
frontend\src\utils\setupIntegrationTests.ts:109:class MockResizeObserver {
frontend\src\utils\setupIntegrationTests.ts:115:global.ResizeObserver = MockResizeObserver as unknown as typeof ResizeObserver;
frontend\src\utils\setupIntegrationTests.ts:117:// Mock window.matchMedia;
frontend\src\utils\setupIntegrationTests.ts:120:  value: jest.fn().mockImplementation((query: unknown) => ({
frontend\src\utils\setupIntegrationTests.ts:132:// Mock localStorage;
frontend\src\utils\setupIntegrationTests.ts:133:const localStorageMock = (() => {
frontend\src\utils\setupIntegrationTests.ts:148:Object.defineProperty(window, 'localStorage', { value: localStorageMock });
frontend\src\utils\setupIntegrationTests.ts:150:// Mock sessionStorage;
frontend\src\utils\setupIntegrationTests.ts:151:const sessionStorageMock = (() => {
frontend\src\utils\setupIntegrationTests.ts:166:Object.defineProperty(window, 'sessionStorage', { value: sessionStorageMock });
frontend\src\utils\setupTests.d.ts:2:import 'jest-canvas-mock';
frontend\src\utils\setupTests.ts:2:import 'jest-canvas-mock'; // Added to mock canvas for chart.js;
frontend\src\utils\setupTests.ts:5:// Mock import.meta.env for Jest environment;
frontend\src\utils\setupTests.ts:6:// Cast global to unknown to allow dynamic property assignment for the mock;
frontend\src\utils\setupTests.ts:12:// Set default mock values for Vite environment variables used in the code;
frontend\src\utils\setupTests.ts:24:// You can also mock other globals here if needed, e.g., fetch, localStorage, etc.
frontend\src\utils\setupTests.ts:27:// Clear all mocks before each test (if not using clearMocks: true in jest.config.mjs)
frontend\src\utils\setupTests.ts:29://   jest.clearAllMocks();
frontend\src\utils\setupTests.ts:32:// Mock for window.matchMedia used by ThemeProvider;
frontend\src\utils\setupTests.ts:35:  value: jest.fn().mockImplementation((query: unknown) => ({
frontend\src\utils\setupTests.ts:47:// Mock for ResizeObserver (used by Chart.js and potentially other layout-sensitive libraries)
frontend\src\utils\setupTests.ts:48:class MockResizeObserver {
frontend\src\utils\setupTests.ts:54:global.ResizeObserver = MockResizeObserver as unknown as typeof ResizeObserver;
frontend\src\utils\setupTests.ts:56:// Mock for HTMLCanvasElement.getContext (for Chart.js and other canvas-based libs)
frontend\src\utils\setupTests.ts:86:// You can also mock other global objects or functions if needed, for example:
frontend\src\utils\setupTests.ts:94:jest.mock('chart.js', () => ({
frontend\src\utils\setupTests.ts:106:jest.mock('chart.js/auto', () => ({
frontend\src\utils\setupTests.ts:120:// Global mock for UnifiedConfig for all tests;
frontend\src\utils\setupTests.ts:121:jest.mock('../core/UnifiedConfig', () => {
frontend\src\utils\setupTests.ts:156:// Mock IntersectionObserver;
frontend\src\utils\setupTests.ts:157:class MockIntersectionObserver {
frontend\src\utils\setupTests.ts:163:global.IntersectionObserver = MockIntersectionObserver as unknown as typeof IntersectionObserver;
frontend\src\utils\setupTests.ts:165:// Mock localStorage;
frontend\src\utils\setupTests.ts:166:const localStorageMock = (() => {
frontend\src\utils\setupTests.ts:181:Object.defineProperty(window, 'localStorage', { value: localStorageMock });
frontend\src\utils\setupTests.ts:183:// Mock sessionStorage;
frontend\src\utils\setupTests.ts:184:const sessionStorageMock = (() => {
frontend\src\utils\setupTests.ts:199:Object.defineProperty(window, 'sessionStorage', { value: sessionStorageMock });
frontend\src\utils\SocialSentimentAdapter.ts:82:      return { score: 0, volume: 0 }; // Production: no mock data;
frontend\src\utils\StateSync.test.ts:26:      // Placeholder: real test would go here;
frontend\src\utils\StateSync.test.ts:33:      // Placeholder: real test would go here;
frontend\src\utils\StateSync.test.ts:40:      // Placeholder: real test would go here;
frontend\src\utils\StateSync.test.ts:45:      // Placeholder: real test would go here;
frontend\src\utils\StateSync.test.ts:52:      // Placeholder: real test would go here;
frontend\src\utils\test-utils.ts:5:// Mock data generators;
frontend\src\utils\test-utils.ts:6:export const mockUserStats = {
frontend\src\utils\test-utils.ts:17:export const mockBettingOpportunity = {
frontend\src\utils\test-utils.ts:31:export const mockPrediction = {
frontend\src\utils\test-utils.ts:44:// API mocking utilities;
frontend\src\utils\test-utils.ts:45:export const createMockApiResponse = <T,>(data: T, delay = 0): Promise<T> => {
frontend\src\utils\test-utils.ts:51:export const createMockApiError = (message = 'API Error', status = 500) => {
frontend\src\utils\test-utils.ts:72:// WebSocket mocking;
frontend\src\utils\test-utils.ts:73:export class MockWebSocket {
frontend\src\utils\test-utils.ts:89:    // Mock sending data;
frontend\src\utils\test-utils.tsx:53:// Mock data generators;
frontend\src\utils\test-utils.tsx:54:export const mockUserStats = {
frontend\src\utils\test-utils.tsx:65:export const mockBettingOpportunity = {
frontend\src\utils\test-utils.tsx:79:export const mockPrediction = {
frontend\src\utils\test-utils.tsx:92:// API mocking utilities;
frontend\src\utils\test-utils.tsx:93:export const createMockApiResponse = <T, key={424684}>(data: T, delay = 0): Promise<T key={964330}> => {
frontend\src\utils\test-utils.tsx:99:export const createMockApiError = (message = 'API Error', status = 500) => {
frontend\src\utils\test-utils.tsx:113:// Mock data generators;
frontend\src\utils\test-utils.tsx:114:export const mockUserStats = {
frontend\src\utils\test-utils.tsx:125:export const mockBettingOpportunity = {
frontend\src\utils\test-utils.tsx:139:export const mockPrediction = {
frontend\src\utils\test-utils.tsx:152:// API mocking utilities;
frontend\src\utils\test-utils.tsx:153:export const createMockApiResponse = <T, key={424684}>(data: T, delay = 0): Promise<T key={964330}> => {
frontend\src\utils\test-utils.tsx:159:export const createMockApiError = (message = 'API Error', status = 500) => {
frontend\src\utils\test-utils.tsx:180:// WebSocket mocking;
frontend\src\utils\test-utils.tsx:181:export class MockWebSocket {
frontend\src\utils\test-utils.tsx:197:    // Mock sending data;
frontend\src\utils\UltimateUtils.ts:91:  // WARNING: This should NOT be used for generating mock/fake data in production;
frontend\src\utils\UnifiedBettingAnalytics.ts:69:    // odds and market are not used due to placeholder implementation;
frontend\src\utils\UnifiedBettingAnalytics.ts:70:    const odds = 2; // Placeholder odds value for calculation;
frontend\src\utils\UnifiedBettingAnalytics.ts:71:    // Placeholder implementation since UnifiedDataService is missing;
frontend\src\utils\UnifiedBettingAnalytics.ts:90:  // Placeholder for future prediction model integration;
frontend\src\utils\UnifiedBettingAnalytics.ts:113:    // This is a placeholder for extensible, production-ready logic;
frontend\src\utils\UnifiedBettingAnalytics.ts:127:    // Placeholder implementation since UnifiedDataService is missing;
frontend\src\utils\UnifiedPredictionEngine.test.ts:78:      const opportunity: BettingOpportunity = eventHandler.mock.calls[0][0];
frontend\src\utils\UnifiedPredictionEngine.test.ts:109:      const opportunity: BettingOpportunity = eventHandler.mock.calls[0][0];
frontend\src\LoginPage.tsx:46:                    placeholder="Email"
frontend\src\LoginPage.tsx:54:                    placeholder="Password"
frontend\src\setupTests.ts:14:// Mock window.matchMedia;
frontend\src\setupTests.ts:17:  value: jest.fn().mockImplementation(query => ({
frontend\src\setupTests.ts:29:// Mock ResizeObserver;
frontend\src\setupTests.ts:30:global.ResizeObserver = jest.fn().mockImplementation(() => ({
frontend\component_audit.js:61:      issues.push('File too short - likely a stub');
frontend\component_audit.js:100:    stubComponents: 0,
frontend\component_audit.js:125:    } else if (issues.some(issue => issue.includes('stub'))) {
frontend\component_audit.js:126:      audit.stubComponents += components.length;
frontend\component_audit.js:135:              issues.some(issue => issue.includes('stub')) ? 'stub' : 'broken'
frontend\component_audit.js:168:  const stubFiles = Object.entries(audit.components)
frontend\component_audit.js:169:    .filter(([, data]) => data.status === 'stub');
frontend\component_audit.js:171:  if (stubFiles.length > 0) {
frontend\component_audit.js:173:    stubFiles.forEach(([filePath, data]) => {
frontend\eslint.config.js:14:      "src/__mocks__/**",
frontend\jest.config.js:30:    "\\.(gif|ttf|eot|svg|png)$": "<rootDir>/src/test/__mocks__/fileMock.js",
frontend\jest.config.js:67:  // Clear mocks between tests;
frontend\jest.config.js:68:  clearMocks: true,
legacy_tests_backup\AdminPanel.test.tsx:8:// Mock the auth hook
legacy_tests_backup\AdminPanel.test.tsx:9:jest.mock('../../../hooks/useAuth', () => ({
legacy_tests_backup\AdminPanel.test.tsx:13:// Mock the admin service
legacy_tests_backup\AdminPanel.test.tsx:14:jest.mock('../../../services/adminService', () => ({
legacy_tests_backup\AdminPanel.test.tsx:23:const mockUser = {
legacy_tests_backup\AdminPanel.test.tsx:29:const mockMetrics = {
legacy_tests_backup\AdminPanel.test.tsx:38:const mockUsers = [
legacy_tests_backup\AdminPanel.test.tsx:55:const mockLogs = [
legacy_tests_backup\AdminPanel.test.tsx:84:    (useAuth as jest.Mock).mockReturnValue({
legacy_tests_backup\AdminPanel.test.tsx:85:      user: mockUser,
legacy_tests_backup\AdminPanel.test.tsx:89:    (adminService.getSystemMetrics as jest.Mock).mockResolvedValue(mockMetrics);
legacy_tests_backup\AdminPanel.test.tsx:90:    (adminService.getUsers as jest.Mock).mockResolvedValue(mockUsers);
legacy_tests_backup\AdminPanel.test.tsx:91:    (adminService.getSystemLogs as jest.Mock).mockResolvedValue(mockLogs);
legacy_tests_backup\authFlow.test.tsx:8:jest.mock('../../services/authService', () => ({
legacy_tests_backup\authFlow.test.tsx:10:    login: jest.fn().mockImplementation((credentials) => {
legacy_tests_backup\authFlow.test.tsx:14:      return Promise.resolve({ user: { id: 'u1', email: credentials.email, username: 'testuser' }, token: 'mock-token' });
legacy_tests_backup\authFlow.test.tsx:16:    logout: jest.fn().mockResolvedValue(undefined),
legacy_tests_backup\authFlow.test.tsx:17:    fetchCurrentUser: jest.fn().mockResolvedValue(null),
legacy_tests_backup\authFlow.test.tsx:21:// Mock any other services that might be called on initial load, e.g., from Dashboard
legacy_tests_backup\authFlow.test.tsx:22:jest.mock('../../services/prizePicksService', () => ({
legacy_tests_backup\authFlow.test.tsx:24:    fetchPrizePicksProps: jest.fn().mockResolvedValue([
legacy_tests_backup\authFlow.test.tsx:48:    // Add other mocked methods as needed by components loaded after auth
legacy_tests_backup\authFlow.test.tsx:52:jest.mock('../../services/userService', () => ({
legacy_tests_backup\authFlow.test.tsx:54:    fetchUserEntries: jest.fn().mockResolvedValue([
legacy_tests_backup\authFlow.test.tsx:79:jest.mock('../../services/newsService', () => ({
legacy_tests_backup\authFlow.test.tsx:81:    fetchHeadlines: jest.fn().mockResolvedValue([
legacy_tests_backup\authFlow.test.tsx:96:// Explicitly mock webSocketService to ensure it uses the manual mock
legacy_tests_backup\authFlow.test.tsx:97:jest.mock('../../services/webSocketService');
legacy_tests_backup\authFlow.test.tsx:99:// Mock UnifiedConfig to always provide a config object
legacy_tests_backup\authFlow.test.tsx:100:jest.mock('../../core/UnifiedConfig', () => {
legacy_tests_backup\authFlow.test.tsx:129:jest.mock('framer-motion', () => {
legacy_tests_backup\authFlow.test.tsx:150:    jest.resetAllMocks();
legacy_tests_backup\authFlow.test.tsx:203:    expect(token).toBe('mock-token');
legacy_tests_backup\authFlow.test.tsx:209:    authService.login.mockRejectedValueOnce(new Error('Invalid credentials'));
legacy_tests_backup\authPageA11y.test.tsx:10:// Mock UnifiedConfig to always provide a config object
legacy_tests_backup\authPageA11y.test.tsx:11:jest.mock('../../core/UnifiedConfig', () => {
legacy_tests_backup\authPageA11y.test.tsx:45:  jest.spyOn(realAuthServiceModule.authService, 'login').mockResolvedValue({ user: { id: 'u1', email: 'test@example.com', username: 'testuser' }, token: 'mock-token' });
legacy_tests_backup\authPageA11y.test.tsx:46:  jest.spyOn(realAuthServiceModule.authService, 'logout').mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:9:jest.mock('../services/analytics/userPersonalizationService');
legacy_tests_backup\bettingAutomationService.test.ts:10:jest.mock('../services/analytics/predictionOptimizationService');
legacy_tests_backup\bettingAutomationService.test.ts:11:jest.mock('../services/riskManagement');
legacy_tests_backup\bettingAutomationService.test.ts:12:jest.mock('../services/bankroll');
legacy_tests_backup\bettingAutomationService.test.ts:13:jest.mock('../services/notification');
legacy_tests_backup\bettingAutomationService.test.ts:14:jest.mock('../services/unified/UnifiedBettingCore');
legacy_tests_backup\bettingAutomationService.test.ts:20:    jest.clearAllMocks();
legacy_tests_backup\bettingAutomationService.test.ts:25:    // Mock service initializations
legacy_tests_backup\bettingAutomationService.test.ts:26:    (userPersonalizationService.initialize as jest.Mock) = jest.fn().mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:27:    (predictionOptimizationService.initialize as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:29:      .mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:30:    (riskManagementService.initialize as jest.Mock) = jest.fn().mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:31:    (bankrollService.initialize as jest.Mock) = jest.fn().mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:32:    (unifiedBettingCore.initialize as jest.Mock) = jest.fn().mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:34:    // Mock notification service
legacy_tests_backup\bettingAutomationService.test.ts:35:    (notificationService.notify as jest.Mock) = jest.fn();
legacy_tests_backup\bettingAutomationService.test.ts:48:    // Mock notification service
legacy_tests_backup\bettingAutomationService.test.ts:49:    (notificationService.notify as jest.Mock) = jest.fn();
legacy_tests_backup\bettingAutomationService.test.ts:57:    // Mock bankroll service
legacy_tests_backup\bettingAutomationService.test.ts:58:    (bankrollService.checkStopLoss as jest.Mock) = jest.fn().mockReturnValue(true);
legacy_tests_backup\bettingAutomationService.test.ts:59:    (notificationService.notify as jest.Mock) = jest.fn();
legacy_tests_backup\bettingAutomationService.test.ts:68:    // Mock bankroll service
legacy_tests_backup\bettingAutomationService.test.ts:69:    (bankrollService.checkTakeProfit as jest.Mock) = jest.fn().mockReturnValue(true);
legacy_tests_backup\bettingAutomationService.test.ts:70:    (notificationService.notify as jest.Mock) = jest.fn();
legacy_tests_backup\bettingAutomationService.test.ts:79:    // Mock prediction service
legacy_tests_backup\bettingAutomationService.test.ts:80:    const mockPrediction = {
legacy_tests_backup\bettingAutomationService.test.ts:85:    (predictionOptimizationService.getOptimizedPrediction as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:87:      .mockResolvedValue([mockPrediction]);
legacy_tests_backup\bettingAutomationService.test.ts:89:    // Mock user personalization service
legacy_tests_backup\bettingAutomationService.test.ts:90:    (userPersonalizationService.getPersonalizedPrediction as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:92:      .mockResolvedValue(mockPrediction);
legacy_tests_backup\bettingAutomationService.test.ts:94:    // Mock risk management service
legacy_tests_backup\bettingAutomationService.test.ts:95:    const mockRiskAssessment = {
legacy_tests_backup\bettingAutomationService.test.ts:102:    (riskManagementService.assessRisk as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:104:      .mockResolvedValue(mockRiskAssessment);
legacy_tests_backup\bettingAutomationService.test.ts:106:    // Mock unified betting core
legacy_tests_backup\bettingAutomationService.test.ts:107:    (unifiedBettingCore.placeBet as jest.Mock) = jest.fn().mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:113:      prediction: mockPrediction,
legacy_tests_backup\bettingAutomationService.test.ts:115:      riskAssessment: mockRiskAssessment,
legacy_tests_backup\bettingAutomationService.test.ts:120:    // Mock prediction service
legacy_tests_backup\bettingAutomationService.test.ts:121:    const mockPrediction = {
legacy_tests_backup\bettingAutomationService.test.ts:126:    (predictionOptimizationService.getOptimizedPrediction as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:128:      .mockResolvedValue([mockPrediction]);
legacy_tests_backup\bettingAutomationService.test.ts:130:    // Mock user personalization service
legacy_tests_backup\bettingAutomationService.test.ts:131:    (userPersonalizationService.getPersonalizedPrediction as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:133:      .mockResolvedValue(mockPrediction);
legacy_tests_backup\bettingAutomationService.test.ts:135:    // Mock risk management service with high risk
legacy_tests_backup\bettingAutomationService.test.ts:136:    const mockRiskAssessment = {
legacy_tests_backup\bettingAutomationService.test.ts:143:    (riskManagementService.assessRisk as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:145:      .mockResolvedValue(mockRiskAssessment);
legacy_tests_backup\bettingAutomationService.test.ts:147:    // Mock unified betting core
legacy_tests_backup\bettingAutomationService.test.ts:148:    (unifiedBettingCore.placeBet as jest.Mock) = jest.fn().mockResolvedValue(undefined);
legacy_tests_backup\bettingAutomationService.test.ts:157:    // Mock prediction service to throw error
legacy_tests_backup\bettingAutomationService.test.ts:158:    (predictionOptimizationService.getOptimizedPrediction as jest.Mock) = jest
legacy_tests_backup\bettingAutomationService.test.ts:160:      .mockRejectedValue(new Error('Test error'));
legacy_tests_backup\bettingAutomationService.test.ts:161:    (notificationService.notify as jest.Mock) = jest.fn();
legacy_tests_backup\BettingDashboard.test.tsx:10:// Mock all stores
legacy_tests_backup\BettingDashboard.test.tsx:11:vi.mock('../../services/websocket', () => ({
legacy_tests_backup\BettingDashboard.test.tsx:15:vi.mock('../../stores/oddsStore', () => ({
legacy_tests_backup\BettingDashboard.test.tsx:19:vi.mock('../../stores/predictionStore', () => ({
legacy_tests_backup\BettingDashboard.test.tsx:23:vi.mock('../../stores/payoutStore', () => ({
legacy_tests_backup\BettingDashboard.test.tsx:27:vi.mock('../../stores/riskProfileStore', () => ({
legacy_tests_backup\BettingDashboard.test.tsx:32:  const mockEventId = 'test-event-123';
legacy_tests_backup\BettingDashboard.test.tsx:35:    // Reset all mocks before each test
legacy_tests_backup\BettingDashboard.test.tsx:36:    vi.clearAllMocks();
legacy_tests_backup\BettingDashboard.test.tsx:38:    // Mock WebSocket store
legacy_tests_backup\BettingDashboard.test.tsx:39:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:47:    // Mock Odds store
legacy_tests_backup\BettingDashboard.test.tsx:48:    (useOddsStore as any).mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:49:      getOddsForEvent: vi.fn().mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:60:    // Mock Prediction store
legacy_tests_backup\BettingDashboard.test.tsx:61:    (usePredictionStore as any).mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:62:      getPredictionForEvent: vi.fn().mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:72:    // Mock Payout store
legacy_tests_backup\BettingDashboard.test.tsx:73:    (usePayoutStore as any).mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:74:      getPayoutPreview: vi.fn().mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:82:    // Mock Risk Profile store
legacy_tests_backup\BettingDashboard.test.tsx:83:    (useRiskProfileStore as any).mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:94:    render(<BettingDashboard eventId={mockEventId} />);
legacy_tests_backup\BettingDashboard.test.tsx:103:    render(<BettingDashboard eventId={mockEventId} />);
legacy_tests_backup\BettingDashboard.test.tsx:106:    expect(useWebSocketStore().subscribeToEvent).toHaveBeenCalledWith(mockEventId);
legacy_tests_backup\BettingDashboard.test.tsx:110:    render(<BettingDashboard eventId={mockEventId} />);
legacy_tests_backup\BettingDashboard.test.tsx:117:    // Mock reconnecting state
legacy_tests_backup\BettingDashboard.test.tsx:118:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:126:    render(<BettingDashboard eventId={mockEventId} />);
legacy_tests_backup\BettingDashboard.test.tsx:133:    // Mock error state
legacy_tests_backup\BettingDashboard.test.tsx:134:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\BettingDashboard.test.tsx:142:    render(<BettingDashboard eventId={mockEventId} />);
legacy_tests_backup\BettingDashboard.test.tsx:149:    const { container } = render(<BettingDashboard eventId={mockEventId} />);
legacy_tests_backup\BettingOpportunities.test.tsx:9:jest.mock('../../services/bettingOpportunityService');
legacy_tests_backup\BettingOpportunities.test.tsx:12:  let mockService: jest.Mocked<BettingOpportunityService>;
legacy_tests_backup\BettingOpportunities.test.tsx:15:    jest.clearAllMocks();
legacy_tests_backup\BettingOpportunities.test.tsx:16:    mockService = BettingOpportunityService.getInstance() as jest.Mocked<BettingOpportunityService>;
legacy_tests_backup\BettingOpportunities.test.tsx:27:    expect(mockService.startMonitoring).toHaveBeenCalled();
legacy_tests_backup\BettingOpportunities.test.tsx:34:    expect(mockService.stopMonitoring).toHaveBeenCalled();
legacy_tests_backup\BettingOpportunities.test.tsx:38:    const mockNotification: Notification = {
legacy_tests_backup\BettingOpportunities.test.tsx:50:      mockService.emit('newNotification', mockNotification);
legacy_tests_backup\BettingOpportunities.test.tsx:58:    const mockOpportunity: ArbitrageOpportunity = {
legacy_tests_backup\BettingOpportunities.test.tsx:84:      mockService.emit('arbitrageOpportunity', mockOpportunity);
legacy_tests_backup\BettingOpportunities.test.tsx:92:    const mockOpportunity: LineShoppingResult = {
legacy_tests_backup\BettingOpportunities.test.tsx:114:      mockService.emit('lineShoppingOpportunity', mockOpportunity);
legacy_tests_backup\BettingOpportunities.test.tsx:122:    const mockPrediction: Prediction = {
legacy_tests_backup\BettingOpportunities.test.tsx:144:      mockService.emit('prediction', mockPrediction);
legacy_tests_backup\BettingOpportunities.test.tsx:154:    const mockNotification: Notification = {
legacy_tests_backup\BettingOpportunities.test.tsx:166:      mockService.emit('newNotification', mockNotification);
legacy_tests_backup\BettingOpportunities.test.tsx:170:    expect(mockService.markNotificationAsRead).toHaveBeenCalledWith('test-id');
legacy_tests_backup\BettingOpportunities.test.tsx:176:    expect(mockService.removeAllListeners).toHaveBeenCalled();
legacy_tests_backup\BettingSettingsPanel.test.tsx:6:// Mock the useBettingSettings hook
legacy_tests_backup\BettingSettingsPanel.test.tsx:7:jest.mock('../../../hooks/useBettingSettings');
legacy_tests_backup\BettingSettingsPanel.test.tsx:9:const mockSettings = {
legacy_tests_backup\BettingSettingsPanel.test.tsx:18:const mockHandlers = {
legacy_tests_backup\BettingSettingsPanel.test.tsx:27:    (useBettingSettings as jest.Mock).mockReturnValue({
legacy_tests_backup\BettingSettingsPanel.test.tsx:28:      settings: mockSettings,
legacy_tests_backup\BettingSettingsPanel.test.tsx:31:      ...mockHandlers,
legacy_tests_backup\BettingSettingsPanel.test.tsx:36:    jest.clearAllMocks();
legacy_tests_backup\BettingSettingsPanel.test.tsx:40:    (useBettingSettings as jest.Mock).mockReturnValue({
legacy_tests_backup\BettingSettingsPanel.test.tsx:41:      settings: mockSettings,
legacy_tests_backup\BettingSettingsPanel.test.tsx:44:      ...mockHandlers,
legacy_tests_backup\BettingSettingsPanel.test.tsx:52:    (useBettingSettings as jest.Mock).mockReturnValue({
legacy_tests_backup\BettingSettingsPanel.test.tsx:53:      settings: mockSettings,
legacy_tests_backup\BettingSettingsPanel.test.tsx:56:      ...mockHandlers,
legacy_tests_backup\BettingSettingsPanel.test.tsx:82:    expect(mockHandlers.handleRiskProfileChange).toHaveBeenCalledWith('conservative');
legacy_tests_backup\BettingSettingsPanel.test.tsx:91:    expect(mockHandlers.handleStakeChange).toHaveBeenCalledWith(200);
legacy_tests_backup\BettingSettingsPanel.test.tsx:100:    expect(mockHandlers.handleModelChange).toHaveBeenCalledWith('model-2');
legacy_tests_backup\BettingSettingsPanel.test.tsx:109:    expect(mockHandlers.resetSettings).toHaveBeenCalled();
legacy_tests_backup\BettingSettingsSummary.test.tsx:6:// Mock the useBettingSettings hook
legacy_tests_backup\BettingSettingsSummary.test.tsx:7:jest.mock('../../../hooks/useBettingSettings');
legacy_tests_backup\BettingSettingsSummary.test.tsx:9:const mockSettings = {
legacy_tests_backup\BettingSettingsSummary.test.tsx:20:    (useBettingSettings as jest.Mock).mockReturnValue({
legacy_tests_backup\BettingSettingsSummary.test.tsx:21:      settings: mockSettings,
legacy_tests_backup\BettingSettingsSummary.test.tsx:26:    jest.clearAllMocks();
legacy_tests_backup\BettingSettingsSummary.test.tsx:69:    (useBettingSettings as jest.Mock).mockReturnValue({
legacy_tests_backup\BettingSettingsSummary.test.tsx:70:      settings: { ...mockSettings, modelId: '' },
legacy_tests_backup\BettingSettingsSummary.test.tsx:81:    (useBettingSettings as jest.Mock).mockReturnValue({
legacy_tests_backup\BettingSettingsSummary.test.tsx:82:      settings: { ...mockSettings, riskProfile: 'conservative' },
legacy_tests_backup\BettingSettingsSummary.test.tsx:88:    (useBettingSettings as jest.Mock).mockReturnValue({
legacy_tests_backup\BettingSettingsSummary.test.tsx:89:      settings: { ...mockSettings, riskProfile: 'aggressive' },
legacy_tests_backup\ConnectionStatus.test.tsx:6:// Mock the WebSocket store
legacy_tests_backup\ConnectionStatus.test.tsx:7:vi.mock('../../services/websocket', () => ({
legacy_tests_backup\ConnectionStatus.test.tsx:13:    // Reset all mocks before each test
legacy_tests_backup\ConnectionStatus.test.tsx:14:    vi.clearAllMocks();
legacy_tests_backup\ConnectionStatus.test.tsx:18:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\ConnectionStatus.test.tsx:32:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\ConnectionStatus.test.tsx:45:    const mockError = 'Connection failed';
legacy_tests_backup\ConnectionStatus.test.tsx:46:    const mockResetError = vi.fn();
legacy_tests_backup\ConnectionStatus.test.tsx:48:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\ConnectionStatus.test.tsx:51:      lastError: mockError,
legacy_tests_backup\ConnectionStatus.test.tsx:52:      resetError: mockResetError,
legacy_tests_backup\ConnectionStatus.test.tsx:57:    expect(screen.getByText(mockError)).toBeInTheDocument();
legacy_tests_backup\ConnectionStatus.test.tsx:61:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\ConnectionStatus.test.tsx:75:    const mockError = 'Connection failed';
legacy_tests_backup\ConnectionStatus.test.tsx:76:    const mockResetError = vi.fn();
legacy_tests_backup\ConnectionStatus.test.tsx:78:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\ConnectionStatus.test.tsx:81:      lastError: mockError,
legacy_tests_backup\ConnectionStatus.test.tsx:82:      resetError: mockResetError,
legacy_tests_backup\ConnectionStatus.test.tsx:90:    expect(mockResetError).toHaveBeenCalled();
legacy_tests_backup\ConnectionStatus.test.tsx:94:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\Dashboard.test.tsx:7:// Mock services
legacy_tests_backup\Dashboard.test.tsx:8:jest.mock('../../services/prizePicksService', () => ({
legacy_tests_backup\Dashboard.test.tsx:14:// Mock WebSocket service
legacy_tests_backup\Dashboard.test.tsx:15:jest.mock('../../services/websocket_service', () => ({
legacy_tests_backup\Dashboard.test.tsx:25:  const mockProjections = [
legacy_tests_backup\Dashboard.test.tsx:50:  const mockInitialMetrics = {
legacy_tests_backup\Dashboard.test.tsx:58:    jest.clearAllMocks();
legacy_tests_backup\Dashboard.test.tsx:59:    (prizePicksService.fetchPrizePicksProps as jest.Mock).mockResolvedValue(mockProjections);
legacy_tests_backup\Dashboard.test.tsx:67:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:74:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:85:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:91:    const filterInput = screen.getByPlaceholderText('Filter by player or stat...');
legacy_tests_backup\Dashboard.test.tsx:99:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:113:    (prizePicksService.fetchPrizePicksProps as jest.Mock).mockRejectedValue(
legacy_tests_backup\Dashboard.test.tsx:117:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:125:    (prizePicksService.fetchPrizePicksProps as jest.Mock).mockResolvedValue([]);
legacy_tests_backup\Dashboard.test.tsx:127:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:135:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:148:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:161:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\Dashboard.test.tsx:168:    renderWithTheme(<Dashboard initialMetrics={mockInitialMetrics} />);
legacy_tests_backup\dashboardLoad.perf.test.ts:11:// This is a placeholder for performance tests.
legacy_tests_backup\dashboardLoad.perf.test.ts:15:jest.mock('../../core/UnifiedConfig', () => {
legacy_tests_backup\dashboardLoad.perf.test.ts:44:// Mocks (similar to accessibility test, ensure Dashboard can render)
legacy_tests_backup\dashboardLoad.perf.test.ts:45:jest.mock('../../store/useAppStore', () => {
legacy_tests_backup\dashboardLoad.perf.test.ts:46:  // Zustand store hybrid mock
legacy_tests_backup\dashboardLoad.perf.test.ts:115:globalThis.ResizeObserver = jest.fn().mockImplementation(() => ({ observe: jest.fn(), unobserve: jest.fn(), disconnect: jest.fn() }));
legacy_tests_backup\dashboardLoad.perf.test.ts:125:jest.mock('../../components/modern/ESPNHeadlinesTicker', () => ({
legacy_tests_backup\dashboardPageA11y.test.tsx:12:// Mock UnifiedConfig to always provide a config object
legacy_tests_backup\dashboardPageA11y.test.tsx:13:jest.mock('../../core/UnifiedConfig', () => {
legacy_tests_backup\dashboardPageA11y.test.tsx:42:// Mock necessary services or stores if DashboardPage relies on them heavily for rendering initial structure
legacy_tests_backup\dashboardPageA11y.test.tsx:44:jest.mock('../../store/useAppStore', () => {
legacy_tests_backup\dashboardPageA11y.test.tsx:45:  // Zustand store hybrid mock
legacy_tests_backup\dashboardPageA11y.test.tsx:114:// Mock Chart.js used by PerformanceChart
legacy_tests_backup\dashboardPageA11y.test.tsx:117:// Mock ResizeObserver, often problematic in Jest
legacy_tests_backup\dashboardPageA11y.test.tsx:118:globalThis.ResizeObserver = jest.fn().mockImplementation(() => ({
legacy_tests_backup\dashboardPageA11y.test.tsx:124:// Mock matchMedia
legacy_tests_backup\dashboardPageA11y.test.tsx:133:jest.mock('../../components/modern/ESPNHeadlinesTicker', () => ({
legacy_tests_backup\ErrorHandler.test.ts:8:jest.mock('../EventBus');
legacy_tests_backup\ErrorHandler.test.ts:9:jest.mock('../UnifiedMonitor');
legacy_tests_backup\ErrorHandler.test.ts:10:jest.mock('../PerformanceMonitor');
legacy_tests_backup\ErrorHandler.test.ts:11:jest.mock('../UnifiedConfigManager');
legacy_tests_backup\ErrorHandler.test.ts:15:  let eventBus: jest.Mocked<EventBus>;
legacy_tests_backup\ErrorHandler.test.ts:16:  let monitor: jest.Mocked<typeof unifiedMonitor>;
legacy_tests_backup\ErrorHandler.test.ts:17:  let performanceMonitor: jest.Mocked<PerformanceMonitor>;
legacy_tests_backup\ErrorHandler.test.ts:18:  let configManager: jest.Mocked<UnifiedConfigManager>;
legacy_tests_backup\ErrorHandler.test.ts:21:    jest.clearAllMocks();
legacy_tests_backup\ErrorHandler.test.ts:23:    eventBus = EventBus.getInstance() as jest.Mocked<EventBus>;
legacy_tests_backup\ErrorHandler.test.ts:24:    monitor = unifiedMonitor as jest.Mocked<typeof unifiedMonitor>;
legacy_tests_backup\ErrorHandler.test.ts:25:    performanceMonitor = PerformanceMonitor.getInstance() as jest.Mocked<PerformanceMonitor>;
legacy_tests_backup\ErrorHandler.test.ts:26:    configManager = UnifiedConfigManager.getInstance() as jest.Mocked<UnifiedConfigManager>;
legacy_tests_backup\LiveOddsTicker.test.tsx:7:// Mock the stores
legacy_tests_backup\LiveOddsTicker.test.tsx:8:vi.mock('../../services/websocket', () => ({
legacy_tests_backup\LiveOddsTicker.test.tsx:12:vi.mock('../../stores/oddsStore', () => ({
legacy_tests_backup\LiveOddsTicker.test.tsx:17:  const mockEventId = 'test-event-123';
legacy_tests_backup\LiveOddsTicker.test.tsx:18:  const mockOdds = {
legacy_tests_backup\LiveOddsTicker.test.tsx:36:    // Reset all mocks before each test
legacy_tests_backup\LiveOddsTicker.test.tsx:37:    vi.clearAllMocks();
legacy_tests_backup\LiveOddsTicker.test.tsx:39:    // Mock WebSocket store
legacy_tests_backup\LiveOddsTicker.test.tsx:40:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\LiveOddsTicker.test.tsx:45:    // Mock Odds store
legacy_tests_backup\LiveOddsTicker.test.tsx:46:    (useOddsStore as any).mockReturnValue({
legacy_tests_backup\LiveOddsTicker.test.tsx:47:      getOddsForEvent: vi.fn().mockReturnValue(mockOdds),
legacy_tests_backup\LiveOddsTicker.test.tsx:52:    // Mock empty odds
legacy_tests_backup\LiveOddsTicker.test.tsx:53:    (useOddsStore as any).mockReturnValue({
legacy_tests_backup\LiveOddsTicker.test.tsx:54:      getOddsForEvent: vi.fn().mockReturnValue(null),
legacy_tests_backup\LiveOddsTicker.test.tsx:57:    render(<LiveOddsTicker eventId={mockEventId} />);
legacy_tests_backup\LiveOddsTicker.test.tsx:62:    render(<LiveOddsTicker eventId={mockEventId} />);
legacy_tests_backup\LiveOddsTicker.test.tsx:77:    const { unmount } = render(<LiveOddsTicker eventId={mockEventId} />);
legacy_tests_backup\LiveOddsTicker.test.tsx:79:    expect(useWebSocketStore().subscribeToEventUpdates).toHaveBeenCalledWith(mockEventId);
legacy_tests_backup\LiveOddsTicker.test.tsx:83:    expect(useWebSocketStore().unsubscribeFromEventUpdates).toHaveBeenCalledWith(mockEventId);
legacy_tests_backup\LiveOddsTicker.test.tsx:110:    (useOddsStore as any).mockReturnValue({
legacy_tests_backup\LiveOddsTicker.test.tsx:111:      getOddsForEvent: vi.fn().mockReturnValue(initialOdds),
legacy_tests_backup\LiveOddsTicker.test.tsx:114:    const { rerender } = render(<LiveOddsTicker eventId={mockEventId} />);
legacy_tests_backup\LiveOddsTicker.test.tsx:117:    (useOddsStore as any).mockReturnValue({
legacy_tests_backup\LiveOddsTicker.test.tsx:118:      getOddsForEvent: vi.fn().mockReturnValue(updatedOdds),
legacy_tests_backup\LiveOddsTicker.test.tsx:121:    rerender(<LiveOddsTicker eventId={mockEventId} />);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:7:// Mock the MarketAnalysisService
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:8:jest.mock('../../services/marketAnalysisService', () => ({
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:20:interface MockMarketAnalysisService {
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:21:  getMarketMetrics: jest.Mock<MarketMetrics | undefined, [string]>;
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:22:  getMarketEfficiency: jest.Mock<MarketEfficiencyMetrics | undefined, [string]>;
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:23:  getAnomalies: jest.Mock<MarketAnomaly[], [string]>;
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:24:  on: jest.Mock<void, [string, (data: any) => void]>;
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:25:  removeListener: jest.Mock<void, [string, (data: any) => void]>;
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:29:  const mockEventId = 'test-event-1';
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:30:  const mockMetrics: MarketMetrics = {
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:44:  const mockEfficiency: MarketEfficiencyMetrics = {
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:51:  const mockAnomalies: MarketAnomaly[] = [
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:65:  let mockService: MockMarketAnalysisService;
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:68:    mockService = MarketAnalysisService.getInstance() as unknown as MockMarketAnalysisService;
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:69:    mockService.getMarketMetrics.mockReturnValue(mockMetrics);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:70:    mockService.getMarketEfficiency.mockReturnValue(mockEfficiency);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:71:    mockService.getAnomalies.mockReturnValue(mockAnomalies);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:75:    mockService.getMarketMetrics.mockReturnValue(undefined);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:77:    render(<MarketAnalysisDashboard eventId={mockEventId} />);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:82:    render(<MarketAnalysisDashboard eventId={mockEventId} />);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:93:    render(<MarketAnalysisDashboard eventId={mockEventId} />);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:102:    render(<MarketAnalysisDashboard eventId={mockEventId} />);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:114:    render(<MarketAnalysisDashboard eventId={mockEventId} />);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:117:      ...mockEfficiency,
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:122:    const handleMarketEfficiency = mockService.on.mock.calls.find(
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:127:      handleMarketEfficiency({ eventId: mockEventId, metrics: newEfficiency });
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:136:    render(<MarketAnalysisDashboard eventId={mockEventId} />);
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:153:    const handleMarketAnomaly = mockService.on.mock.calls.find(
legacy_tests_backup\MarketAnalysisDashboard.test.tsx:158:      handleMarketAnomaly({ eventId: mockEventId, anomalies: newAnomalies });
legacy_tests_backup\ModelComparison.test.tsx:6:// Mock the useModelPerformance hook
legacy_tests_backup\ModelComparison.test.tsx:7:jest.mock('../../../hooks/useModelPerformance');
legacy_tests_backup\ModelComparison.test.tsx:9:const mockPerformance = {
legacy_tests_backup\ModelComparison.test.tsx:24:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelComparison.test.tsx:25:      performance: mockPerformance,
legacy_tests_backup\ModelComparison.test.tsx:54:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelComparison.test.tsx:66:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:8:// Mock the hooks and components
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:9:jest.mock('../../../hooks/useModelPerformance');
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:10:jest.mock('../PerformanceExport', () => ({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:17:jest.mock('../ModelComparison', () => ({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:28:const mockPerformance = {
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:42:const mockHistory = [
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:65:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:66:      performance: mockPerformance,
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:67:      history: mockHistory,
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:76:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:86:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:96:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:119:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:120:      performance: mockPerformance,
legacy_tests_backup\ModelPerformanceDashboard.test.tsx:121:      history: mockHistory,
legacy_tests_backup\ModelVersioning.test.ts:6:jest.mock('../EventBus');
legacy_tests_backup\ModelVersioning.test.ts:7:jest.mock('../UnifiedMonitor');
legacy_tests_backup\ModelVersioning.test.ts:11:  let mockEventBus: jest.Mocked<EventBus>;
legacy_tests_backup\ModelVersioning.test.ts:12:  const mockModelId = 'test-model';
legacy_tests_backup\ModelVersioning.test.ts:13:  const mockVersions: ModelVersion[] = [
legacy_tests_backup\ModelVersioning.test.ts:53:    jest.clearAllMocks();
legacy_tests_backup\ModelVersioning.test.ts:54:    mockEventBus = {
legacy_tests_backup\ModelVersioning.test.ts:58:    (EventBus.getInstance as jest.Mock).mockReturnValue(mockEventBus);
legacy_tests_backup\ModelVersioning.test.ts:62:    mockVersions.forEach(version => {
legacy_tests_backup\ModelVersioning.test.ts:63:      modelVersioning['versions'].set(mockModelId, [...mockVersions]);
legacy_tests_backup\ModelVersioning.test.ts:69:      await modelVersioning.rollbackToVersion(mockModelId, '1.0.0');
legacy_tests_backup\ModelVersioning.test.ts:71:      const remainingVersions = modelVersioning['versions'].get(mockModelId);
legacy_tests_backup\ModelVersioning.test.ts:75:      expect(mockEventBus.emit).toHaveBeenCalledWith('model:version:rolled_back', {
legacy_tests_backup\ModelVersioning.test.ts:76:        modelId: mockModelId,
legacy_tests_backup\ModelVersioning.test.ts:90:      await expect(modelVersioning.rollbackToVersion(mockModelId, '2.0.0')).rejects.toThrow(
legacy_tests_backup\ModelVersioning.test.ts:98:      const result = await modelVersioning.compareVersions(mockModelId, '1.0.0', '1.1.0');
legacy_tests_backup\ModelVersioning.test.ts:122:      expect(mockEventBus.emit).toHaveBeenCalledWith('model:version:compared', {
legacy_tests_backup\ModelVersioning.test.ts:123:        modelId: mockModelId,
legacy_tests_backup\ModelVersioning.test.ts:137:      await expect(modelVersioning.compareVersions(mockModelId, '2.0.0', '1.1.0')).rejects.toThrow(
legacy_tests_backup\ModelVersioning.test.ts:153:      await modelVersioning.registerModelVersion('test-model', mockVersions[0]);
legacy_tests_backup\ModelVersioning.test.ts:156:      expect(latestVersion).toEqual(mockVersions[0]);
legacy_tests_backup\ModelVersioning.test.ts:157:      expect(mockEventBus.emit).toHaveBeenCalledWith('model:version:updated', {
legacy_tests_backup\ModelVersioning.test.ts:159:        version: mockVersions[0],
legacy_tests_backup\ModelVersioning.test.ts:166:        ...mockVersions[0],
legacy_tests_backup\ModelVersioning.test.ts:167:        metrics: { ...mockVersions[0].metrics, accuracy: 0.5 },
legacy_tests_backup\ModelVersioning.test.ts:174:      expect(mockEventBus.emit).not.toHaveBeenCalled();
legacy_tests_backup\ModelVersioning.test.ts:179:        ...mockVersions[0],
legacy_tests_backup\ModelVersioning.test.ts:200:      await modelVersioning.registerModelVersion('test-model', mockVersions[0]);
legacy_tests_backup\ModelVersioning.test.ts:202:      expect(latest).toEqual(mockVersions[0]);
legacy_tests_backup\ModelVersioning.test.ts:221:      const isValid = await modelVersioning.validateVersion('test-model', mockVersions[0]);
legacy_tests_backup\ModelVersioning.test.ts:226:      await modelVersioning.registerModelVersion('test-model', mockVersions[1]);
legacy_tests_backup\ModelVersioning.test.ts:228:      const betterVersion = mockVersions[1];
legacy_tests_backup\ModelVersioning.test.ts:235:      await modelVersioning.registerModelVersion('test-model', mockVersions[0]);
legacy_tests_backup\ModelVersioning.test.ts:237:      const worseVersion = mockVersions[0];
legacy_tests_backup\ModelVersioning.test.ts:256:        ...mockVersions[0],
legacy_tests_backup\ModelVersioning.test.ts:257:        metrics: { ...mockVersions[0].metrics, accuracy: 0.75 },
legacy_tests_backup\ModelVersioning.test.ts:279:        modelVersioning.registerModelVersion('test-model', mockVersions[0])
legacy_tests_backup\MoneyMakerAdvanced.test.tsx:6:jest.mock('../../services/unified/WebSocketManager', () => {
legacy_tests_backup\Navbar.test.tsx:7:// Mock the theme store
legacy_tests_backup\Navbar.test.tsx:8:jest.mock('@stores/themeStore', () => ({
legacy_tests_backup\Navbar.test.tsx:12:// Mock the router
legacy_tests_backup\Navbar.test.tsx:13:jest.mock('react-router-dom', () => ({
legacy_tests_backup\Navbar.test.tsx:24:    jest.clearAllMocks();
legacy_tests_backup\Navbar.test.tsx:25:    (useThemeStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\Navbar.test.tsx:57:    (useThemeStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\PayoutPreview.test.tsx:8:// Mock the stores
legacy_tests_backup\PayoutPreview.test.tsx:9:vi.mock('../../services/websocket', () => ({
legacy_tests_backup\PayoutPreview.test.tsx:13:vi.mock('../../stores/payoutStore', () => ({
legacy_tests_backup\PayoutPreview.test.tsx:17:vi.mock('../../stores/riskProfileStore', () => ({
legacy_tests_backup\PayoutPreview.test.tsx:22:  const mockEventId = 'test-event-123';
legacy_tests_backup\PayoutPreview.test.tsx:23:  const mockPayoutPreview = {
legacy_tests_backup\PayoutPreview.test.tsx:30:  const mockRiskProfile = {
legacy_tests_backup\PayoutPreview.test.tsx:40:    // Reset all mocks before each test
legacy_tests_backup\PayoutPreview.test.tsx:41:    vi.clearAllMocks();
legacy_tests_backup\PayoutPreview.test.tsx:43:    // Mock WebSocket store
legacy_tests_backup\PayoutPreview.test.tsx:44:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\PayoutPreview.test.tsx:49:    // Mock Payout store
legacy_tests_backup\PayoutPreview.test.tsx:50:    (usePayoutStore as any).mockReturnValue({
legacy_tests_backup\PayoutPreview.test.tsx:51:      getPayoutPreview: vi.fn().mockReturnValue(mockPayoutPreview),
legacy_tests_backup\PayoutPreview.test.tsx:54:    // Mock Risk Profile store
legacy_tests_backup\PayoutPreview.test.tsx:55:    (useRiskProfileStore as any).mockReturnValue(mockRiskProfile);
legacy_tests_backup\PayoutPreview.test.tsx:59:    // Mock empty payout preview
legacy_tests_backup\PayoutPreview.test.tsx:60:    (usePayoutStore as any).mockReturnValue({
legacy_tests_backup\PayoutPreview.test.tsx:61:      getPayoutPreview: vi.fn().mockReturnValue(null),
legacy_tests_backup\PayoutPreview.test.tsx:64:    render(<PayoutPreview eventId={mockEventId} />);
legacy_tests_backup\PayoutPreview.test.tsx:69:    render(<PayoutPreview eventId={mockEventId} />);
legacy_tests_backup\PayoutPreview.test.tsx:89:    const { unmount } = render(<PayoutPreview eventId={mockEventId} />);
legacy_tests_backup\PayoutPreview.test.tsx:91:    expect(useWebSocketStore().subscribeToEvent).toHaveBeenCalledWith(mockEventId);
legacy_tests_backup\PayoutPreview.test.tsx:95:    expect(useWebSocketStore().unsubscribeFromEvent).toHaveBeenCalledWith(mockEventId);
legacy_tests_backup\PayoutPreview.test.tsx:100:      ...mockPayoutPreview,
legacy_tests_backup\PayoutPreview.test.tsx:104:    (usePayoutStore as any).mockReturnValue({
legacy_tests_backup\PayoutPreview.test.tsx:105:      getPayoutPreview: vi.fn().mockReturnValue(negativeValuePreview),
legacy_tests_backup\PayoutPreview.test.tsx:108:    render(<PayoutPreview eventId={mockEventId} />);
legacy_tests_backup\PayoutPreview.test.tsx:116:      ...mockPayoutPreview,
legacy_tests_backup\PayoutPreview.test.tsx:121:      ...mockPayoutPreview,
legacy_tests_backup\PayoutPreview.test.tsx:126:    (usePayoutStore as any).mockReturnValue({
legacy_tests_backup\PayoutPreview.test.tsx:127:      getPayoutPreview: vi.fn().mockReturnValue(initialPreview),
legacy_tests_backup\PayoutPreview.test.tsx:130:    const { rerender } = render(<PayoutPreview eventId={mockEventId} />);
legacy_tests_backup\PayoutPreview.test.tsx:133:    (usePayoutStore as any).mockReturnValue({
legacy_tests_backup\PayoutPreview.test.tsx:134:      getPayoutPreview: vi.fn().mockReturnValue(updatedPreview),
legacy_tests_backup\PayoutPreview.test.tsx:137:    rerender(<PayoutPreview eventId={mockEventId} />);
legacy_tests_backup\PayoutPreview.test.tsx:145:    render(<PayoutPreview eventId={mockEventId} />);
legacy_tests_backup\PerformanceAlerts.test.tsx:8:// Mock the PerformanceMonitor
legacy_tests_backup\PerformanceAlerts.test.tsx:9:jest.mock('../../../core/analytics/PerformanceMonitor', () => ({
legacy_tests_backup\PerformanceAlerts.test.tsx:15:// Mock the hooks
legacy_tests_backup\PerformanceAlerts.test.tsx:16:jest.mock('../../../hooks/useLogger', () => ({
legacy_tests_backup\PerformanceAlerts.test.tsx:26:jest.mock('../../../hooks/useMetrics', () => ({
legacy_tests_backup\PerformanceAlerts.test.tsx:37:  const mockAlerts = [
legacy_tests_backup\PerformanceAlerts.test.tsx:56:  const mockLogger = {
legacy_tests_backup\PerformanceAlerts.test.tsx:64:  const mockMetrics = {
legacy_tests_backup\PerformanceAlerts.test.tsx:73:    const mockMonitor = {
legacy_tests_backup\PerformanceAlerts.test.tsx:74:      getAlerts: jest.fn().mockReturnValue(mockAlerts),
legacy_tests_backup\PerformanceAlerts.test.tsx:77:    (PerformanceMonitor.getInstance as jest.Mock).mockReturnValue(mockMonitor);
legacy_tests_backup\PerformanceAlerts.test.tsx:82:      <LoggerProvider logger={mockLogger}>
legacy_tests_backup\PerformanceAlerts.test.tsx:83:        <MetricsProvider metrics={mockMetrics}>{ui}</MetricsProvider>
legacy_tests_backup\PerformanceAlerts.test.tsx:117:      const mockMonitor = PerformanceMonitor.getInstance(mockLogger, mockMetrics);
legacy_tests_backup\PerformanceAlerts.test.tsx:118:      expect(mockMonitor.getAlerts).toHaveBeenCalledWith('TestModel', undefined, expect.any(Date));
legacy_tests_backup\PerformanceAlerts.test.tsx:128:    const mockMonitor = PerformanceMonitor.getInstance(mockLogger, mockMetrics);
legacy_tests_backup\PerformanceAlerts.test.tsx:129:    expect(mockMonitor.clearAlerts).toHaveBeenCalledWith('TestModel');
legacy_tests_backup\PerformanceAlerts.test.tsx:133:    const mockMonitor = {
legacy_tests_backup\PerformanceAlerts.test.tsx:134:      getAlerts: jest.fn().mockReturnValue([]),
legacy_tests_backup\PerformanceAlerts.test.tsx:137:    (PerformanceMonitor.getInstance as jest.Mock).mockReturnValue(mockMonitor);
legacy_tests_backup\PerformanceAlerts.test.tsx:151:    expect(onAlertClick).toHaveBeenCalledWith(mockAlerts[0]);
legacy_tests_backup\PerformanceExport.test.tsx:6:// Mock the useModelPerformance hook
legacy_tests_backup\PerformanceExport.test.tsx:7:jest.mock('../../../hooks/useModelPerformance', () => ({
legacy_tests_backup\PerformanceExport.test.tsx:12:  const mockHistory = [
legacy_tests_backup\PerformanceExport.test.tsx:31:  const mockOnClose = jest.fn();
legacy_tests_backup\PerformanceExport.test.tsx:34:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\PerformanceExport.test.tsx:35:      history: mockHistory,
legacy_tests_backup\PerformanceExport.test.tsx:40:    render(<PerformanceExport modelName="TestModel" onClose={mockOnClose} />);
legacy_tests_backup\PerformanceExport.test.tsx:50:    render(<PerformanceExport modelName="TestModel" onClose={mockOnClose} />);
legacy_tests_backup\PerformanceExport.test.tsx:56:    render(<PerformanceExport modelName="TestModel" onClose={mockOnClose} />);
legacy_tests_backup\PerformanceExport.test.tsx:66:    render(<PerformanceExport modelName="TestModel" onClose={mockOnClose} />);
legacy_tests_backup\PerformanceExport.test.tsx:80:    render(<PerformanceExport modelName="TestModel" onClose={mockOnClose} />);
legacy_tests_backup\PerformanceExport.test.tsx:96:    render(<PerformanceExport modelName="TestModel" onClose={mockOnClose} />);
legacy_tests_backup\PerformanceExport.test.tsx:101:    expect(mockOnClose).toHaveBeenCalled();
legacy_tests_backup\PerformanceExport.test.tsx:105:    (useModelPerformance as jest.Mock).mockReturnValue({
legacy_tests_backup\PerformanceExport.test.tsx:109:    render(<PerformanceExport modelName="TestModel" onClose={mockOnClose} />);
legacy_tests_backup\PredictionDisplay.test.tsx:7:// Mock the stores
legacy_tests_backup\PredictionDisplay.test.tsx:8:vi.mock('../../services/websocket', () => ({
legacy_tests_backup\PredictionDisplay.test.tsx:12:vi.mock('../../stores/predictionStore', () => ({
legacy_tests_backup\PredictionDisplay.test.tsx:17:  const mockEventId = 'test-event-123';
legacy_tests_backup\PredictionDisplay.test.tsx:18:  const mockPrediction = {
legacy_tests_backup\PredictionDisplay.test.tsx:32:    // Reset all mocks before each test
legacy_tests_backup\PredictionDisplay.test.tsx:33:    vi.clearAllMocks();
legacy_tests_backup\PredictionDisplay.test.tsx:35:    // Mock WebSocket store
legacy_tests_backup\PredictionDisplay.test.tsx:36:    (useWebSocketStore as any).mockReturnValue({
legacy_tests_backup\PredictionDisplay.test.tsx:41:    // Mock Prediction store
legacy_tests_backup\PredictionDisplay.test.tsx:42:    (usePredictionStore as any).mockReturnValue({
legacy_tests_backup\PredictionDisplay.test.tsx:43:      getPredictionForEvent: vi.fn().mockReturnValue(mockPrediction),
legacy_tests_backup\PredictionDisplay.test.tsx:48:    // Mock empty prediction
legacy_tests_backup\PredictionDisplay.test.tsx:49:    (usePredictionStore as any).mockReturnValue({
legacy_tests_backup\PredictionDisplay.test.tsx:50:      getPredictionForEvent: vi.fn().mockReturnValue(null),
legacy_tests_backup\PredictionDisplay.test.tsx:53:    render(<PredictionDisplay eventId={mockEventId} />);
legacy_tests_backup\PredictionDisplay.test.tsx:58:    render(<PredictionDisplay eventId={mockEventId} />);
legacy_tests_backup\PredictionDisplay.test.tsx:73:    const { unmount } = render(<PredictionDisplay eventId={mockEventId} />);
legacy_tests_backup\PredictionDisplay.test.tsx:75:    expect(useWebSocketStore().subscribeToEvent).toHaveBeenCalledWith(mockEventId);
legacy_tests_backup\PredictionDisplay.test.tsx:79:    expect(useWebSocketStore().unsubscribeFromEvent).toHaveBeenCalledWith(mockEventId);
legacy_tests_backup\PredictionDisplay.test.tsx:83:    render(<PredictionDisplay eventId={mockEventId} />);
legacy_tests_backup\PredictionDisplay.test.tsx:96:    render(<PredictionDisplay eventId={mockEventId} />);
legacy_tests_backup\PredictionDisplay.test.tsx:109:      ...mockPrediction,
legacy_tests_backup\PredictionDisplay.test.tsx:114:      ...mockPrediction,
legacy_tests_backup\PredictionDisplay.test.tsx:119:    (usePredictionStore as any).mockReturnValue({
legacy_tests_backup\PredictionDisplay.test.tsx:120:      getPredictionForEvent: vi.fn().mockReturnValue(initialPrediction),
legacy_tests_backup\PredictionDisplay.test.tsx:123:    const { rerender } = render(<PredictionDisplay eventId={mockEventId} />);
legacy_tests_backup\PredictionDisplay.test.tsx:126:    (usePredictionStore as any).mockReturnValue({
legacy_tests_backup\PredictionDisplay.test.tsx:127:      getPredictionForEvent: vi.fn().mockReturnValue(updatedPrediction),
legacy_tests_backup\PredictionDisplay.test.tsx:130:    rerender(<PredictionDisplay eventId={mockEventId} />);
legacy_tests_backup\prizePicksApiService.test.ts:6:// Mock UnifiedConfig to always provide a config object
legacy_tests_backup\prizePicksApiService.test.ts:7:jest.mock('../../core/UnifiedConfig', () => {
legacy_tests_backup\prizePicksApiService.test.ts:36:// Mocking fetch globally for API tests
legacy_tests_backup\prizePicksApiService.test.ts:41:  const mockBaseUrl = 'https://mock-api.prizepicks.com';
legacy_tests_backup\prizePicksApiService.test.ts:44:    (fetch as jest.Mock).mockClear();
legacy_tests_backup\prizePicksApiService.test.ts:46:      baseUrl: mockBaseUrl,
legacy_tests_backup\prizePicksApiService.test.ts:54:      const mockData = { data: [], included: [] }; // Provide a valid mock response structure
legacy_tests_backup\prizePicksApiService.test.ts:55:      (fetch as jest.Mock).mockResolvedValueOnce({
legacy_tests_backup\prizePicksApiService.test.ts:57:        json: async () => mockData,
legacy_tests_backup\prizePicksApiService.test.ts:65:        `${mockBaseUrl}/projections?single_stat=true&league_id=NBA`,
legacy_tests_backup\prizePicksApiService.test.ts:68:      expect(data).toEqual(mockData);
legacy_tests_backup\prizePicksApiService.test.ts:72:      const mockData = { data: [], included: [] };
legacy_tests_backup\prizePicksApiService.test.ts:73:      (fetch as jest.Mock).mockResolvedValueOnce({
legacy_tests_backup\prizePicksApiService.test.ts:75:        json: async () => mockData,
legacy_tests_backup\prizePicksApiService.test.ts:82:        `${mockBaseUrl}/projections?single_stat=true&league_id=NFL`,
legacy_tests_backup\prizePicksApiService.test.ts:88:      (fetch as jest.Mock).mockResolvedValueOnce({
legacy_tests_backup\prizePicksApiService.test.ts:103:          baseUrl: mockBaseUrl,
legacy_tests_backup\prizePicksApiService.test.ts:107:        const mockData = { data: [], included: [] };
legacy_tests_backup\prizePicksApiService.test.ts:108:        (fetch as jest.Mock).mockResolvedValueOnce({
legacy_tests_backup\prizePicksApiService.test.ts:110:          json: async () => mockData,
legacy_tests_backup\prizePicksApiService.test.ts:117:          `${mockBaseUrl}/projections?single_stat=true&league_id=NBA`,
legacy_tests_backup\PropCard.test.tsx:6:const mockProjection = {
legacy_tests_backup\PropCard.test.tsx:24:    renderWithTheme(<PropCard isSelected={false} projection={mockProjection} onClick={() => {}} />);
legacy_tests_backup\PropCard.test.tsx:34:    renderWithTheme(<PropCard isSelected={false} projection={mockProjection} onClick={() => {}} />);
legacy_tests_backup\PropCard.test.tsx:42:    const projectionWithFire = { ...mockProjection, fireCount: 5 };
legacy_tests_backup\PropCard.test.tsx:51:    renderWithTheme(<PropCard isSelected={false} projection={mockProjection} onClick={() => {}} />);
legacy_tests_backup\PropCard.test.tsx:57:    renderWithTheme(<PropCard isSelected={false} projection={mockProjection} onClick={() => {}} />);
legacy_tests_backup\PropCard.test.tsx:65:      <PropCard isSelected={false} projection={mockProjection} onClick={handleClick} />
legacy_tests_backup\PropCard.test.tsx:73:    renderWithTheme(<PropCard isSelected={true} projection={mockProjection} onClick={() => {}} />);
legacy_tests_backup\PropCard.test.tsx:80:    const projectionWithPosition = { ...mockProjection, position: 'G' };
legacy_tests_backup\PropCard.test.tsx:90:    const highConfidenceProjection = { ...mockProjection, confidence: 0.9 };
legacy_tests_backup\PropCard.test.tsx:100:    renderWithTheme(<PropCard isSelected={false} projection={mockProjection} onClick={() => {}} />);
legacy_tests_backup\RiskProfileManager.test.tsx:6:// Mock the Risk Profile store
legacy_tests_backup\RiskProfileManager.test.tsx:7:vi.mock('../../stores/riskProfileStore', () => ({
legacy_tests_backup\RiskProfileManager.test.tsx:12:  const mockRiskProfile = {
legacy_tests_backup\RiskProfileManager.test.tsx:23:    // Reset all mocks before each test
legacy_tests_backup\RiskProfileManager.test.tsx:24:    vi.clearAllMocks();
legacy_tests_backup\RiskProfileManager.test.tsx:26:    // Mock Risk Profile store
legacy_tests_backup\RiskProfileManager.test.tsx:27:    (useRiskProfileStore as any).mockReturnValue(mockRiskProfile);
legacy_tests_backup\RiskProfileManager.test.tsx:49:    expect(mockRiskProfile.updateRiskProfile).toHaveBeenCalledWith({
legacy_tests_backup\RiskProfileManager.test.tsx:61:    expect(mockRiskProfile.updateRiskProfile).toHaveBeenCalledWith({
legacy_tests_backup\RiskProfileManager.test.tsx:89:    expect(mockRiskProfile.updateRiskProfile).toHaveBeenCalledWith({
legacy_tests_backup\RiskProfileManager.test.tsx:117:    expect(mockRiskProfile.updateRiskProfile).toHaveBeenCalledWith({
legacy_tests_backup\RiskProfileManager.test.tsx:142:    (useRiskProfileStore as any).mockReturnValue({
legacy_tests_backup\RiskProfileManager.test.tsx:143:      ...mockRiskProfile,
legacy_tests_backup\Sidebar.test.tsx:7:// Mock the theme store
legacy_tests_backup\Sidebar.test.tsx:8:jest.mock('@stores/themeStore', () => ({
legacy_tests_backup\Sidebar.test.tsx:12:// Mock the router
legacy_tests_backup\Sidebar.test.tsx:13:jest.mock('react-router-dom', () => ({
legacy_tests_backup\Sidebar.test.tsx:25:    jest.clearAllMocks();
legacy_tests_backup\Sidebar.test.tsx:26:    (useThemeStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\Sidebar.test.tsx:49:    (useThemeStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\SmartSidebar.test.tsx:6:// Mock the useStore hook
legacy_tests_backup\SmartSidebar.test.tsx:7:jest.mock('../../../stores/useStore', () => ({
legacy_tests_backup\SmartSidebar.test.tsx:12:  const mockOnClose = jest.fn();
legacy_tests_backup\SmartSidebar.test.tsx:15:    (useStore as jest.Mock).mockReturnValue({
legacy_tests_backup\SmartSidebar.test.tsx:23:    render(<SmartSidebar isOpen={true} onClose={mockOnClose} />);
legacy_tests_backup\SmartSidebar.test.tsx:30:    render(<SmartSidebar isOpen={true} onClose={mockOnClose} />);
legacy_tests_backup\SmartSidebar.test.tsx:33:    expect(mockOnClose).toHaveBeenCalled();
legacy_tests_backup\SmartSidebar.test.tsx:37:    render(<SmartSidebar isOpen={false} onClose={mockOnClose} />);
legacy_tests_backup\storeConsistency.test.ts:8:// This is a placeholder for state synchronization tests.
legacy_tests_backup\storeConsistency.test.ts:13:// Mock Sentry to suppress errors in test
legacy_tests_backup\storeConsistency.test.ts:14:jest.mock('@sentry/react', () => ({ captureException: jest.fn(), captureMessage: jest.fn(), setUser: jest.fn(), setTag: jest.fn(), setExtra: jest.fn(), withScope: (cb: any) => cb({ setLevel: jest.fn(), setExtra: jest.fn() }) }));
legacy_tests_backup\storeConsistency.test.ts:16:// Mock UnifiedConfig to always provide a config object
legacy_tests_backup\storeConsistency.test.ts:17:jest.mock('../../core/UnifiedConfig', () => {
legacy_tests_backup\storeConsistency.test.ts:51:  jest.spyOn(realAuthServiceModule.authService, 'login').mockResolvedValue({ user: { id: 'u1', email: 'test@example.com', username: 'testuser' }, token: 'mock-token' });
legacy_tests_backup\storeConsistency.test.ts:52:  jest.spyOn(realAuthServiceModule.authService, 'logout').mockResolvedValue(undefined);
legacy_tests_backup\storeConsistency.test.ts:53:  jest.spyOn(realPrizePicksServiceModule.prizePicksService, 'fetchPrizePicksProps').mockResolvedValue([{ id: 'mock-prop', player_name: 'Test', stat_type: 'Points', league: 'NBA', line_score: 10, description: 'desc', playerId: 'p1' }]);
legacy_tests_backup\storeConsistency.test.ts:54:  jest.spyOn(predictionService, 'fetchGeneralInsights').mockResolvedValue([]);
legacy_tests_backup\storeConsistency.test.ts:87:    // Simulate login (mocked service returns user)
legacy_tests_backup\storeConsistency.test.ts:106:    const mockLeg1 = { propId: 'prop123', pick: 'over' as const, line: 10.5, statType: 'Points', playerName: 'Player A', odds: -110 };
legacy_tests_backup\storeConsistency.test.ts:107:    const mockLeg2 = { propId: 'prop456', pick: 'under' as const, line: 5.5, statType: 'Rebounds', playerName: 'Player B', odds: -120 };
legacy_tests_backup\storeConsistency.test.ts:110:      addLeg(mockLeg1);
legacy_tests_backup\storeConsistency.test.ts:117:      addLeg(mockLeg2);
legacy_tests_backup\storeConsistency.test.ts:124:      addLeg(mockLeg1);
legacy_tests_backup\storeConsistency.test.ts:149:    // Simulate fetchProps (mocked to resolve)
legacy_tests_backup\storeConsistency.test.ts:153:    // After fetch, props should be an array (mocked store returns at least one)
legacy_tests_backup\ThemeToggle.test.tsx:7:// Mock the theme store
legacy_tests_backup\ThemeToggle.test.tsx:8:jest.mock('@stores/themeStore', () => ({
legacy_tests_backup\ThemeToggle.test.tsx:13:  const mockToggleTheme = jest.fn();
legacy_tests_backup\ThemeToggle.test.tsx:16:    jest.clearAllMocks();
legacy_tests_backup\ThemeToggle.test.tsx:17:    (useThemeStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\ThemeToggle.test.tsx:19:      toggleTheme: mockToggleTheme,
legacy_tests_backup\ThemeToggle.test.tsx:33:    (useThemeStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\ThemeToggle.test.tsx:35:      toggleTheme: mockToggleTheme,
legacy_tests_backup\ThemeToggle.test.tsx:44:    expect(mockToggleTheme).toHaveBeenCalledTimes(1);
legacy_tests_backup\UnifiedState.test.ts:237:      const mockLocalStorage = {
legacy_tests_backup\UnifiedState.test.ts:238:        getItem: jest.fn().mockImplementation(() => {
legacy_tests_backup\UnifiedState.test.ts:244:        value: mockLocalStorage,
legacy_tests_backup\useAppStore.test.ts:6:// Mock services that the store might call indirectly via actions
legacy_tests_backup\useAppStore.test.ts:7:// We only mock them if an action we test directly calls a service.
legacy_tests_backup\useAppStore.test.ts:8:// For simple state changes, direct service mocking might not be needed.
legacy_tests_backup\useAppStore.test.ts:10:// Example: Mock authService if testing login/logout actions that use it
legacy_tests_backup\useAppStore.test.ts:11:jest.mock('../../services/authService', () => ({
legacy_tests_backup\useAppStore.test.ts:18:// Mock UnifiedConfig to always provide a config object
legacy_tests_backup\useAppStore.test.ts:19:jest.mock('../../core/UnifiedConfig', () => {
legacy_tests_backup\useAppStore.test.ts:48:jest.mock('../../store/useAppStore', () => {
legacy_tests_backup\useAppStore.test.ts:50:  // Zustand store hybrid mock
legacy_tests_backup\useAppStore.test.ts:117:    // Clear any mocks if they were called
legacy_tests_backup\useAppStore.test.ts:118:    jest.clearAllMocks();
legacy_tests_backup\useAppStore.test.ts:145:    expect(true).toBe(true); // TODO: Implement real assertion if feature is implemented
legacy_tests_backup\useAppStore.test.ts:150:    expect(true).toBe(true); // TODO: Implement real assertion if feature is implemented
legacy_tests_backup\useAppStore.test.ts:154:  // - login success/failure (mocking authService.login responses)
legacy_tests_backup\useFilteredPredictions.test.tsx:7:// Mock the hooks
legacy_tests_backup\useFilteredPredictions.test.tsx:8:jest.mock('../../stores/filterStore', () => ({
legacy_tests_backup\useFilteredPredictions.test.tsx:12:jest.mock('../../contexts/StrategyInputContext', () => ({
legacy_tests_backup\useFilteredPredictions.test.tsx:16:jest.mock('../useBettingAnalytics', () => ({
legacy_tests_backup\useFilteredPredictions.test.tsx:21:  const mockPredictions = [
legacy_tests_backup\useFilteredPredictions.test.tsx:41:    // Reset all mocks
legacy_tests_backup\useFilteredPredictions.test.tsx:42:    jest.clearAllMocks();
legacy_tests_backup\useFilteredPredictions.test.tsx:44:    // Mock useFilterStore
legacy_tests_backup\useFilteredPredictions.test.tsx:45:    (useFilterStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\useFilteredPredictions.test.tsx:49:    // Mock useStrategyInput
legacy_tests_backup\useFilteredPredictions.test.tsx:50:    (useStrategyInput as jest.Mock).mockReturnValue({
legacy_tests_backup\useFilteredPredictions.test.tsx:60:    // Mock useBettingAnalytics
legacy_tests_backup\useFilteredPredictions.test.tsx:61:    (useBettingAnalytics as jest.Mock).mockReturnValue({
legacy_tests_backup\useFilteredPredictions.test.tsx:62:      predictions: mockPredictions,
legacy_tests_backup\useFilteredPredictions.test.tsx:76:    (useStrategyInput as jest.Mock).mockReturnValue({
legacy_tests_backup\useFilteredPredictions.test.tsx:93:    (useBettingAnalytics as jest.Mock).mockReturnValue({
legacy_tests_backup\useFilteredPredictions.test.tsx:107:    (useBettingAnalytics as jest.Mock).mockReturnValue({
legacy_tests_backup\useFilteredPredictions.test.tsx:127:    (useFilterStore as unknown as jest.Mock).mockReturnValue({
legacy_tests_backup\useModelPerformance.test.tsx:5:// Mock the ModelPerformanceService
legacy_tests_backup\useModelPerformance.test.tsx:6:jest.mock('../../services/analytics/modelPerformanceService');
legacy_tests_backup\useModelPerformance.test.tsx:9:  const mockPerformance = {
legacy_tests_backup\useModelPerformance.test.tsx:24:  const mockHistory = [
legacy_tests_backup\useModelPerformance.test.tsx:27:      metrics: mockPerformance,
legacy_tests_backup\useModelPerformance.test.tsx:32:    jest.clearAllMocks();
legacy_tests_backup\useModelPerformance.test.tsx:33:    (ModelPerformanceService.getInstance as jest.Mock).mockReturnValue({
legacy_tests_backup\useModelPerformance.test.tsx:34:      getModelPerformance: jest.fn().mockResolvedValue({
legacy_tests_backup\useModelPerformance.test.tsx:35:        performance: mockPerformance,
legacy_tests_backup\useModelPerformance.test.tsx:36:        history: mockHistory,
legacy_tests_backup\useModelPerformance.test.tsx:50:    expect(result.current.performance).toEqual(mockPerformance);
legacy_tests_backup\useModelPerformance.test.tsx:51:    expect(result.current.history).toEqual(mockHistory);
legacy_tests_backup\useModelPerformance.test.tsx:57:    (ModelPerformanceService.getInstance as jest.Mock).mockReturnValue({
legacy_tests_backup\useModelPerformance.test.tsx:58:      getModelPerformance: jest.fn().mockRejectedValue(error),
prototype\src\components\common\SportSelector.tsx:10:  placeholder?: string;
prototype\src\components\common\SportSelector.tsx:20:  placeholder = "Select a sport...",
prototype\src\components\common\SportSelector.tsx:40:        {placeholder && !includeAll && (
prototype\src\components\common\SportSelector.tsx:42:            {placeholder}
prototype\src\components\prizepicks\LineupBuilder.tsx:1030:                        placeholder="20"
prototype\src\components\prizepicks\LineupBuilder.tsx:1093:                    placeholder="Enter amount"
prototype\src\components\prizepicks\PropCard.tsx:68:      // Try placeholder service
prototype\src\components\prizepicks\PropCard.tsx:69:      target.src = `https://via.placeholder.com/64x64/6366f1/ffffff?text=${initials}`;
prototype\src\components\prizepicks\PropCard.tsx:70:    } else if (target.src.includes("via.placeholder.com")) {
prototype\src\hooks\useDataSources.ts:39:          data: success ? generateMockData(endpoint.key) : null,
prototype\src\hooks\useDataSources.ts:97:function generateMockData(sourceKey: string) {
prototype\src\hooks\useRealDataValidation.ts:82:    // Check for demo/placeholder values
prototype\src\hooks\useRealDataValidation.ts:83:    const placeholderKeys = [];
prototype\src\hooks\useRealDataValidation.ts:90:        value === 'placeholder'
prototype\src\hooks\useRealDataValidation.ts:92:        placeholderKeys.push(key);
prototype\src\hooks\useRealDataValidation.ts:96:    if (placeholderKeys.length > 0) {
prototype\src\hooks\useRealDataValidation.ts:97:      warnings.push(`${placeholderKeys.length} keys contain placeholder values`);
prototype\src\hooks\useRealDataValidation.ts:98:      recommendations.push('Replace placeholder values with real API keys');
prototype\src\hooks\useRealDataValidation.ts:99:      console.warn('🎭 Placeholder API Keys Detected:', placeholderKeys);
prototype\src\hooks\useRealDataValidation.ts:102:    const isValid = missingRequired.length === 0 && invalidKeys.length === 0 && placeholderKeys.length === 0;
prototype\src\utils\lineupValidation.ts:88:    // Mock game times - in real app this would come from game data
prototype\src\utils\placeholderCompletion.ts:1:// Comprehensive utility to replace all placeholder functionality
prototype\src\utils\placeholderCompletion.ts:5:export class PlaceholderCompletion {
prototype\src\utils\placeholderCompletion.ts:25:  // Improve placeholder prop detection
prototype\src\utils\placeholderCompletion.ts:26:  static isPlaceholderValue(value: any): boolean {
prototype\src\utils\placeholderCompletion.ts:28:      const placeholderPatterns = [
prototype\src\utils\placeholderCompletion.ts:29:        "placeholder",
prototype\src\utils\placeholderCompletion.ts:30:        "todo",
prototype\src\utils\placeholderCompletion.ts:31:        "fixme",
prototype\src\utils\placeholderCompletion.ts:33:        "mock",
prototype\src\utils\placeholderCompletion.ts:39:      return placeholderPatterns.some((pattern) =>
prototype\src\utils\placeholderCompletion.ts:152:  // Validate that all placeholders have been replaced
prototype\src\utils\placeholderCompletion.ts:153:  static validateNoPlaceholders(obj: any, path: string = "root"): string[] {
prototype\src\utils\placeholderCompletion.ts:160:        if (this.isPlaceholderValue(value)) {
prototype\src\utils\placeholderCompletion.ts:161:          issues.push(`Placeholder found at ${currentPath}: ${value}`);
prototype\src\utils\placeholderCompletion.ts:165:          issues.push(...this.validateNoPlaceholders(value, currentPath));
audit_workspace.py:3:This module provides a comprehensive audit utility for scanning the codebase for language statistics, keyword usage, TODO/FIXME/HACK comments, secrets in configs, and test files. It generates a Markdown report summarizing the findings.
audit_workspace.py:180:def find_todos_in_text(text, filename):
audit_workspace.py:181:    """Find all TODO, FIXME, and HACK comments in a text block.
audit_workspace.py:193:    todos = []
audit_workspace.py:194:    pattern = re.compile(r"(TODO|FIXME|HACK)[:\s]*(.*)", re.IGNORECASE)
audit_workspace.py:198:            todos.append(
audit_workspace.py:206:    return todos
audit_workspace.py:256:    """Analyze a Python file for imports, classes, functions, docstrings, keywords, and TODOs.
audit_workspace.py:273:        "todos": [],
audit_workspace.py:306:    results["todos"] = find_todos_in_text(source, str(path))
audit_workspace.py:311:    """Analyze a TypeScript/JavaScript file for keywords and TODOs.
audit_workspace.py:322:    results = {"keywords": defaultdict(int), "todos": []}
audit_workspace.py:329:    results["todos"] = find_todos_in_text(source, str(path))
audit_workspace.py:334:    """Analyze a config file for secrets and TODOs.
audit_workspace.py:345:    results = {"secrets": [], "todos": []}
audit_workspace.py:348:    results["todos"] = find_todos_in_text(source, str(path))
audit_workspace.py:360:        "todos": [],
audit_workspace.py:382:                # Aggregate keywords and todos
audit_workspace.py:386:                summary["todos"].extend(py_results["todos"])
audit_workspace.py:395:                summary["todos"].extend(ts_results["todos"])
audit_workspace.py:404:                summary["todos"].extend(config_results["todos"])
audit_workspace.py:434:    md.append("\n## TODO / FIXME / HACK Comments\n")
audit_workspace.py:435:    if summary["todos"]:
audit_workspace.py:436:        for todo in summary["todos"]:
audit_workspace.py:438:                f'- [{todo["type"]}] {todo["file"]} (line {todo["line"]}): {todo["text"]}'

