name: Unified CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: "Lint & Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend Linting
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install backend linting dependencies
        run: pip install black isort flake8
      - name: Lint backend
        run: |
          cd backend
          flake8 .
          isort --check .
          black --check .

      # Frontend Linting
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      - name: Lint frontend
        run: cd frontend && npm run lint

  test:
    name: "Unit & Integration Tests"
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend Tests
      - name: Set up Python for tests
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      - name: Run backend tests
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          REDIS_URL: "redis://localhost:6379"
          ENVIRONMENT: "test"
        run: |
          cd backend
          pytest --cov=. --cov-report=xml
      - name: Check Backend Test Coverage
        run: |
          pip install xmltodict
          python -c "import xmltodict; import sys; f = open('backend/coverage.xml'); data = xmltodict.parse(f.read()); coverage = float(data['coverage']['@line-rate']) * 100; print(f'Backend coverage is {coverage}%'); sys.exit(0) if coverage >= 80 else sys.exit(1)"
      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend

      # Frontend Tests
      - name: Set up Node.js for tests
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      - name: Run frontend tests
        run: cd frontend && npm test -- --coverage
      - name: Check Frontend Test Coverage
        run: |
          npm install -g lcov-summary
          summary=$(lcov-summary frontend/coverage/lcov.info)
          echo "$summary"
          coverage=$(echo "$summary" | grep "lines:" | awk -F' ' '{print $2}' | sed 's/%//')
          echo "Frontend coverage is $coverage%"
          if (( $(echo "$coverage >= 80" | bc -l) )); then
            exit 0
          else
            exit 1
          fi
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend

  security:
    name: "Security Scan"
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  
  build:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: [security]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: [build]
    # Only run on push events, not PRs
    if: github.event_name == 'push'
    
    # Use different environments for staging and production
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://a1betting.com' || 'https://staging.a1betting.com' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to environment
        run: |
          echo "Deploying to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} environment"
          # This is a placeholder for the actual deployment script.
          # In a real scenario, this would use kubectl, docker-compose, ssh, etc.
          # For example: ssh -i key user@host 'cd /app && docker-compose pull && docker-compose up -d'
          echo "Deployment successful!"

# The rest of the jobs (security, build, deploy) will be added in subsequent steps. 