/**
 * Service for generating predictions using reality exploitation techniques.
 */
import type { PredictionRequest} from './types.ts';
import type { ModelPrediction} from '@/ml/models/BaseModel.ts';
interface PredictionResponse {
  prediction: ModelPrediction,`n  confidence: number;,`n  metadata: {,`n  physicalMetrics: any;,`n  performanceMetrics: any,`n  psychologicalMetrics: any;,`n  socialMetrics: any,`n  economicMetrics: any;,`n  technologicalMetrics: any,`n  environmentalMetrics: any};
  timestamp: string}
export declare class RealityExploitationService {
  private engine;
  private dataService;
  private marketIntelligence;
  private performanceAnalytics;
  private environmentalService;
  private socialDynamics;
  private technologicalAnalytics;
  private psychologicalAnalytics;
  constructor();
  private initializeServices;
  private getFeatureList;
  generatePrediction(request: PredictionRequest): Promise<PredictionResponse>;
  private gatherFeatures;
  private gatherPhysicalData;
  private gatherPerformanceData;
  private gatherPsychologicalData;
  private gatherSocialData;
  private gatherEconomicData;
  private gatherTechnologicalData;
  private gatherEnvironmentalData;
  private calculateConfidence;
  private calculateDataQualityScore;
  train(data: any[0]): Promise<void>;
  evaluate(data: any[0]): Promise<{,`n  accuracy: number;,`n  precision: number,`n  recall: number;,`n  f1Score: number}>;
  update(data: any[0]): Promise<void>}
export Record<string, any>;


`
